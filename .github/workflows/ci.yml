name: CI
on:
  push:
    branches:
      - main
      - 'renovate/**'
  pull_request:

env:
  NX_BRANCH: ${{ github.event.number }}
  NX_RUN_GROUP: ${{ github.run_id }}
  NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_AUTH_TOKEN }}
  NX_CLOUD_ENCRYPTION_KEY: ${{ secrets.NX_CLOUD_ENCRYPTION_KEY }}
  NX_CLOUD_ENV_NAME: 'linux'

jobs:
  push:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    # env:
    #   NX_BRANCH: main
    steps:
      - uses: actions/checkout@v3
        name: Checkout [${{ github.ref_name }}]
        with:
          fetch-depth: 0

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3

      - name: Setup Node.js cache
        id: cache-node
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Setup poetry cache
        id: cache-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Setup Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            /root/.gradle/caches
            /root/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker

      # - name: Cache Docker layers
      #   uses: actions/cache@v3
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-single-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-single-buildx

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install the devcontainer CLI
        run: npm install -g @devcontainers/cli@0.49.0

      - name: Start the dev container
        run: |
          # Update the dev container definition to use docker-outside-of-docker instead of
          # docker-in-docker so that the images built inside the dev container are available to the
          # host (i.e. outside the dev container).
          ./tools/switch-devcontainer-to-docker-outside-of-docker.sh

          devcontainer up --workspace-folder ../sage-monorepo \
            --mount type="bind,source=$HOME/.docker,target=/home/vscode/.docker"

      - name: Prepare the workspace in the dev container
        run: |
          devcontainer exec --workspace-folder ../sage-monorepo bash -c ". ./dev-env.sh \
            && workspace-install"

      - name: Lint the affected projects
        run: |
          devcontainer exec --workspace-folder ../sage-monorepo bash -c ". ./dev-env.sh \
            && nx affected --target=lint"

      - name: Build the affected projects
        run: |
          devcontainer exec --workspace-folder ../sage-monorepo bash -c ". ./dev-env.sh \
            && nx affected --target=build"

      - name: Test the affected projects (unit)
        run: |
          devcontainer exec --workspace-folder ../sage-monorepo bash -c ". ./dev-env.sh \
            && nx affected --target=test"

      - name: Test the affected projects (integration)
        run: |
          devcontainer exec --workspace-folder ../sage-monorepo bash -c ". ./dev-env.sh \
            && nx affected --target=integration-test"

      # - name: Publish the images of the affected projects
      #   run: |
      #     devcontainer exec --workspace-folder ../sage-monorepo bash -c ". ./dev-env.sh \
      #       && nx affected --target=publish-and-remove-image --parallel=1"

      - name: Publish the images of the SELECTED projects
        run: |
          devcontainer exec --workspace-folder ../sage-monorepo bash -c ". ./dev-env.sh \
            && nx run-many --target=publish-and-remove-image \
              --projects=openchallenges-app,openchallenges-challenge-service,openchallenges-organization-service,openchallenges-image-service,schematic-api \
              --parallel=1"

      - name: Stop the dev container
        run: docker rm -f sage_devcontainer

      # - run: yarn nx run-many --all --target=test --parallel --max-parallel=2
      # TODO: Fix coverage error when no projects are affected
      # - name: Merge coverage reports
      #   run: yarn coverage:merge
      # - name: Push coverage report to Coveralls
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     path-to-lcov: coverage/lcov.info

  pr:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sage-bionetworks/sage-devcontainer:55645b0
      options: --user root
    # Runs this job if triggered by a PR and if at least one of these conditions are true:
    # - the PR originate from a fork
    # - the branch name does not start with `renovate/` since we know that the workflow would have
    #   been already triggered by the `push` event.
    if: |
      github.event_name == 'pull_request'
        && (
          github.event.pull_request.head.repo.full_name !=
            github.event.pull_request.base.repo.full_name
          || !startsWith(github.head_ref, 'renovate/')
        )
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0

      - name: Prevent git error about detected dubious ownership
        run: git config --global --add safe.directory /__w/sage-monorepo/sage-monorepo

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3

      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Set up Yarn cache
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # - name: Set up Poetry cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.local/share/virtualenvs
      #     key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      # - name: Set up Gradle cache
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.gradle/caches
      #       ~/.gradle/wrapper
      #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-

      # - name: Install Docker CLI
      #   run: |
      #     install -m 0755 -d /etc/apt/keyrings
      #     curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      #     chmod a+r /etc/apt/keyrings/docker.gpg

      #     echo \
      #       "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      #       "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
      #       tee /etc/apt/sources.list.d/docker.list > /dev/null

      #     apt-get update -qq -y && export DEBIAN_FRONTEND=noninteractive \
      #       && apt-get install docker-ce-cli -qq -y

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2
      #   with:
      #     driver: docker

      # - name: Set up Docker layers cache
      #   uses: actions/cache@v3
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-single-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-single-buildx

      - name: Prepare workspace
        run: |
          su vscode -c ". ./dev-env.sh && workspace-install"

      # - run: yarn nx affected --target=prepare
      # - run: yarn nx affected --target=prepare-java --parallel=1
      - run: yarn nx affected --target=lint
      # - run: yarn nx affected --target=build
      # - run: yarn nx affected --target=test
      # - run: yarn nx affected --target=integration-test

      # - name: Install the devcontainer CLI
      #   run: npm install -g @devcontainers/cli@0.49.0

      # - name: Start the dev container
      #   run: |
      #     # Update the dev container definition to use docker-outside-of-docker instead of
      #     # docker-in-docker so that the images built inside the dev container are available to the
      #     # host (i.e. outside the dev container).
      #     ./tools/switch-devcontainer-to-docker-outside-of-docker.sh

      #     devcontainer up \
      #       --mount type=bind,source=/root/.gradle/caches,target=/root/.gradle/caches \
      #       --mount type=bind,source=/root/.gradle/wrapper,target=/root/.gradle/wrapper \
      #       --workspace-folder ../sage-monorepo

      # - name: Prepare the workspace in the dev container
      #   run: |
      #     devcontainer exec --workspace-folder ../sage-monorepo bash -c ". ./dev-env.sh \
      #       && workspace-install"

      # - name: Lint the affected projects
      #   run: |
      #     devcontainer exec --workspace-folder ../sage-monorepo bash -c ". ./dev-env.sh \
      #       && nx affected --target=lint"

      # - name: Build the affected projects
      #   run: |
      #     devcontainer exec --workspace-folder ../sage-monorepo bash -c ". ./dev-env.sh \
      #       && nx affected --target=build"

      # - name: Test the affected projects (unit)
      #   run: |
      #     devcontainer exec --workspace-folder ../sage-monorepo bash -c ". ./dev-env.sh \
      #       && nx affected --target=test"

      # - name: Test the affected projects (integration)
      #   run: |
      #     devcontainer exec --workspace-folder ../sage-monorepo bash -c ". ./dev-env.sh \
      #       && nx affected --target=integration-test"

      # # - name: Build the images of the affected projects
      # #   run: |
      # #     devcontainer exec --workspace-folder ../sage-monorepo bash -c ". ./dev-env.sh \
      # #       && nx affected --target=build-and-remove-image --parallel=1"

      # - name: Build the images of the SELECTED projects
      #   run: |
      #     devcontainer exec --workspace-folder ../sage-monorepo bash -c ". ./dev-env.sh \
      #       && nx run-many --target=build-and-remove-image \
      #         --projects=openchallenges-app,openchallenges-challenge-service,openchallenges-organization-service,openchallenges-image-service,schematic-api \
      #         --parallel=1"

      # - name: Stop the dev container
      #   run: docker rm -f sage_devcontainer
