/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.agora.gene.api.api;

import org.sagebionetworks.agora.gene.api.model.dto.BasicErrorDto;
import org.sagebionetworks.agora.gene.api.model.dto.GCTGenesListDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Genes", description = "the Genes API")
public interface GenesApi {

    default GenesApiDelegate getDelegate() {
        return new GenesApiDelegate() {};
    }

    /**
     * GET /genes/comparison : Get comparison genes based on category and subcategory
     * Get comparison genes based on category and subcategory
     *
     * @param category The category of the comparison (either RNA or Protein Differential Expression). (required)
     * @param subCategory The subcategory for gene comparison (sub-category must be a string). (required)
     * @return Successful response with comparison genes (status code 200)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "getComparisonGenes",
        summary = "Get comparison genes based on category and subcategory",
        description = "Get comparison genes based on category and subcategory",
        tags = { "Genes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response with comparison genes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GCTGenesListDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = GCTGenesListDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/genes/comparison",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<GCTGenesListDto> getComparisonGenes(
        @NotNull @Parameter(name = "category", description = "The category of the comparison (either RNA or Protein Differential Expression).", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = true) String category,
        @NotNull @Parameter(name = "subCategory", description = "The subcategory for gene comparison (sub-category must be a string).", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "subCategory", required = true) String subCategory
    ) {
        return getDelegate().getComparisonGenes(category, subCategory);
    }

}
