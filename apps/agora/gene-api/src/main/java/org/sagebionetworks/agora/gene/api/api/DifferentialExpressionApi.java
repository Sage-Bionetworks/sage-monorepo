/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.agora.gene.api.api;

import org.sagebionetworks.agora.gene.api.model.dto.BasicErrorDto;
import org.sagebionetworks.agora.gene.api.model.dto.ProteinDifferentialExpressionProfilePageDto;
import org.sagebionetworks.agora.gene.api.model.dto.ProteinDifferentialExpressionProfileSearchQueryDto;
import org.sagebionetworks.agora.gene.api.model.dto.RnaDifferentialExpressionProfilePageDto;
import org.sagebionetworks.agora.gene.api.model.dto.RnaDifferentialExpressionProfileSearchQueryDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "DifferentialExpression", description = "Operations about differential expression.")
public interface DifferentialExpressionApi {

    default DifferentialExpressionApiDelegate getDelegate() {
        return new DifferentialExpressionApiDelegate() {};
    }

    /**
     * GET /differentialExpression/protein : List protein differential expression profiles
     * List protein differential expression profiles
     *
     * @param proteinDifferentialExpressionProfileSearchQuery The search query used to find protein differential expression profiles. (optional)
     * @return Success (status code 200)
     *         or Invalid request (status code 400)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "listProteinDifferentialExpressionProfiles",
        summary = "List protein differential expression profiles",
        description = "List protein differential expression profiles",
        tags = { "DifferentialExpression" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProteinDifferentialExpressionProfilePageDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ProteinDifferentialExpressionProfilePageDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/differentialExpression/protein",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<ProteinDifferentialExpressionProfilePageDto> listProteinDifferentialExpressionProfiles(
        @Parameter(name = "proteinDifferentialExpressionProfileSearchQuery", description = "The search query used to find protein differential expression profiles.", in = ParameterIn.QUERY) @Valid ProteinDifferentialExpressionProfileSearchQueryDto proteinDifferentialExpressionProfileSearchQuery
    ) {
        return getDelegate().listProteinDifferentialExpressionProfiles(proteinDifferentialExpressionProfileSearchQuery);
    }


    /**
     * GET /differentialExpression/rna : List RNA differential expression profiles
     * List differential expression profiles
     *
     * @param rnaDifferentialExpressionProfileSearchQuery The search query used to find RNA differential expression profiles. (optional)
     * @return Success (status code 200)
     *         or Invalid request (status code 400)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "listRnaDifferentialExpressionProfiles",
        summary = "List RNA differential expression profiles",
        description = "List differential expression profiles",
        tags = { "DifferentialExpression" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RnaDifferentialExpressionProfilePageDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = RnaDifferentialExpressionProfilePageDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/differentialExpression/rna",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<RnaDifferentialExpressionProfilePageDto> listRnaDifferentialExpressionProfiles(
        @Parameter(name = "rnaDifferentialExpressionProfileSearchQuery", description = "The search query used to find RNA differential expression profiles.", in = ParameterIn.QUERY) @Valid RnaDifferentialExpressionProfileSearchQueryDto rnaDifferentialExpressionProfileSearchQuery
    ) {
        return getDelegate().listRnaDifferentialExpressionProfiles(rnaDifferentialExpressionProfileSearchQuery);
    }

}
