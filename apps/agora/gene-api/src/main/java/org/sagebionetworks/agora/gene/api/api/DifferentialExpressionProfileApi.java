/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.agora.gene.api.api;

import org.sagebionetworks.agora.gene.api.model.dto.BasicErrorDto;
import org.sagebionetworks.agora.gene.api.model.dto.DifferentialExpressionProfileProteinSearchQueryDto;
import org.sagebionetworks.agora.gene.api.model.dto.DifferentialExpressionProfileRnaSearchQueryDto;
import org.sagebionetworks.agora.gene.api.model.dto.DifferentialExpressionProfilesProteinPageDto;
import org.sagebionetworks.agora.gene.api.model.dto.DifferentialExpressionProfilesRnaPageDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "DifferentialExpressionProfile", description = "Operations about differential expression profiles.")
public interface DifferentialExpressionProfileApi {

    default DifferentialExpressionProfileApiDelegate getDelegate() {
        return new DifferentialExpressionProfileApiDelegate() {};
    }

    /**
     * GET /differentialExpressionProfiles/protein : List differential expression profiles (protein)
     * List differential expression profiles (protein)
     *
     * @param differentialExpressionProfileProteinSearchQuery The search query used to find differential expression profiles (protein). (optional)
     * @return Success (status code 200)
     *         or Invalid request (status code 400)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "listDifferentialExpressionProfilesProtein",
        summary = "List differential expression profiles (protein)",
        description = "List differential expression profiles (protein)",
        tags = { "DifferentialExpressionProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DifferentialExpressionProfilesProteinPageDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = DifferentialExpressionProfilesProteinPageDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/differentialExpressionProfiles/protein",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<DifferentialExpressionProfilesProteinPageDto> listDifferentialExpressionProfilesProtein(
        @Parameter(name = "differentialExpressionProfileProteinSearchQuery", description = "The search query used to find differential expression profiles (protein).", in = ParameterIn.QUERY) @Valid DifferentialExpressionProfileProteinSearchQueryDto differentialExpressionProfileProteinSearchQuery
    ) {
        return getDelegate().listDifferentialExpressionProfilesProtein(differentialExpressionProfileProteinSearchQuery);
    }


    /**
     * GET /differentialExpressionProfiles/rna : List differential expression profiles (RNA)
     * List differential expression profiles (RNA)
     *
     * @param differentialExpressionProfileRnaSearchQuery The search query used to find differential expression profiles (RNA). (optional)
     * @return Success (status code 200)
     *         or Invalid request (status code 400)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "listDifferentialExpressionProfilesRna",
        summary = "List differential expression profiles (RNA)",
        description = "List differential expression profiles (RNA)",
        tags = { "DifferentialExpressionProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DifferentialExpressionProfilesRnaPageDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = DifferentialExpressionProfilesRnaPageDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/differentialExpressionProfiles/rna",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<DifferentialExpressionProfilesRnaPageDto> listDifferentialExpressionProfilesRna(
        @Parameter(name = "differentialExpressionProfileRnaSearchQuery", description = "The search query used to find differential expression profiles (RNA).", in = ParameterIn.QUERY) @Valid DifferentialExpressionProfileRnaSearchQueryDto differentialExpressionProfileRnaSearchQuery
    ) {
        return getDelegate().listDifferentialExpressionProfilesRna(differentialExpressionProfileRnaSearchQuery);
    }

}
