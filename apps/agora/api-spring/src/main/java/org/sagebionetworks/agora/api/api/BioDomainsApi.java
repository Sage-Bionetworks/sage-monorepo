/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.agora.api.api;

import org.sagebionetworks.agora.api.model.dto.BasicErrorDto;
import org.sagebionetworks.agora.api.model.dto.BioDomainDto;
import org.sagebionetworks.agora.api.model.dto.BioDomainInfoDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "BioDomains", description = "the BioDomains API")
public interface BioDomainsApi {

    default BioDomainsApiDelegate getDelegate() {
        return new BioDomainsApiDelegate() {};
    }

    /**
     * GET /biodomains/{ensg} : Retrieve bioDomain for a given ENSG
     * Get bioDomain
     *
     * @param ensg The ENSG (Ensembl Gene ID) for which to retrieve biodomain data. (required)
     * @return Successful retrieval of bio-domains (status code 200)
     *         or ENSG not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getBioDomain",
        summary = "Retrieve bioDomain for a given ENSG",
        description = "Get bioDomain",
        tags = { "BioDomains" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful retrieval of bio-domains", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BioDomainDto.class)))
            }),
            @ApiResponse(responseCode = "404", description = "ENSG not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/biodomains/{ensg}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<BioDomainDto>> getBioDomain(
        @Parameter(name = "ensg", description = "The ENSG (Ensembl Gene ID) for which to retrieve biodomain data.", required = true, in = ParameterIn.PATH) @PathVariable("ensg") String ensg
    ) {
        return getDelegate().getBioDomain(ensg);
    }


    /**
     * GET /biodomains : List BioDomains
     * List BioDomains
     *
     * @return Success (status code 200)
     *         or Invalid request (status code 400)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "listBioDomains",
        summary = "List BioDomains",
        description = "List BioDomains",
        tags = { "BioDomains" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BioDomainInfoDto.class))),
                @Content(mediaType = "application/problem+json", array = @ArraySchema(schema = @Schema(implementation = BioDomainInfoDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/biodomains",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<List<BioDomainInfoDto>> listBioDomains(
        
    ) {
        return getDelegate().listBioDomains();
    }

}
