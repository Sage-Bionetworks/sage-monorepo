/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.agora.api.api;

import org.sagebionetworks.agora.api.model.dto.BasicErrorDto;
import org.sagebionetworks.agora.api.model.dto.GCTGenesListDto;
import org.sagebionetworks.agora.api.model.dto.GeneDto;
import org.sagebionetworks.agora.api.model.dto.NominatedGenesListDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Genes", description = "the Genes API")
public interface GenesApi {

    default GenesApiDelegate getDelegate() {
        return new GenesApiDelegate() {};
    }

    /**
     * GET /genes/comparison : Get comparison genes based on category and subcategory
     * Get comparison genes based on category and subcategory
     *
     * @param category The category of the comparison (either RNA or Protein Differential Expression). (required)
     * @param subCategory The subcategory for gene comparison (sub-category must be a string). (required)
     * @return Successful response with comparison genes (status code 200)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "getComparisonGenes",
        summary = "Get comparison genes based on category and subcategory",
        description = "Get comparison genes based on category and subcategory",
        tags = { "Genes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response with comparison genes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GCTGenesListDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = GCTGenesListDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/genes/comparison",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<GCTGenesListDto> getComparisonGenes(
        @NotNull @Parameter(name = "category", description = "The category of the comparison (either RNA or Protein Differential Expression).", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = true) String category,
        @NotNull @Parameter(name = "subCategory", description = "The subcategory for gene comparison (sub-category must be a string).", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "subCategory", required = true) String subCategory
    ) {
        return getDelegate().getComparisonGenes(category, subCategory);
    }


    /**
     * GET /genes/{ensg} : Get gene details by Ensembl Gene ID
     *
     * @param ensg Ensembl Gene ID (ENSG) (required)
     * @return Gene details successfully retrieved (status code 200)
     *         or Invalid request (status code 400)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "getGene",
        summary = "Get gene details by Ensembl Gene ID",
        tags = { "Genes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Gene details successfully retrieved", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GeneDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = GeneDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/genes/{ensg}",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<GeneDto> getGene(
        @Parameter(name = "ensg", description = "Ensembl Gene ID (ENSG)", required = true, in = ParameterIn.PATH) @PathVariable("ensg") String ensg
    ) {
        return getDelegate().getGene(ensg);
    }


    /**
     * GET /genes : Retrieve a list of genes or filter by Ensembl gene IDs
     * This endpoint returns all genes or filters genes by Ensembl gene IDs if provided.
     *
     * @param ids  (optional)
     * @return A list of genes. (status code 200)
     *         or Invalid request (status code 400)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "getGenes",
        summary = "Retrieve a list of genes or filter by Ensembl gene IDs",
        description = "This endpoint returns all genes or filters genes by Ensembl gene IDs if provided.",
        tags = { "Genes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of genes.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GeneDto.class))),
                @Content(mediaType = "application/problem+json", array = @ArraySchema(schema = @Schema(implementation = GeneDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/genes",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<List<GeneDto>> getGenes(
        @Parameter(name = "ids", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ids", required = false) String ids
    ) {
        return getDelegate().getGenes(ids);
    }


    /**
     * GET /genes/nominated : Get nominated genes
     * Retrieves a list of genes with nominations and relevant information.
     *
     * @return A list of nominated genes. (status code 200)
     *         or Invalid request (status code 400)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "getNominatedGenes",
        summary = "Get nominated genes",
        description = "Retrieves a list of genes with nominations and relevant information.",
        tags = { "Genes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of nominated genes.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NominatedGenesListDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = NominatedGenesListDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/genes/nominated",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<NominatedGenesListDto> getNominatedGenes(
        
    ) {
        return getDelegate().getNominatedGenes();
    }


    /**
     * GET /genes/search : Search Genes
     * Search Genes
     *
     * @param id  (required)
     * @return Success (status code 200)
     *         or Invalid request (status code 400)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "searchGene",
        summary = "Search Genes",
        description = "Search Genes",
        tags = { "Genes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GeneDto.class))),
                @Content(mediaType = "application/problem+json", array = @ArraySchema(schema = @Schema(implementation = GeneDto.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/genes/search",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<List<GeneDto>> searchGene(
        @NotNull @Parameter(name = "id", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = true) String id
    ) {
        return getDelegate().searchGene(id);
    }

}
