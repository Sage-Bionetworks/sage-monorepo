openapi: 3.0.3
info:
  contact:
    name: Support
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  description: Advance bioinformatics by evaluating and ranking AI agents.
  license:
    name: Apache 2.0
    url: https://github.com/Sage-Bionetworks/sage-monorepo/blob/main/LICENSE.txt
  title: BixArena API Service
  version: 1.0.0
servers:
  - url: http://localhost/v1
security:
  - jwtBearer: []
tags:
  - description: Operations about battles between AI models.
    name: Battle
  - description: Operations about example prompts for biomedical relevance detection.
    name: Example Prompt
  - description: Operations about leaderboards.
    name: Leaderboard
  - description: Operations about models.
    name: Model
paths:
  /battles:
    get:
      description: List battles with optional filtering and pagination
      operationId: listBattles
      parameters:
        - description: The search query used to find and filter battles.
          explode: true
          in: query
          name: battleSearchQuery
          required: false
          schema:
            $ref: '#/components/schemas/BattleSearchQuery'
          style: deepObject
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BattlePage'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: List battles
      tags:
        - Battle
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Battle
    post:
      description: Create a new battle between two AI models.
      operationId: createBattle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BattleCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Battle'
          description: Battle created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Create a battle
      tags:
        - Battle
      x-anonymous-access: true
      x-content-type: application/json
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Battle
  /battles/{battleId}:
    delete:
      description: Delete a battle by its unique identifier
      operationId: deleteBattle
      parameters:
        - description: The unique identifier of the battle
          explode: false
          in: path
          name: battleId
          required: true
          schema:
            example: 5f6c2d84-5c1a-4b2e-b3d7-0c2a1f9e8a6f
            format: uuid
            type: string
          style: simple
      responses:
        '204':
          description: Battle deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Delete a battle
      tags:
        - Battle
      x-accepts:
        - application/problem+json
      x-tags:
        - tag: Battle
    get:
      description: Returns a single battle by its unique identifier
      operationId: getBattle
      parameters:
        - description: The unique identifier of the battle
          explode: false
          in: path
          name: battleId
          required: true
          schema:
            example: 5f6c2d84-5c1a-4b2e-b3d7-0c2a1f9e8a6f
            format: uuid
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Battle'
          description: Success
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Get a battle by ID
      tags:
        - Battle
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Battle
    patch:
      description: Update a battle's end time or other properties
      operationId: updateBattle
      parameters:
        - description: The unique identifier of the battle
          explode: false
          in: path
          name: battleId
          required: true
          schema:
            example: 5f6c2d84-5c1a-4b2e-b3d7-0c2a1f9e8a6f
            format: uuid
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BattleUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Battle'
          description: Battle updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Update a battle
      tags:
        - Battle
      x-anonymous-access: true
      x-content-type: application/json
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Battle
  /example-prompts:
    get:
      description: Get a list of example prompts with comprehensive filtering options
      operationId: listExamplePrompts
      parameters:
        - description: The search query used to find and filter example prompts.
          explode: true
          in: query
          name: examplePromptSearchQuery
          required: false
          schema:
            $ref: '#/components/schemas/ExamplePromptSearchQuery'
          style: deepObject
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExamplePromptPage'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: List example prompts
      tags:
        - Example Prompt
      x-anonymous-access: true
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Example Prompt
  /leaderboards:
    get:
      description: Get a list of all available leaderboards with their metadata
      operationId: listLeaderboards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardList'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: List all available leaderboards
      tags:
        - Leaderboard
      x-anonymous-access: true
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Leaderboard
  /leaderboards/{leaderboardId}:
    get:
      description: Get paginated leaderboard entries for a specific leaderboard
      operationId: getLeaderboard
      parameters:
        - description: The unique identifier of a leaderboard
          explode: false
          in: path
          name: leaderboardId
          required: true
          schema:
            example: open-source
            type: string
          style: simple
        - description: The search query used to find and filter leaderboard entries.
          explode: true
          in: query
          name: leaderboardSearchQuery
          required: false
          schema:
            $ref: '#/components/schemas/LeaderboardSearchQuery'
          style: deepObject
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardEntryPage'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Get leaderboard entries
      tags:
        - Leaderboard
      x-anonymous-access: true
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Leaderboard
  /leaderboards/{leaderboardId}/history/{modelId}:
    get:
      description: Get historical performance data for a specific model in a leaderboard
      operationId: getModelHistory
      parameters:
        - description: The unique identifier of a leaderboard
          explode: false
          in: path
          name: leaderboardId
          required: true
          schema:
            example: open-source
            type: string
          style: simple
        - description: The unique identifier of a model
          explode: false
          in: path
          name: modelId
          required: true
          schema:
            example: model_456
            type: string
          style: simple
        - description: The query used to filter and paginate historical model performance
            data.
          explode: true
          in: query
          name: leaderboardModelHistoryQuery
          required: false
          schema:
            $ref: '#/components/schemas/LeaderboardModelHistoryQuery'
          style: deepObject
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardModelHistoryPage'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Get model performance history
      tags:
        - Leaderboard
      x-anonymous-access: true
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Leaderboard
  /leaderboards/{leaderboardId}/snapshots:
    get:
      description: Get a paginated list of available snapshots for a leaderboard
      operationId: getLeaderboardSnapshots
      parameters:
        - description: The unique identifier of a leaderboard
          explode: false
          in: path
          name: leaderboardId
          required: true
          schema:
            example: open-source
            type: string
          style: simple
        - description: The query used to filter and paginate leaderboard snapshots.
          explode: true
          in: query
          name: leaderboardSnapshotQuery
          required: false
          schema:
            $ref: '#/components/schemas/LeaderboardSnapshotQuery'
          style: deepObject
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardSnapshotPage'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Get leaderboard snapshots
      tags:
        - Leaderboard
      x-anonymous-access: true
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Leaderboard
  /models:
    get:
      description: 'Get a paginated list of models with optional filters (e.g., active)'
      operationId: listModels
      parameters:
        - description: The search query used to find and filter models.
          explode: true
          in: query
          name: modelSearchQuery
          required: false
          schema:
            $ref: '#/components/schemas/ModelSearchQuery'
          style: deepObject
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelPage'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: List models
      tags:
        - Model
      x-anonymous-access: true
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Model
components:
  parameters:
    battleSearchQuery:
      description: The search query used to find and filter battles.
      explode: true
      in: query
      name: battleSearchQuery
      required: false
      schema:
        $ref: '#/components/schemas/BattleSearchQuery'
      style: deepObject
    battleId:
      description: The unique identifier of the battle
      explode: false
      in: path
      name: battleId
      required: true
      schema:
        example: 5f6c2d84-5c1a-4b2e-b3d7-0c2a1f9e8a6f
        format: uuid
        type: string
      style: simple
    examplePromptSearchQuery:
      description: The search query used to find and filter example prompts.
      explode: true
      in: query
      name: examplePromptSearchQuery
      required: false
      schema:
        $ref: '#/components/schemas/ExamplePromptSearchQuery'
      style: deepObject
    leaderboardId:
      description: The unique identifier of a leaderboard
      explode: false
      in: path
      name: leaderboardId
      required: true
      schema:
        example: open-source
        type: string
      style: simple
    leaderboardSearchQuery:
      description: The search query used to find and filter leaderboard entries.
      explode: true
      in: query
      name: leaderboardSearchQuery
      required: false
      schema:
        $ref: '#/components/schemas/LeaderboardSearchQuery'
      style: deepObject
    modelId:
      description: The unique identifier of a model
      explode: false
      in: path
      name: modelId
      required: true
      schema:
        example: model_456
        type: string
      style: simple
    leaderboardModelHistoryQuery:
      description: The query used to filter and paginate historical model performance
        data.
      explode: true
      in: query
      name: leaderboardModelHistoryQuery
      required: false
      schema:
        $ref: '#/components/schemas/LeaderboardModelHistoryQuery'
      style: deepObject
    leaderboardSnapshotQuery:
      description: The query used to filter and paginate leaderboard snapshots.
      explode: true
      in: query
      name: leaderboardSnapshotQuery
      required: false
      schema:
        $ref: '#/components/schemas/LeaderboardSnapshotQuery'
      style: deepObject
    modelSearchQuery:
      description: The search query used to find and filter models.
      explode: true
      in: query
      name: modelSearchQuery
      required: false
      schema:
        $ref: '#/components/schemas/ModelSearchQuery'
      style: deepObject
  responses:
    BadRequest:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: Invalid request
    Unauthorized:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: Unauthorized
    InternalServerError:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The request cannot be fulfilled due to an unexpected server error
    Forbidden:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The user does not have the permission to perform this action
    NotFound:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The specified resource was not found
    Conflict:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The request conflicts with current state of the target resource
  schemas:
    BattleSort:
      default: created_at
      description: What to sort battles by.
      enum:
        - created_at
      example: created_at
      type: string
    SortDirection:
      default: asc
      description: The direction to sort results.
      enum:
        - asc
        - desc
      example: desc
      type: string
    BattleSearchQuery:
      description: A battle search query.
      properties:
        pageNumber:
          default: 0
          description: The page number to return (0-indexed).
          example: 0
          format: int32
          minimum: 0
          type: integer
        pageSize:
          default: 100
          description: The number of items to return in a single page.
          example: 10
          format: int32
          minimum: 1
          type: integer
        sort:
          $ref: '#/components/schemas/BattleSort'
        direction:
          $ref: '#/components/schemas/SortDirection'
        userId:
          description: Filter by user ID.
          example: a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d
          format: uuid
          nullable: true
          type: string
      required:
        - direction
        - pageNumber
        - pageSize
        - sort
      type: object
    BattleTitle:
      description: Title of the battle.
      example: Gene Expression Analysis Comparison
      type: string
    UserId:
      description: UUID of a user.
      example: a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d
      format: uuid
      type: string
    ModelId:
      description: UUID of an AI model.
      example: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
      format: uuid
      type: string
    CreatedAt:
      description: Timestamp when the entity was created.
      example: 2024-01-15T10:30:00Z
      format: date-time
      type: string
    EndedAt:
      description: Timestamp when the entity ended.
      example: 2024-01-15T11:45:00Z
      format: date-time
      type: string
    Battle:
      description: A battle entity representing a comparison between two AI models.
      example:
        leftModelId: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
        createdAt: 2024-01-15T10:30:00Z
        endedAt: 2024-01-15T11:45:00Z
        id: 5f6c2d84-5c1a-4b2e-b3d7-0c2a1f9e8a6f
        title: Gene Expression Analysis Comparison
        userId: a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d
        rightModelId: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
      properties:
        id:
          description: Unique identifier (UUID) of the battle.
          example: 5f6c2d84-5c1a-4b2e-b3d7-0c2a1f9e8a6f
          format: uuid
          type: string
        title:
          description: Title of the battle.
          example: Gene Expression Analysis Comparison
          type: string
        userId:
          description: UUID of a user.
          example: a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d
          format: uuid
          type: string
        leftModelId:
          description: UUID of an AI model.
          example: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
          format: uuid
          type: string
        rightModelId:
          description: UUID of an AI model.
          example: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
          format: uuid
          type: string
        createdAt:
          description: Timestamp when the entity was created.
          example: 2024-01-15T10:30:00Z
          format: date-time
          type: string
        endedAt:
          description: Timestamp when the entity ended.
          example: 2024-01-15T11:45:00Z
          format: date-time
          type: string
      required:
        - createdAt
        - id
        - leftModelId
        - rightModelId
        - userId
      type: object
    PageMetadata:
      description: The metadata of a page.
      example:
        number: 99
        size: 99
        totalPages: 99
        hasPrevious: true
        hasNext: true
        totalElements: 99
      properties:
        number:
          description: The page number.
          example: 99
          format: int32
          type: integer
        size:
          description: The number of items in a single page.
          example: 99
          format: int32
          type: integer
        totalElements:
          description: Total number of elements in the result set.
          example: 99
          format: int64
          type: integer
        totalPages:
          description: Total number of pages in the result set.
          example: 99
          format: int32
          type: integer
        hasNext:
          description: Returns if there is a next page.
          example: true
          type: boolean
        hasPrevious:
          description: Returns if there is a previous page.
          example: true
          type: boolean
      required:
        - hasNext
        - hasPrevious
        - number
        - size
        - totalElements
        - totalPages
      type: object
    BattlePage:
      description: A page of battles.
      example:
        battles:
          - leftModelId: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
            createdAt: 2024-01-15T10:30:00Z
            endedAt: 2024-01-15T11:45:00Z
            id: 5f6c2d84-5c1a-4b2e-b3d7-0c2a1f9e8a6f
            title: Gene Expression Analysis Comparison
            userId: a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d
            rightModelId: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
          - leftModelId: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
            createdAt: 2024-01-15T10:30:00Z
            endedAt: 2024-01-15T11:45:00Z
            id: 5f6c2d84-5c1a-4b2e-b3d7-0c2a1f9e8a6f
            title: Gene Expression Analysis Comparison
            userId: a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d
            rightModelId: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
        page:
          number: 99
          size: 99
          totalPages: 99
          hasPrevious: true
          hasNext: true
          totalElements: 99
      properties:
        battles:
          description: List of battles in this page.
          items:
            $ref: '#/components/schemas/Battle'
          type: array
        page:
          $ref: '#/components/schemas/PageMetadata'
      required:
        - battles
        - page
      type: object
    BasicError:
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          description: A human readable documentation for the problem type
          type: string
        status:
          description: The HTTP status code
          type: integer
        detail:
          description: A human readable explanation specific to this occurrence of
            the problem
          type: string
        type:
          description: An absolute URI that identifies the problem type
          type: string
        instance:
          description: An absolute URI that identifies the specific occurrence of
            the problem
          type: string
      required:
        - status
        - title
      type: object
    BattleCreateRequest:
      description: The information used to create a new battle.
      properties:
        title:
          description: Title of the battle.
          example: Gene Expression Analysis Comparison
          type: string
        leftModelId:
          description: UUID of an AI model.
          example: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
          format: uuid
          type: string
        rightModelId:
          description: UUID of an AI model.
          example: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
          format: uuid
          type: string
      required:
        - leftModelId
        - rightModelId
      type: object
    BattleUpdateRequest:
      description: The information used to update a battle.
      properties:
        title:
          description: Title of the battle.
          example: Gene Expression Analysis Comparison
          type: string
        endedAt:
          description: Timestamp when the entity ended.
          example: 2024-01-15T11:45:00Z
          format: date-time
          type: string
      type: object
    ExamplePromptSort:
      default: created_at
      description: The field to sort example prompts by.
      enum:
        - created_at
        - random
      example: random
      type: string
    ExamplePromptSource:
      description: The source dataset or origin of the example prompt.
      enum:
        - pubmedqa
        - bixbench
        - bixarena
      example: pubmedqa
      type: string
    ExamplePromptSearchQuery:
      description: An example prompt search query with pagination and filtering options.
      properties:
        pageNumber:
          default: 0
          description: The page number.
          example: 0
          format: int32
          minimum: 0
          type: integer
        pageSize:
          default: 25
          description: The number of items in a single page.
          example: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        sort:
          $ref: '#/components/schemas/ExamplePromptSort'
        direction:
          $ref: '#/components/schemas/SortDirection'
        source:
          $ref: '#/components/schemas/ExamplePromptSource'
        active:
          description: Filter by active status (true returns only active prompts;
            false only inactive; omit for all).
          example: true
          nullable: true
          type: boolean
        search:
          description: Search by question content (case-insensitive partial match).
          example: diabetes
          nullable: true
          type: string
      type: object
    ExamplePrompt:
      description: A self-contained example prompt for biomedical question answering.
      example:
        createdAt: 2025-08-01T09:00:00Z
        question: What are the main symptoms of Type 2 diabetes?
        active: true
        id: 123e4567-e89b-12d3-a456-426614174000
        source: pubmedqa
      properties:
        id:
          description: The unique identifier of the example prompt.
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        question:
          description: The biomedical question text.
          example: What are the main symptoms of Type 2 diabetes?
          maxLength: 1000
          minLength: 1
          type: string
        source:
          $ref: '#/components/schemas/ExamplePromptSource'
        active:
          description: Whether this example prompt is currently active/visible for
            use.
          example: true
          type: boolean
        createdAt:
          description: When the example prompt was created.
          example: 2025-08-01T09:00:00Z
          format: date-time
          type: string
      required:
        - active
        - createdAt
        - id
        - question
        - source
      type: object
    ExamplePromptPage:
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - properties:
            examplePrompts:
              description: A list of example prompts.
              items:
                $ref: '#/components/schemas/ExamplePrompt'
              type: array
          required:
            - examplePrompts
          type: object
      description: A page of example prompts.
      example:
        number: 99
        size: 99
        totalPages: 99
        hasPrevious: true
        examplePrompts:
          - createdAt: 2025-08-01T09:00:00Z
            question: What are the main symptoms of Type 2 diabetes?
            active: true
            id: 123e4567-e89b-12d3-a456-426614174000
            source: pubmedqa
          - createdAt: 2025-08-01T09:00:00Z
            question: What are the main symptoms of Type 2 diabetes?
            active: true
            id: 123e4567-e89b-12d3-a456-426614174000
            source: pubmedqa
        hasNext: true
        totalElements: 99
      type: object
    LeaderboardList:
      description: A list of leaderboards.
      items:
        $ref: '#/components/schemas/LeaderboardList_inner'
      type: array
    LeaderboardSort:
      default: rank
      description: The field to sort leaderboard entries by.
      enum:
        - rank
        - bt_score
        - vote_count
        - created_at
        - model_name
      example: bt_score
      type: string
    LeaderboardSearchQuery:
      description: A leaderboard search query with pagination and filtering options.
      properties:
        pageNumber:
          default: 0
          description: The page number.
          example: 0
          format: int32
          minimum: 0
          type: integer
        pageSize:
          default: 100
          description: The number of items in a single page.
          example: 25
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        sort:
          $ref: '#/components/schemas/LeaderboardSort'
        direction:
          $ref: '#/components/schemas/SortDirection'
        search:
          description: Search by model name (case-insensitive partial match).
          example: gpt
          nullable: true
          type: string
        snapshotId:
          description: Get a specific historical snapshot instead of latest.
          example: snapshot_2025-08-15_10-00
          nullable: true
          type: string
      type: object
    LeaderboardEntry:
      description: A single entry in a leaderboard representing a model's performance.
      example:
        modelName: GPT-4o
        license: MIT
        createdAt: 2025-08-16T10:30:00Z
        modelId: model_456
        btScore: 0.925
        rank: 1
        id: entry_123
        voteCount: 1250
      properties:
        id:
          description: Unique identifier for this leaderboard entry
          example: entry_123
          type: string
        modelId:
          description: Identifier for the model
          example: model_456
          type: string
        modelName:
          description: Display name of the model
          example: GPT-4o
          type: string
        license:
          description: License type of the model
          example: MIT
          type: string
        btScore:
          description: Primary scoring metric (higher is better)
          example: 0.925
          format: double
          type: number
        voteCount:
          description: Number of votes/evaluations
          example: 1250
          type: integer
        rank:
          description: Current rank position (1-based)
          example: 1
          type: integer
        createdAt:
          description: When this entry was created
          example: 2025-08-16T10:30:00Z
          format: date-time
          type: string
      required:
        - btScore
        - createdAt
        - id
        - license
        - modelId
        - modelName
        - rank
        - voteCount
      type: object
    LeaderboardEntryPage:
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - properties:
            updatedAt:
              description: When this leaderboard was last updated
              example: 2025-08-16T14:30:00Z
              format: date-time
              type: string
            snapshotId:
              description: Identifier for this snapshot/timepoint
              example: snapshot_2025-08-16_14-30
              type: string
            entries:
              description: A list of leaderboard entries.
              items:
                $ref: '#/components/schemas/LeaderboardEntry'
              type: array
          required:
            - entries
            - snapshotId
            - updatedAt
          type: object
      description: A page of leaderboard entries.
      example:
        number: 99
        entries:
          - modelName: GPT-4o
            license: MIT
            createdAt: 2025-08-16T10:30:00Z
            modelId: model_456
            btScore: 0.925
            rank: 1
            id: entry_123
            voteCount: 1250
          - modelName: GPT-4o
            license: MIT
            createdAt: 2025-08-16T10:30:00Z
            modelId: model_456
            btScore: 0.925
            rank: 1
            id: entry_123
            voteCount: 1250
        snapshotId: snapshot_2025-08-16_14-30
        size: 99
        totalPages: 99
        hasPrevious: true
        hasNext: true
        totalElements: 99
        updatedAt: 2025-08-16T14:30:00Z
      type: object
    LeaderboardHistorySort:
      default: created_at
      description: The field to sort historical entries by.
      enum:
        - created_at
        - bt_score
        - rank
      example: created_at
      type: string
    LeaderboardModelHistoryQuery:
      description: A query for retrieving historical leaderboard data for a model.
      properties:
        pageNumber:
          default: 0
          description: The page number.
          example: 0
          format: int32
          minimum: 0
          type: integer
        pageSize:
          default: 100
          description: The number of items in a single page.
          example: 50
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        sort:
          $ref: '#/components/schemas/LeaderboardHistorySort'
        direction:
          $ref: '#/components/schemas/SortDirection'
        fromDate:
          description: Include only entries created on or after this date.
          example: 2025-08-01
          format: date
          nullable: true
          type: string
        toDate:
          description: Include only entries created on or before this date.
          example: 2025-08-16
          format: date
          nullable: true
          type: string
      type: object
    HistoricalLeaderboardEntry:
      description: A historical entry representing a model's performance at a specific
        point in time.
      example:
        createdAt: 2025-08-15T10:00:00Z
        snapshotId: snapshot_2025-08-15_10-00
        btScore: 0.915
        rank: 2
        voteCount: 1180
      properties:
        snapshotId:
          description: Identifier for the snapshot/timepoint
          example: snapshot_2025-08-15_10-00
          type: string
        btScore:
          description: Primary scoring metric at this point in time
          example: 0.915
          format: double
          type: number
        voteCount:
          description: Number of votes/evaluations at this point in time
          example: 1180
          type: integer
        rank:
          description: Rank position at this point in time (1-based)
          example: 2
          type: integer
        createdAt:
          description: When this snapshot was created
          example: 2025-08-15T10:00:00Z
          format: date-time
          type: string
      required:
        - btScore
        - createdAt
        - rank
        - snapshotId
        - voteCount
      type: object
    LeaderboardModelHistoryPage:
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - properties:
            modelId:
              description: Identifier for the model
              example: model_456
              type: string
            modelName:
              description: Display name of the model
              example: GPT-4o
              type: string
            history:
              description: A list of historical leaderboard entries.
              items:
                $ref: '#/components/schemas/HistoricalLeaderboardEntry'
              type: array
          required:
            - history
            - modelId
            - modelName
          type: object
      description: A page of historical leaderboard entries for a specific model.
      example:
        number: 99
        modelName: GPT-4o
        size: 99
        modelId: model_456
        totalPages: 99
        hasPrevious: true
        hasNext: true
        history:
          - createdAt: 2025-08-15T10:00:00Z
            snapshotId: snapshot_2025-08-15_10-00
            btScore: 0.915
            rank: 2
            voteCount: 1180
          - createdAt: 2025-08-15T10:00:00Z
            snapshotId: snapshot_2025-08-15_10-00
            btScore: 0.915
            rank: 2
            voteCount: 1180
        totalElements: 99
      type: object
    LeaderboardSnapshotSort:
      default: created_at
      description: The field to sort snapshots by.
      enum:
        - created_at
      example: created_at
      type: string
    LeaderboardSnapshotQuery:
      description: A query for retrieving leaderboard snapshots.
      properties:
        pageNumber:
          default: 0
          description: The page number.
          example: 0
          format: int32
          minimum: 0
          type: integer
        pageSize:
          default: 100
          description: The number of items in a single page.
          example: 20
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        sort:
          $ref: '#/components/schemas/LeaderboardSnapshotSort'
        direction:
          $ref: '#/components/schemas/SortDirection'
      type: object
    LeaderboardSnapshot:
      description: A snapshot representing the state of a leaderboard at a specific
        point in time.
      example:
        createdAt: 2025-08-16T14:30:00Z
        entryCount: 50
        description: Weekly evaluation run
        id: snapshot_2025-08-16_14-30
      properties:
        id:
          description: Unique identifier for this snapshot
          example: snapshot_2025-08-16_14-30
          type: string
        createdAt:
          description: When this snapshot was created
          example: 2025-08-16T14:30:00Z
          format: date-time
          type: string
        entryCount:
          description: Number of models in this snapshot
          example: 50
          type: integer
        description:
          description: Optional description of this snapshot
          example: Weekly evaluation run
          nullable: true
          type: string
      required:
        - createdAt
        - entryCount
        - id
      type: object
    LeaderboardSnapshotPage:
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - properties:
            snapshots:
              description: A list of leaderboard snapshots.
              items:
                $ref: '#/components/schemas/LeaderboardSnapshot'
              type: array
          required:
            - snapshots
          type: object
      description: A page of leaderboard snapshots.
      example:
        snapshots:
          - createdAt: 2025-08-16T14:30:00Z
            entryCount: 50
            description: Weekly evaluation run
            id: snapshot_2025-08-16_14-30
          - createdAt: 2025-08-16T14:30:00Z
            entryCount: 50
            description: Weekly evaluation run
            id: snapshot_2025-08-16_14-30
        number: 99
        size: 99
        totalPages: 99
        hasPrevious: true
        hasNext: true
        totalElements: 99
      type: object
    ModelSort:
      default: name
      description: The field to sort models by.
      enum:
        - name
        - created_at
        - updated_at
        - slug
        - license
        - active
      example: created_at
      type: string
    License:
      description: The license of the model
      enum:
        - open-source
        - commercial
      example: open-source
      type: string
    ModelSearchQuery:
      description: A model search query with pagination and filtering options.
      properties:
        pageNumber:
          default: 0
          description: The page number.
          example: 0
          format: int32
          minimum: 0
          type: integer
        pageSize:
          default: 25
          description: The number of items in a single page.
          example: 25
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        sort:
          $ref: '#/components/schemas/ModelSort'
        direction:
          $ref: '#/components/schemas/SortDirection'
        search:
          description: Search by model name or slug (case-insensitive partial match).
          example: vision
          nullable: true
          type: string
        active:
          description: Filter by active status (true returns only active models; false
            only inactive; omit for all).
          example: true
          nullable: true
          type: boolean
        license:
          $ref: '#/components/schemas/License'
        organization:
          description: Filter by organization name (case-insensitive partial match).
          example: OpenAI
          nullable: true
          type: string
      type: object
    Model:
      description: A model entity.
      example:
        externalLink: https://openrouter.ai/models/openai/gpt-4
        active: true
        description: A large multimodal model that can process text and images.
        apiBase: https://openrouter.ai/api/v1
        apiModelName: anthropic/claude-sonnet-4.5
        license: open-source
        createdAt: 2025-09-15T12:00:00Z
        organization: OpenAI
        name: My Awesome Model
        alias: awesome-model-v2
        id: 5f6c2d84-5c1a-4b2e-b3d7-0c2a1f9e8a6f
        slug: my-awesome-model
        updatedAt: 2025-09-20T08:30:00Z
      properties:
        id:
          description: Unique identifier (UUID) of the model.
          example: 5f6c2d84-5c1a-4b2e-b3d7-0c2a1f9e8a6f
          type: string
        slug:
          description: URL-friendly unique slug for the model.
          example: my-awesome-model
          type: string
        alias:
          description: Alternative name or alias for the model.
          example: awesome-model-v2
          nullable: true
          type: string
        name:
          description: Human-readable name of the model.
          example: My Awesome Model
          type: string
        organization:
          description: Organization that developed or maintains the model.
          example: OpenAI
          nullable: true
          type: string
        license:
          $ref: '#/components/schemas/License'
        active:
          description: Whether the model is active/visible.
          example: true
          type: boolean
        externalLink:
          description: External URL with more information about the model.
          example: https://openrouter.ai/models/openai/gpt-4
          type: string
        description:
          description: Detailed description of the model.
          example: A large multimodal model that can process text and images.
          maxLength: 300
          minLength: 1
          nullable: true
          type: string
        apiModelName:
          description: The model name used for API calls.
          example: anthropic/claude-sonnet-4.5
          type: string
        apiBase:
          description: Base URL for the model API.
          example: https://openrouter.ai/api/v1
          type: string
        createdAt:
          description: When the model was created.
          example: 2025-09-15T12:00:00Z
          format: date-time
          type: string
        updatedAt:
          description: When the model was last updated.
          example: 2025-09-20T08:30:00Z
          format: date-time
          type: string
      required:
        - active
        - apiBase
        - apiModelName
        - createdAt
        - externalLink
        - id
        - license
        - name
        - slug
        - updatedAt
      type: object
    ModelPage:
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - properties:
            models:
              description: A list of models.
              items:
                $ref: '#/components/schemas/Model'
              type: array
          required:
            - models
          type: object
      description: A page of models.
      example:
        number: 99
        models:
          - externalLink: https://openrouter.ai/models/openai/gpt-4
            active: true
            description: A large multimodal model that can process text and images.
            apiBase: https://openrouter.ai/api/v1
            apiModelName: anthropic/claude-sonnet-4.5
            license: open-source
            createdAt: 2025-09-15T12:00:00Z
            organization: OpenAI
            name: My Awesome Model
            alias: awesome-model-v2
            id: 5f6c2d84-5c1a-4b2e-b3d7-0c2a1f9e8a6f
            slug: my-awesome-model
            updatedAt: 2025-09-20T08:30:00Z
          - externalLink: https://openrouter.ai/models/openai/gpt-4
            active: true
            description: A large multimodal model that can process text and images.
            apiBase: https://openrouter.ai/api/v1
            apiModelName: anthropic/claude-sonnet-4.5
            license: open-source
            createdAt: 2025-09-15T12:00:00Z
            organization: OpenAI
            name: My Awesome Model
            alias: awesome-model-v2
            id: 5f6c2d84-5c1a-4b2e-b3d7-0c2a1f9e8a6f
            slug: my-awesome-model
            updatedAt: 2025-09-20T08:30:00Z
        size: 99
        totalPages: 99
        hasPrevious: true
        hasNext: true
        totalElements: 99
      type: object
    LeaderboardList_inner:
      example:
        name: Open Source Models
        description: Performance ranking of open-source AI models
        id: open-source
        updatedAt: 2025-08-16T14:30:00Z
      properties:
        id:
          description: Unique identifier for the leaderboard
          example: open-source
          type: string
        name:
          description: Display name for the leaderboard
          example: Open Source Models
          type: string
        description:
          description: Description of what this leaderboard measures
          example: Performance ranking of open-source AI models
          type: string
        updatedAt:
          description: When this leaderboard was last updated
          example: 2025-08-16T14:30:00Z
          format: date-time
          type: string
      required:
        - description
        - id
        - name
        - updatedAt
      type: object
  securitySchemes:
    jwtBearer:
      bearerFormat: JWT
      description: |
        Short-lived internal JWT issued by this service after authentication through Synapse or (later) an API key exchange.
      scheme: bearer
      type: http
x-oauth2-audience: urn:bixarena:api
