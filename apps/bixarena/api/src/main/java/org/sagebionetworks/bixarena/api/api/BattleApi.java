/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.bixarena.api.api;

import org.sagebionetworks.bixarena.api.model.dto.BasicErrorDto;
import org.sagebionetworks.bixarena.api.model.dto.BattleCreateRequestDto;
import org.sagebionetworks.bixarena.api.model.dto.BattleDto;
import org.sagebionetworks.bixarena.api.model.dto.BattlePageDto;
import org.sagebionetworks.bixarena.api.model.dto.BattleSearchQueryDto;
import org.sagebionetworks.bixarena.api.model.dto.BattleUpdateRequestDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Battle", description = "Operations about battles between AI models.")
public interface BattleApi {

    default BattleApiDelegate getDelegate() {
        return new BattleApiDelegate() {};
    }

    /**
     * POST /battles : Create a battle
     * Create a new battle between two AI models.
     *
     * @param battleCreateRequestDto  (required)
     * @return Battle created successfully (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Model not found (status code 404)
     *         or Conflict (status code 409)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createBattle",
        summary = "Create a battle",
        description = "Create a new battle between two AI models.",
        tags = { "Battle" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Battle created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BattleDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Model not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer", scopes={ "create:battles" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/battles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BattleDto> createBattle(
        @Parameter(name = "BattleCreateRequestDto", description = "", required = true) @Valid @RequestBody BattleCreateRequestDto battleCreateRequestDto
    ) {
        return getDelegate().createBattle(battleCreateRequestDto);
    }


    /**
     * DELETE /battles/{battleId} : Delete a battle
     * Delete a battle by its unique identifier
     *
     * @param battleId The unique identifier of the battle (required)
     * @return Battle deleted successfully (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Battle not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteBattle",
        summary = "Delete a battle",
        description = "Delete a battle by its unique identifier",
        tags = { "Battle" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Battle deleted successfully"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Battle not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer", scopes={ "delete:battles" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/battles/{battleId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteBattle(
        @Parameter(name = "battleId", description = "The unique identifier of the battle", required = true, in = ParameterIn.PATH) @PathVariable("battleId") String battleId
    ) {
        return getDelegate().deleteBattle(battleId);
    }


    /**
     * GET /battles/{battleId} : Get a battle by ID
     * Returns a single battle by its unique identifier
     *
     * @param battleId The unique identifier of the battle (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or Battle not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getBattle",
        summary = "Get a battle by ID",
        description = "Returns a single battle by its unique identifier",
        tags = { "Battle" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BattleDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Battle not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer", scopes={ "read:battles" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/battles/{battleId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BattleDto> getBattle(
        @Parameter(name = "battleId", description = "The unique identifier of the battle", required = true, in = ParameterIn.PATH) @PathVariable("battleId") String battleId
    ) {
        return getDelegate().getBattle(battleId);
    }


    /**
     * GET /battles : List battles
     * List battles with optional filtering and pagination
     *
     * @param battleSearchQuery The search query used to find and filter battles. (optional)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "listBattles",
        summary = "List battles",
        description = "List battles with optional filtering and pagination",
        tags = { "Battle" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BattlePageDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer", scopes={ "read:battles" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/battles",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BattlePageDto> listBattles(
        @Parameter(name = "battleSearchQuery", description = "The search query used to find and filter battles.", in = ParameterIn.QUERY) @Valid @Nullable BattleSearchQueryDto battleSearchQuery
    ) {
        return getDelegate().listBattles(battleSearchQuery);
    }


    /**
     * PATCH /battles/{battleId} : Update a battle
     * Update a battle&#39;s end time or other properties
     *
     * @param battleId The unique identifier of the battle (required)
     * @param battleUpdateRequestDto  (required)
     * @return Battle updated successfully (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Battle not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "updateBattle",
        summary = "Update a battle",
        description = "Update a battle's end time or other properties",
        tags = { "Battle" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Battle updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BattleDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Battle not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer", scopes={ "update:battles" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/battles/{battleId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BattleDto> updateBattle(
        @Parameter(name = "battleId", description = "The unique identifier of the battle", required = true, in = ParameterIn.PATH) @PathVariable("battleId") String battleId,
        @Parameter(name = "BattleUpdateRequestDto", description = "", required = true) @Valid @RequestBody BattleUpdateRequestDto battleUpdateRequestDto
    ) {
        return getDelegate().updateBattle(battleId, battleUpdateRequestDto);
    }

}
