/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.bixarena.api.api;

import org.sagebionetworks.bixarena.api.model.dto.BasicErrorDto;
import java.util.UUID;
import org.sagebionetworks.bixarena.api.model.dto.VoteDto;
import org.sagebionetworks.bixarena.api.model.dto.VotePageDto;
import org.sagebionetworks.bixarena.api.model.dto.VoteSearchQueryDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Vote", description = "Operations about votes.")
public interface VoteApi {

    default VoteApiDelegate getDelegate() {
        return new VoteApiDelegate() {};
    }

    /**
     * GET /votes/{voteId} : Get a vote by ID
     * Returns a single vote by its unique identifier
     *
     * @param voteId The unique identifier of the vote (required)
     * @return Success (status code 200)
     *         or Unauthorized (status code 401)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "getVote",
        summary = "Get a vote by ID",
        description = "Returns a single vote by its unique identifier",
        tags = { "Vote" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VoteDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = VoteDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/votes/{voteId}",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<VoteDto> getVote(
        @Parameter(name = "voteId", description = "The unique identifier of the vote", required = true, in = ParameterIn.PATH) @PathVariable("voteId") UUID voteId
    ) {
        return getDelegate().getVote(voteId);
    }


    /**
     * GET /votes : List votes
     * List votes with optional filtering and pagination
     *
     * @param voteSearchQuery The search query used to find and filter votes. (optional)
     * @return Success (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "listVotes",
        summary = "List votes",
        description = "List votes with optional filtering and pagination",
        tags = { "Vote" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VotePageDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = VotePageDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/votes",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<VotePageDto> listVotes(
        @Parameter(name = "voteSearchQuery", description = "The search query used to find and filter votes.", in = ParameterIn.QUERY) @Valid @Nullable VoteSearchQueryDto voteSearchQuery
    ) {
        return getDelegate().listVotes(voteSearchQuery);
    }

}
