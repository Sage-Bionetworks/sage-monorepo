/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.bixarena.api.api;

import org.sagebionetworks.bixarena.api.model.dto.BasicErrorDto;
import org.sagebionetworks.bixarena.api.model.dto.EvaluationCreateRequestDto;
import org.sagebionetworks.bixarena.api.model.dto.EvaluationDto;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Evaluation", description = "Operations about evaluations.")
public interface EvaluationApi {

    default EvaluationApiDelegate getDelegate() {
        return new EvaluationApiDelegate() {};
    }

    /**
     * POST /battles/{battleId}/evaluations : Create an evaluation
     * Create a new evaluation for a battle.
     *
     * @param battleId The unique identifier of the battle (required)
     * @param evaluationCreateRequestDto  (required)
     * @return Evaluation created successfully (status code 201)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The user does not have the permission to perform this action (status code 403)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "createEvaluation",
        summary = "Create an evaluation",
        description = "Create a new evaluation for a battle.",
        tags = { "Evaluation" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Evaluation created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EvaluationDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = EvaluationDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user does not have the permission to perform this action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/battles/{battleId}/evaluations",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EvaluationDto> createEvaluation(
        @Parameter(name = "battleId", description = "The unique identifier of the battle", required = true, in = ParameterIn.PATH) @PathVariable("battleId") UUID battleId,
        @Parameter(name = "EvaluationCreateRequestDto", description = "", required = true) @Valid @RequestBody EvaluationCreateRequestDto evaluationCreateRequestDto
    ) {
        return getDelegate().createEvaluation(battleId, evaluationCreateRequestDto);
    }

}
