/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.bixarena.auth.service.api;

import org.sagebionetworks.bixarena.auth.service.model.dto.BasicErrorDto;
import org.sagebionetworks.bixarena.auth.service.model.dto.GetJwks200ResponseDto;
import org.sagebionetworks.bixarena.auth.service.model.dto.MintInternalToken200ResponseDto;
import org.sagebionetworks.bixarena.auth.service.model.dto.OidcCallback200ResponseDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Auth", description = "Authentication and token minting operations.")
public interface AuthApi {

    default AuthApiDelegate getDelegate() {
        return new AuthApiDelegate() {};
    }

    /**
     * GET /.well-known/jwks.json : JSON Web Key Set
     * Returns the public keys used to verify internally issued JWTs.
     *
     * @return JWKS document (status code 200)
     *         or Invalid request parameters (status code 400)
     */
    @Operation(
        operationId = "getJwks",
        summary = "JSON Web Key Set",
        description = "Returns the public keys used to verify internally issued JWTs.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "JWKS document", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetJwks200ResponseDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = GetJwks200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/.well-known/jwks.json",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<GetJwks200ResponseDto> getJwks(
        
    ) {
        return getDelegate().getJwks();
    }


    /**
     * POST /auth/logout : Logout current session
     * Invalidate the current authenticated session.
     *
     * @return Logged out (idempotent) (status code 204)
     */
    @Operation(
        operationId = "logout",
        summary = "Logout current session",
        description = "Invalidate the current authenticated session.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Logged out (idempotent)")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/logout"
    )
    
    default ResponseEntity<Void> logout(
        
    ) {
        return getDelegate().logout();
    }


    /**
     * POST /token : Mint short-lived internal JWT
     * Exchanges an authenticated session (cookie) for an internal JWT.
     *
     * @return Access token response (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "mintInternalToken",
        summary = "Mint short-lived internal JWT",
        description = "Exchanges an authenticated session (cookie) for an internal JWT.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Access token response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MintInternalToken200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/token",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MintInternalToken200ResponseDto> mintInternalToken(
        
    ) {
        return getDelegate().mintInternalToken();
    }


    /**
     * GET /auth/oidc/callback : OIDC redirect callback
     * Handles redirect from Synapse, validates state and nonce, establishes authenticated session.
     *
     * @param code  (required)
     * @param state  (required)
     * @return Authentication successful (status code 200)
     *         or Invalid request parameters (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "oidcCallback",
        summary = "OIDC redirect callback",
        description = "Handles redirect from Synapse, validates state and nonce, establishes authenticated session.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Authentication successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OidcCallback200ResponseDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = OidcCallback200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/auth/oidc/callback",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<OidcCallback200ResponseDto> oidcCallback(
        @NotNull @Parameter(name = "code", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "code", required = true) String code,
        @NotNull @Parameter(name = "state", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = true) String state
    ) {
        return getDelegate().oidcCallback(code, state);
    }


    /**
     * GET /auth/oidc/start : Start Synapse OIDC authorization code flow
     * Initiates the OIDC login by redirecting the user to Synapse with state and nonce.
     *
     * @return Flow started (no content; clients should follow redirect) (status code 204)
     *         or Redirect to Synapse login (status code 302)
     *         or Invalid request parameters (status code 400)
     */
    @Operation(
        operationId = "startOidc",
        summary = "Start Synapse OIDC authorization code flow",
        description = "Initiates the OIDC login by redirecting the user to Synapse with state and nonce.",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Flow started (no content; clients should follow redirect)"),
            @ApiResponse(responseCode = "302", description = "Redirect to Synapse login"),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/auth/oidc/start",
        produces = { "application/problem+json" }
    )
    
    default ResponseEntity<Void> startOidc(
        
    ) {
        return getDelegate().startOidc();
    }

}
