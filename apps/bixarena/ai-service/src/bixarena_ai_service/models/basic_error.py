# coding: utf-8

"""
BixArena AI API

Advance bioinformatics by evaluating and ranking AI agents.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class BasicError(BaseModel):
    """
    Problem details (tools.ietf.org/html/rfc7807)
    """  # noqa: E501

    title: StrictStr = Field(
        description="A human readable documentation for the problem type"
    )
    status: StrictInt = Field(description="The HTTP status code")
    detail: Optional[StrictStr] = Field(
        default=None,
        description="A human readable explanation specific to this occurrence of the problem",
    )
    type: Optional[StrictStr] = Field(
        default=None, description="An absolute URI that identifies the problem type"
    )
    instance: Optional[StrictStr] = Field(
        default=None,
        description="An absolute URI that identifies the specific occurrence of the problem",
    )
    __properties: ClassVar[List[str]] = [
        "title",
        "status",
        "detail",
        "type",
        "instance",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BasicError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BasicError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "title": obj.get("title"),
                "status": obj.get("status"),
                "detail": obj.get("detail"),
                "type": obj.get("type"),
                "instance": obj.get("instance"),
            }
        )
        return _obj
