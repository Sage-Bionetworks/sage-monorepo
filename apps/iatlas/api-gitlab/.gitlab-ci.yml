variables:
  CI: "1"

  # Staging variables
  STAGING_CONTAINER_NAME: $CI_REGISTRY_IMAGE:${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}

stages:
  - test_code
  - publish_coverage
  - build_container

tests:
  only:
    - merge_requests
  except:
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != "staging"
  stage: test_code
  image: python:3.8-alpine
  script:
    - apk add postgresql-libs
    - apk add --no-cache --virtual .build-deps gcc musl-dev postgresql-dev && pip install --no-cache-dir -r ./requirements.txt && apk del --no-cache .build-deps
    - pip install pytest pytest-xdist coverage
    - export POSTGRES_DB=$POSTGRES_DB
    - export POSTGRES_HOST=$POSTGRES_HOST
    - export POSTGRES_PASSWORD=$POSTGRES_PASSWORD
    - export POSTGRES_USER=$POSTGRES_USER
    - coverage run -m pytest -n auto
    - coverage html
  artifacts:
    expose_as: "coverage-initial"
    paths:
      - coverage
    expire_in: 30 days

tests:coverage-report:
  only:
    - staging
    - master
  stage: test_code
  image: python:3.8-alpine
  script:
    - apk add postgresql-libs
    - apk add --no-cache --virtual .build-deps gcc musl-dev postgresql-dev && pip install --no-cache-dir -r ./requirements.txt && apk del --no-cache .build-deps
    - pip install pytest pytest-xdist coverage
    - export POSTGRES_DB=$POSTGRES_DB
    - export POSTGRES_HOST=$POSTGRES_HOST
    - export POSTGRES_PASSWORD=$POSTGRES_PASSWORD
    - export POSTGRES_USER=$POSTGRES_USER
    - coverage run -m pytest -n auto
    - coverage xml -o coverage/iatlas-api_coverage_$CI_MERGE_REQUEST_TARGET_BRANCH_NAME.xml
    - coverage report --skip-covered | grep TOTAL
  artifacts:
    reports:
      cobertura: coverage/iatlas-api_coverage_$CI_MERGE_REQUEST_TARGET_BRANCH_NAME.xml

pages:
  only:
    - merge_requests
  except:
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != "staging"
  stage: publish_coverage
  dependencies:
    - tests
  script:
    - mv ./coverage/ ./public/
    - echo "Coverage available at $CI_PAGES_URL/"
  artifacts:
    expose_as: "coverage"
    paths:
      - public
    expire_in: 30 days

Build Container:
  only:
    - staging
  stage: build_container
  image: docker:19.03.1-dind
  services:
    - name: docker:19.03.1-dind
  script:
    - export FLASK_ENV=staging
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $STAGING_CONTAINER_NAME .
    - docker push $STAGING_CONTAINER_NAME
