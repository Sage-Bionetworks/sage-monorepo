type Query {
  """
  The data structure containing Copy Number Results.

  If no arguments are passed, this will return all copy number results.
  """
  copyNumberResults(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    id: ID
    "A list of data set names associated with the copy number results to filter by."
    dataSet: [String!]
    "A list of feature names associated with the copy number results to filter by."
    feature: [String!]
    "A list of gene entrez ids associated with the copy number results to filter by."
    entrez: [Int!]
    "A list of tag names associated with the copy number results to filter by."
    tag: [String!]
    "The direction of the copy number results to filter by. (either 'Amp' or 'Del')"
    direction: DirectionEnum
    "A minimum P value to filter the copy number results by."
    minPValue: Float
    "A maximum P value to filter the copy number results by."
    maxPValue: Float
    "A minimum log10 calculation of the P value to filter the copy number results by."
    minLog10PValue: Float
    "A maximum log10 calculation of the P value to filter the copy number results by."
    maxLog10PValue: Float
    "A minimum mean normal to filter the copy number results by."
    minMeanNormal: Float
    "A minimum mean CNV to filter the copy number results by."
    minMeanCnv: Float
    "A minimum T stat to filter the copy number results by."
    minTStat: Float
  ): CopyNumberResult!

  """
  The data structure containing Data Sets.

  If no arguments are passed, this will return all data sets.
  """
  dataSets(
    "A list of data set names to look up."
    dataSet: [String!]
    "A list of sample names associated with the data sets to filter by."
    sample: [String!]
    "A list of data set types to filter by."
    dataSetType: [String!]
  ): [DataSet!]!

  """
  The "driverResults" query accepts:

    - "dataSet", a list of data set names associated with the driver results to filter by.
    - "entrez", a list of gene entrez ids associated with the driver results to filter by.
    - "feature", a list of feature names associated with the driver results to filter by.
    - "mutationCode", a list of mutation code names associated with the driver results to filter by.
    - "tag", a list of tag names associated with the driver results to filter by.
    - "maxPValue", a maximum P value to filter the driver results by.
    - "minPValue", a minimum P value to filter the driver results by.

    - "maxLog10PValue", a maximum log10 calculation of the P value to filter the driver results by.
    - "minLog10PValue", a minimum log10 calculation of the P value to filter the driver results by.
    - "minFoldChange", a minimum fold change to filter the driver results by.
    - "minLog10FoldChange", a minimum log10 calculation of the fold change to filter the driver results by.
    - "minNumWildTypes", a minimum of wild type genes to filter the driver results by.
    - "minNumMutants", a minimum mutant genes to filter the driver results by.

  If no arguments are passed, this will return all driver results.
  """
  driverResults(
    dataSet: [String!]
    entrez: [Int!]
    feature: [String!]
    mutationCode: [String!]
    tag: [String!]
    maxPValue: Float
    minPValue: Float
    maxLog10PValue: Float
    minLog10PValue: Float
    minFoldChange: Float
    minLog10FoldChange: Float
    minNumWildTypes: Int
    minNumMutants: Int
    page: Int
  ): DriverResultPage!

  """
  The "edges" query accepts:

    - "maxScore" the maximum score value to return
    - "minScore" the minimum score value to return
    - "node1" a list of starting node names
    - "node2" a list of ending node names
    - "page", the page of results to get. Defaults to 1 (the first page) with a maximum of 100,000 rows return.

  If no arguments are passed, this will return all edges (please note, there will be a LOT of results).
  """
  edges(
    maxScore: Float
    minScore: Float
    node1: [String!]
    node2: [String!]
    page: Int
  ): EdgePage!

  """
  The "features" query accepts:

    - "dataSet", a list of data set names associated with the features to filter by.
    - "related", a list of "related" tag names associated with the data set that is associated with the features to filter by.
    - "tag", a list of tag names associated with the sample that is associated with the features to filter by.
    - "feature", a list of feature names to filter by.
    - "featureClass", a list of feature class names associated with the features to filter by.
    - "sample", a list of sample names associated with the feature to filter by.

  If no arguments are passed, this will return all features.

  See also: featuresByClass and featuresByTag
  """
  features(
    dataSet: [String!]
    related: [String!]
    tag: [String!]
    feature: [String!]
    featureClass: [String!]
    sample: [String!]
    maxValue: Float
    minValue: Float
  ): [Feature!]!

  """
  The "featuresByClass" query accepts:

    - "dataSet", a list of data set names associated with the features to filter by.
    - "related", a list of "related" tag names associated with the data set that is associated with the features to filter by.
    - "tag", a list of tag names associated with the sample that is associated with the features to filter by.
    - "feature", a list of feature names to filter by.
    - "featureClass", a list of feature class names associated with the features to filter by.
    - "sample", a list of sample names associated with the feature to filter by.

  If no arguments are passed, this will return all features organized by feature class.
  """
  featuresByClass(
    dataSet: [String!]
    related: [String!]
    tag: [String!]
    feature: [String!]
    featureClass: [String!]
    sample: [String!]
    maxValue: Float
    minValue: Float
  ): [FeaturesByClass!]!

  """
  The "featuresByTag" query accepts:

    - "dataSet", a list of data set names associated with the features to filter by.
    - "related", a list of "related" tag names associated with the data set that is associated with the features to filter by.
    - "tag", a list of tag names associated with the sample that is associated with the features to filter by.
    - "feature", a list of feature names to filter by.
    - "featureClass", a list of feature class names associated with the features to filter by.
    - "sample", a list of sample names associated with the feature to filter by.

  If no arguments are passed, this will return all features organized by tag.
  """
  featuresByTag(
    dataSet: [String!]
    related: [String!]
    tag: [String!]
    feature: [String!]
    featureClass: [String!]
    sample: [String!]
    maxValue: Float
    minValue: Float
  ): [FeaturesByTag!]!

  """
  The "gene" query accepts:

    - "entrez", the entrez id of the gene to look up.
    - "sample", a list of sample names associated with the gene (used to look up RNA sequence expressions).
  """
  gene(entrez: Int!, sample: [String!]): Gene

  """
  The "geneFamilies" query accepts:

    - "name", a list of names of the gene families to look up.
  """
  geneFamilies(name: [String!]): [GeneFamily!]

  """
  The "geneTypes" query accepts:

    - "name", a list of names of the gene functions to look up.
  """
  geneFunctions(name: [String!]): [GeneFunction!]

  """
  The "genes" query accepts:

    - "dataSet", a list of data set names related to samples that are related to the genes to look up.
    - "entrez", a list of entrez ids for the genes to look up.
    - "geneType", a list of gene types related to the genes to look up.
    - "maxRnaSeqExp", the maximum RNA Sequence Expression value related to the genes to look up.
    - "minRnaSeqExp", the minimum RNA Sequence Expression value related to the genes to look up.
    - "related", a list of tag names related to data sets to filter by.
    - "sample", a list of sample names associated with the gene (used to look up RNA sequence expressions).
    - "tag", a list of tag names related to samples that are related to the genes to look up.

  If no arguments are passed, this will return all genes.
  """
  genes(
    dataSet: [String!]
    entrez: [Int!]
    geneType: [String!]
    maxRnaSeqExpr: Float
    minRnaSeqExpr: Float
    related: [String!]
    sample: [String!]
    tag: [String!]
  ): [Gene!]!

  """
  The "genesByTag" query accepts:

    - "dataSet", a list of data set names to filter by.
    - "entrez", a list of gene entrez ids to filter by.
    - "feature", a list of feature names to filter by.
    - "featureClass", a list of feature class names associated with the features to filter by.
    - "geneType", a list of gene type names associated with the genes to filter by.
    - "maxRnaSeqExp", the maximum RNA Sequence Expression value related to the genes to look up.
    - "minRnaSeqExp", the minimum RNA Sequence Expression value related to the genes to look up.
    - "related", a list of tag names associated with the data sets to filter by.
    - "sample", a list of sample names associated with the gene (used to look up RNA sequence expressions).
    - "tag", a list of tag names associated with the related to filter by.

  If no arguments are passed, this will return all genes organized by tag.
  """
  genesByTag(
    dataSet: [String!]
    entrez: [Int!]
    feature: [String!]
    featureClass: [String!]
    geneType: [String!]
    maxRnaSeqExpr: Float
    minRnaSeqExpr: Float
    related: [String!]
    sample: [String!]
    tag: [String!]
  ): [GenesByTag!]!

  """
  The "geneTypes" query accepts:

    - "name", a list of names of the gene types to look up.
  """
  geneTypes(name: [String!]): [GeneType!]!

  """
  The "ImmuneCheckpoints" query accepts:

    - "name", a list of names of the immune checkpoints to look up.
  """
  immuneCheckpoints(name: [String!]): [ImmuneCheckpoint!]

  """
  The "methodTags" query accepts:

    - "name", a list of names of the method tags to look up.
  """
  methodTags(name: [String!]): [MethodTag!]!

  """
  The "mutations" query accepts:

    - "entrez", a list of gene entrez ids associated with the mutations to filter by.
    - "mutationCode", a list of mutation code names associated with the mutations to filter by.
    - "mutationId", a list of mutation ids associated to filter by.
    - "mutationType", a list of mutation type names associated with the mutations to filter by.
    - "sample", a list of sample names associated with the mutations to filter by.
    - "status", a list of statuses associated relationship between mutation and sample to filter by.

  If no arguments are passed, this will return all mutations.
  """
  mutations(
    entrez: [Int!]
    mutationCode: [String!]
    mutationId: [Int!]
    mutationType: [String!]
    sample: [String!]
    status: [StatusEnum!]
  ): [GeneMutation!]!

  """
  The "mutationsBySample" query accepts:

    - "entrez", a list of gene entrez associated with the mutation to filter by
    - "mutationCode", a list of mutation codes associated with the mutation to filter by
    - "mutationId", a list of mutation ids to filter by
    - "mutationType", a list of mutation types associated with the mutation to filter by
    - "sample", a list of sample names associated with the mutation to filter by
    - "status", a list of mutation statuses to filter the mutation and samples by
    - "page", the page of results to get. Defaults to 1 (the first page) with a maximum of 100,000 rows returned

  If no arguments are passed, this will return all samples that have related mutations (please note, there will be a LOT of results).
  """
  mutationsBySample(
    entrez: [Int!]
    mutationCode: [String!]
    mutationId: [Int!]
    mutationType: [String!]
    sample: [String!]
    status: [StatusEnum!]
    page: Int
  ): MutationsBySamplePage!

  """
  The "mutationTypes" query returns all mutation types.
  """
  mutationTypes: [MutationType!]!

  """
  The "nodes" query accepts:

    - "dataSet", a list of data set names associated with the nodes to filter by
    - "entrez", a list of gene entrez ids associated with the nodes to filter by.
    - "feature", a list of feature names associated with the nodes to filter by.
    - "maxScore", the maximum score associated with the nodes to filter by
    - "minScore", the minimum score associated with the nodes to filter by
    - "network", a list of tag names associated with the nodes that are also associated with the "network" tag to filter by
    - "related", a list of tag names related to the data set associated with the nodes to filter by
    - "tag", a list of tag names associated with the nodes to filter by
    - "page", the page of results to get. Defaults to 1 (the first page) with a maximum of 100,000 rows returned

  If no arguments are passed, this will return all nodes (please note, there will be a LOT of results).
  """
  nodes(
    dataSet: [String!]
    entrez: [Int!]
    feature: [String!]
    maxScore: Float
    minScore: Float
    network: [String!]
    related: [String!]
    tag: [String!]
    page: Int
  ): NodePage

  """
  The "patients" query accepts:

    - "barcode", a list of patient barcodes of the patients to look up.
    - "dataSet", a list of data set names associated with the samples related to the patient to filter by
    - "ethnicity", a list of patient ethnicities to filter the patients by
    - "gender", a list of patient genders to filter the patients by
    - "maxAgeAtDiagnosis", a number representing the maximum age of the patient at the time of diagnosis to filter the patients by
    - "maxHeight", a number representing the maximum patient height to filter the patients by
    - "maxHeight", a number representing the maximum patient weight to filter the patients by
    - "minAgeAtDiagnosis", a number representing the minimum age of the patient at the time of diagnosis to filter the patients by
    - "minHeight", a number representing the minimum patient height to filter the patients by
    - "minWeight", a number representing the minimum patient weight to filter the patients by
    - "race", a list of patient races to filter the patients by
    - "sample", a list of sample names to filter the patients by
    - "slide", a list of slide names to filter the patients by

  If no arguments are passed, this will return all patients.
  """
  patients(
    barcode: [String!]
    dataSet: [String!]
    ethnicity: [EthnicityEnum!]
    gender: [GenderEnum!]
    maxAgeAtDiagnosis: Int
    maxHeight: Float
    maxWeight: Float
    minAgeAtDiagnosis: Int
    minHeight: Float
    minWeight: Float
    race: [RaceEnum!]
    sample: [String!]
    slide: [String!]
  ): [Patient!]!

  """
  The "Pathways" query accepts:

    - "name", a list of names of the pathways to look up.
  """
  pathways(name: [String!]): [Pathway!]

  """
  The "related" query accepts:

    - "dataSet", a list of data set names
    - "related", a list of tag (related) names related to the data set(s)

  If no filters are passed, this will return all tags related to data sets.
  """
  related(dataSet: [String!], related: [String!]): [RelatedByDataSet!]!

  """
  The "samples" query accepts:

    - "ethnicity", a list of patient ethnicities to filter the samples by
    - "gender", a list of patient genders to filter the samples by
    - "maxAgeAtDiagnosis", a number representing the maximum age of the patient at the time of diagnosis to filter the samples by
    - "maxHeight", a number representing the maximum patient height to filter the samples by
    - "maxHeight", a number representing the maximum patient weight to filter the samples by
    - "minAgeAtDiagnosis", a number representing the minimum age of the patient at the time of diagnosis to filter the samples by
    - "minHeight", a number representing the minimum patient height to filter the samples by
    - "minWeight", a number representing the minimum patient weight to filter the samples by
    - "name", a list of sample names to filter the samples by
    - "patient", a list of patient barcodes to filter the samples by
    - "race", a list of patient races to filter the samples by

  If no filters are passed, this will return all samples.
  """
  samples(
    ethnicity: [EthnicityEnum!]
    gender: [GenderEnum!]
    maxAgeAtDiagnosis: Int
    maxHeight: Float
    maxWeight: Float
    minAgeAtDiagnosis: Int
    minHeight: Float
    minWeight: Float
    name: [String!]
    patient: [String!]
    race: [RaceEnum!]
  ): [Sample!]!

  """
  The data structure containing Samples by Mutation Status.

  If no filters are passed, this will return a list of all mutation statuses with lists of all related samples.
  """
  samplesByMutationStatus(
    "A list of data set names to filter the samples by."
    dataSet: [String!]
    "A list of patient ethnicities to filter the samples by."
    ethnicity: [EthnicityEnum!]
    "A list of feature names to filter the samples by."
    feature: [String!]
    "A list of feature class names related to the features associated with the samples to filter by."
    featureClass: [String!]
    "A list of patient genders to filter the samples by."
    gender: [GenderEnum!]
    "A number representing the maximum age of the patient at the time of diagnosis to filter the samples by."
    maxAgeAtDiagnosis: Int
    "A number representing the maximum patient height to filter the samples by."
    maxHeight: Float
    "A number representing the maximum patient weight to filter the samples by."
    maxWeight: Float
    "A number representing the minimum age of the patient at the time of diagnosis to filter the samples by."
    minAgeAtDiagnosis: Int
    "A number representing the minimum patient height to filter the samples by."
    minHeight: Float
    "A number representing the minimum patient weight to filter the samples by."
    minWeight: Float
    "A list of mutation ids."
    mutationId: [Int!]
    "A StatusEnum value to filter the samples by."
    mutationStatus: StatusEnum
    "A list of patient barcodes to filter the samples by."
    patient: [String!]
    "A list of patient races to filter the samples by."
    race: [RaceEnum!]
    "A list of tag names related to the data sets associated with the samples to filter by."
    related: [String!]
    "A list of sample names."
    sample: [String!]
    "A list of tag names associated with the samples to filter by."
    tag: [String!]
  ): [SampleByMutationStatus!]!

  """
  The "samplesByTag" query accepts:

    - "dataSet", a list of data set names
    - "ethnicity", a list of patient ethnicities to filter the samples by
    - "feature", a list of feature names
    - "featureClass", a list of feature class names
    - "gender", a list of patient genders to filter the samples by
    - "maxAgeAtDiagnosis", a number representing the maximum age of the patient at the time of diagnosis to filter the samples by
    - "maxHeight", a number representing the maximum patient height to filter the samples by
    - "maxHeight", a number representing the maximum patient weight to filter the samples by
    - "minAgeAtDiagnosis", a number representing the minimum age of the patient at the time of diagnosis to filter the samples by
    - "minHeight", a number representing the minimum patient height to filter the samples by
    - "minWeight", a number representing the minimum patient weight to filter the samples by
    - "patient", a list of patient barcodes
    - "race", a list of patient races to filter the samples by
    - "related", a list of tag names related to the data set(s)
    - "sample", a list of sample names
    - "tag", a list of tag names

  If no filters are passed, this will return all samples organized by tag.
  """
  samplesByTag(
    dataSet: [String!]
    ethnicity: [EthnicityEnum!]
    feature: [String!]
    featureClass: [String!]
    gender: [GenderEnum!]
    maxAgeAtDiagnosis: Int
    maxHeight: Float
    maxWeight: Float
    minAgeAtDiagnosis: Int
    minHeight: Float
    minWeight: Float
    name: [String!]
    patient: [String!]
    race: [RaceEnum!]
    related: [String!]
    tag: [String!]
  ): [SamplesByTag!]!

  """
  The "slides" query accepts:

    - "barcode", a list of patient barcodes to filter the slides by
    - "ethnicity", a list of patient ethnicities to filter the slides by
    - "gender", a list of patient genders to filter the slides by
    - "maxAgeAtDiagnosis", a number representing the maximum age of the patient at the time of diagnosis to filter the slides by
    - "maxHeight", a number representing the maximum patient height to filter the slides by
    - "maxHeight", a number representing the maximum patient weight to filter the slides by
    - "minAgeAtDiagnosis", a number representing the minimum age of the patient at the time of diagnosis to filter the slides by
    - "minHeight", a number representing the minimum patient height to filter the slides by
    - "minWeight", a number representing the minimum patient weight to filter the slides by
    - "name", a list of slide names to look up.
    - "race", a list of patient races to filter the slides by
    - "sample", a list of samples related to the slides to filter by

  If no arguments are passed, this will return all slides.
  """
  slides(
    barcode: [String!]
    ethnicity: [EthnicityEnum!]
    gender: [GenderEnum!]
    maxAgeAtDiagnosis: Int
    maxHeight: Float
    maxWeight: Float
    minAgeAtDiagnosis: Int
    minHeight: Float
    minWeight: Float
    name: [String!]
    race: [RaceEnum!]
    sample: [String!]
  ): [Slide!]!

  """
  The "superCategories" query accepts:

    - "name", a list of names of the super categories to look up.
  """
  superCategories(name: [String!]): [SuperCategory!]!

  """
  The "tags" query accepts:

    - "dataSet", a list of data set names
    - "related", a list of tag names related to the data set(s)
    - "tag", a list of tag names
    - "feature", a list of feature names
    - "featureClass", a list of feature class names
  """
  tags(
    dataSet: [String!]
    related: [String!]
    tag: [String!]
    feature: [String!]
    featureClass: [String!]
    sample: [String!]
  ): [Tag!]!

  """
  The "therapyTypes" query accepts:

    - "name", a list of names of the therapy types to look up.
  """
  therapyTypes(name: [String!]): [TherapyType!]!

  """
  A simple test query that is independent of the database.
  """
  test: TestPage!
}

type TestPage {
  items: TestFields!
  page: Int!
}

type TestFields {
  contentType: String!
  userAgent: String!
  headers: TestHeaders!
}

type TestHeaders {
  contentLength: Int!
  contentType: String!
  host: String!
  userAgent: String!
}
