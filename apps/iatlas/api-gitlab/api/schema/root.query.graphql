type Query {

      """
  The data structure containing cell stats

  If no arguments are passed, this will return all cell stats
  """
  cellStats(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A unique id for the result generated by the database. PLEASE NOTE: this ID should not be relied on, it may change as the database changes."
    id: ID
    "A list of entrez ids to look up"
    entrez: [Int!]
  ): CellStat!

    """
  The data structure containing Cohorts

  If no arguments are passed, this will return all cohorts
  """
  cohorts(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A unique id for the result generated by the database. PLEASE NOTE: this ID should not be relied on, it may change as the database changes."
    id: ID
    "A list of cohort names associated with the cohort to filter by."
    cohort: [String!]
    "A list of data set names associated with the cohort to filter by."
    dataSet: [String!]
    "A list of tag names associated with the cohort to filter by."
    tag: [String!]
  ): Cohort!
  """
  The data structure containing Colocalizations.

  If no arguments are passed, this will return all colocalization.
  """
  colocalizations(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A unique id for the result generated by the database. PLEASE NOTE: this ID should not be relied on, it may change as the database changes."
    id: ID
    "A list of data set names associated with the colocalization to filter by."
    dataSet: [String!]
    "A list of data set names whose genes were used to compute the colocalization."
    colocDataSet: [String!]
    "A list of feature names associated with the colocalization to filter by."
    feature: [String!]
    "A list of gene entrez ids associated with the colocalization to filter by."
    entrez: [Int!]
    "A list of snp names associated with the colocalization to filter by."
    snp: [String!]
    "The QTL type of the colocalization to filter by. (either 'sQTL' or 'eQTL')."
    qtlType: QTLTypeEnum
    "The eCaviar colocalization posterior probability locus model. (either 'C1' or 'C2')."
    eCaviarPP: ECaviarPPEnum
    "Type of colocalization plot. (either '3 Level Plot' or 'Expanded Region')."
    plotType: ColocPlotTypeEnum
  ): Colocalization!

  """
  The data structure containing Copy Number Results.

  If no arguments are passed, this will return all copy number results.
  """
  copyNumberResults(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A unique id for the result generated by the database. PLEASE NOTE: this ID should not be relied on, it may change as the database changes."
    id: ID
    "A list of data set names associated with the copy number results to filter by."
    dataSet: [String!]
    "A list of 'related' tag names associated with the data set that is associated with the results to filter by."
    related: [String!]
    "A list of feature names associated with the copy number results to filter by."
    feature: [String!]
    "A list of gene entrez ids associated with the copy number results to filter by."
    entrez: [Int!]
    "A list of tag names associated with the copy number results to filter by."
    tag: [String!]
    "The direction of the copy number results to filter by. (either 'Amp' or 'Del')"
    direction: DirectionEnum
    "A minimum P value to filter the copy number results by."
    minPValue: Float
    "A maximum P value to filter the copy number results by."
    maxPValue: Float
    "A minimum log10 calculation of the P value to filter the copy number results by."
    minLog10PValue: Float
    "A maximum log10 calculation of the P value to filter the copy number results by."
    maxLog10PValue: Float
    "A minimum mean normal to filter the copy number results by."
    minMeanNormal: Float
    "A minimum mean CNV to filter the copy number results by."
    minMeanCnv: Float
    "A minimum T stat to filter the copy number results by."
    minTStat: Float
  ): CopyNumberResult!

  """
  The data structure containing Data Sets.

  If no arguments are passed, this will return all data sets.
  """
  dataSets(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A unique id for the result generated by the database. PLEASE NOTE: this ID should not be relied on, it may change as the database changes."
    id: ID
    "A list of data set names to look up."
    dataSet: [String!]
    "A list of sample names associated with the data sets to filter by."
    sample: [String!]
    "A list of data set types to filter by."
    dataSetType: [String!]
  ): DataSet!

  """
  The "driverResults" query

  If no arguments are passed, this will return all driver results.
  """
  driverResults(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A unique id for the result generated by the database. PLEASE NOTE: this ID should not be relied on, it may change as the database changes."
    id: ID
    "A list of data set names associated with the driver results to filter by"
    dataSet: [String!]
    "A list of 'related' tag names associated with the data set that is associated with the results to filter by."
    entrez: [Int!]
    "A list of feature names associated with the driver results to filter by."
    feature: [String!]
    "A list of mutation names associated with the driver results to filter by."
    mutation: [String!]
    "A list of mutation code names associated with the mutation of with the driver results to filter by."
    mutationCode: [String!]
    "A list of tag names associated with the driver results to filter by."
    related: [String!]
    "A list of gene entrez ids associated with the gene of the mutation of the driver results to filter by."
    tag: [String!]
    "A list of mutation code names associated with the mutation of with the driver results to filter by."
    maxPValue: Float
    "A minimum P value to filter the driver results by."
    minPValue: Float
    "A maximum log10 calculation of the P value to filter the driver results by."
    maxLog10PValue: Float
    "A minimum log10 calculation of the P value to filter the driver results by."
    minLog10PValue: Float
    "A minimum fold change to filter the driver results by."
    minFoldChange: Float
    "A minimum log10 calculation of the fold change to filter the driver results by."
    minLog10FoldChange: Float
    "A minimum of wild type genes to filter the driver results by."
    minNumWildTypes: Int
    "A minimum mutant genes to filter the driver results by."
    minNumMutants: Int
  ): DriverResult!

  """
  The "edges" query

  If no arguments are passed, this will return all edges (please note, there will be a LOT of results).
  """
  edges(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "The maximum score value to return."
    maxScore: Float
    "The minimum score value to return."
    minScore: Float
    "A list of starting node names."
    node1: [String!]
    "A list of ending node names."
    node2: [String!]
  ): EdgeResult!

  """
  The "features" query

  If no arguments are passed, this will return all features.

  """
  features(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A unique id for the gene generated by the database. PLEASE NOTE: this ID should not be relied on, it may change as the database changes."
    id: ID
    "A list of feature names associated with the features to filter by."
    feature: [String!]
    "A list of feature class names associated with the features to filter by."
    featureClass: [String!]
    "A list of sample names associated with the feature to filter by."
    sample: [String!]
    "A list of sample names associated with the cellType feature to filter by."
    cellTypeSample: [String!]
    "A list of cohort names associated with the feature to filter by."
    cohort: [String!]
    "The maximum value (relationship between the feature and the sample) to filter by."
    maxValue: Float
    "The minimum value (relationship between the feature and the sample) to filter by."
    minValue: Float
  ): Feature!

  """
  The "genes" query

  If no arguments are passed, this will return all genes.
  """
  genes(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A unique id for the gene generated by the database. PLEASE NOTE: this ID should not be relied on, it may change as the database changes."
    id: ID
    "A list of data set names related to samples that are related to the genes to look up."
    entrez: [Int!]
    "A list of gene types related to the genes to look up."
    geneType: [String!]
    "A list of cohort names associated with the feature to filter by."
    cohort: [String!]
    "A list of tag names related to data sets to filter by."
    sample: [String!]
    "A list of sample names associated with the cellType feature to filter by."
    cellTypeSample: [String!]
    "The maximum RNA Sequence Expression value related to the genes to look up."
    maxRnaSeqExpr: Float
    "The minimum RNA Sequence Expression value related to the genes to look up."
    minRnaSeqExpr: Float

  ): Gene!

  """
  The "geneTypes" query
  """
  geneTypes(
    "A list of names of the gene types to look up."
    name: [String!]
  ): [GeneType!]!

    """
  The "germlineGwasResults" query

  If no arguments are passed, this will return all germline gwas results.
  """
  germlineGwasResults(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A list of data set names associated with the germline gwas results to filter by"
    dataSet: [String!]
    "A list of feature names associated with the germline gwas results to filter by."
    feature: [String!]
    "A list of snp names associated with the germline gwas results to filter by."
    snp: [String!]
    "A maximum P value to filter the germline gwas results by."
    maxPValue: Float
    "A minimum P value to filter the germline gwas results by."
    minPValue: Float
  ): GermlineGwasResult!


  """
  The "heritabilityResults" query

  If no arguments are passed, this will return all heritability results.
  """
  heritabilityResults(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A list of data set names associated with the heritability results to filter by"
    dataSet: [String!]
    "A list of feature names associated with the heritability results to filter by."
    feature: [String!]
    "A maximum P value to filter the heritability results by."
    maxPValue: Float
    "A minimum P value to filter the heritability results by."
    minPValue: Float
    "Immune traits clustered based on their Pearson correlation coefficients, described by Sayaman et al, 2021."
    cluster: [String!]
  ): HeritabilityResult!

  """
  The "mutations" type

  If no arguments are passed, this will return all mutations.
  """
  mutations(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A unique id for the gene generated by the database. PLEASE NOTE: this ID should not be relied on, it may change as the database changes."
    id: ID
    "A list of names associated with the mutations to filter by."
    mutation: [String!]
    "A list of gene entrez ids associated with the mutations to filter by."
    entrez: [Int!]
    "A list of mutation code names associated with the mutations to filter by."
    mutationCode: [String!]
    "A list of mutation type names associated with the mutations to filter by."
    mutationType: [String!]
    "A list of cohort names associated with the mutations to filter by."
    cohort: [String!]
    "A list of sample names associated with the mutations to filter by."
    sample: [String!]
    "A list of statuses associated relationship between mutation and sample to filter by."
    status: [StatusEnum!]
  ): Mutation!

  """
  The "mutationTypes" query returns all mutation types.
  """
  mutationTypes: [MutationType!]!

  """
  The "neoantigens" type

  If no arguments are passed, this will return all neoantigens.
  """
  neoantigens(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A unique id for the neoantigen. PLEASE NOTE: this ID should not be relied on, it may change as the database changes."
    id: ID
    "A list of phmhcs to filter by."
    pmhc: [String!]
    "A list of gene entrez ids associated with the neoantigens to filter by."
    entrez: [Int!]
    "A list of patient names associated with the neoantigens to filter by."
    patient: [String!]
  ): Neoantigen!

  """
  The "nodes" query

  If no arguments are passed, this will return all nodes (please note, there will be a LOT of results).
  """
  nodes(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A list of data set names associated with the nodes to filter by."
    dataSet: [String!]
    "A list of gene entrez ids associated with the nodes to filter by."
    entrez: [Int!]
    "A list of feature names associated with the nodes to filter by."
    feature: [String!]
    "A list of feature class names associated with features related to the nodes to filter by."
    featureClass: [String!]
    "A list of gene type names associated with genes related to the nodes to filter by."
    geneType: [String!]
    "The maximum score associated with the nodes to filter by."
    maxScore: Float
    "The minimum score associated with the nodes to filter by"
    minScore: Float
    "A list of tag names associated with the nodes that are also associated with the 'network' tag to filter by"
    network: [String!]
    "A list of tag names related to the data set associated with the nodes to filter by"
    related: [String!]
    "A list of tag names associated with the nodes to filter by"
    tag1: [String!]
    "A list of secondary tag names associated with the nodes to filter by"
    tag2: [String!]
    "The number of tags the node should have, either 1 or 2"
    nTags: Int
  ): NodeResult

  """
  The "patients" query

  If no arguments are passed, this will return all patients.
  """
  patients(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A unique id for the result generated by the database. PLEASE NOTE: this ID should not be relied on, it may change as the database changes."
    id: ID
    "A list of patient barcodes of the patients to look up."
    barcode: [String!]
    "A list of data set names associated with the samples related to the patient to filter by"
    dataSet: [String!]
    "A list of patient ethnicities to filter the patients by"
    ethnicity: [EthnicityEnum!]
    "A list of patient genders to filter the patients by"
    gender: [GenderEnum!]
    "A number representing the maximum age of the patient at the time of diagnosis to filter the patients by"
    maxAgeAtDiagnosis: Int
    "A number representing the maximum patient height to filter the patients by"
    maxHeight: Float
    "A number representing the maximum patient weight to filter the patients by"
    maxWeight: Float
    "A number representing the minimum age of the patient at the time of diagnosis to filter the patients by"
    minAgeAtDiagnosis: Int
    "A number representing the minimum patient height to filter the patients by"
    minHeight: Float
    "A number representing the minimum patient weight to filter the patients by"
    minWeight: Float
    "A list of patient races to filter the patients by"
    race: [RaceEnum!]
    "A list of sample names to filter the patients by"
    sample: [String!]
    "A list of slide names to filter the patients by"
    slide: [String!]
  ): Patient!

  """
  The "rareVariantPathwayAssociation" query

  If no arguments are passed, this will return all rare variant pathway associations.
  """
  rareVariantPathwayAssociations(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A unique id for the rare variant pathway association generated by the database. PLEASE NOTE: this ID should not be relied on, it may change as the database changes."
    id: ID
    "A list of data set names associated with the rare variant pathway associations to filter by"
    dataSet: [String!]
    "A list of feature names associated with the rare variant pathway associations to filter by."
    feature: [String!]
    "A list of pathways associated with the rare variant pathway associations to filter by."
    pathway: [String!]
    "A maximum P value to filter the rare variant pathway associations by."
    maxPValue: Float
    "A minimum P value to filter the rare variant pathway associations by."
    minPValue: Float
  ): RareVariantPathwayAssociation!

  """
  The "samples" query

  If no filters are passed, this will return all samples.
  """
  samples(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A unique id for the result generated by the database. PLEASE NOTE: this ID should not be relied on, it may change as the database changes."
    id: ID
    "A list of patient ethnicities to filter the samples by"
    ethnicity: [EthnicityEnum!]
    "A list of patient genders to filter the samples by"
    gender: [GenderEnum!]
    "A number representing the maximum age of the patient at the time of diagnosis to filter the samples by"
    maxAgeAtDiagnosis: Int
    "A number representing the maximum patient height to filter the samples by"
    maxHeight: Float
    "A number representing the maximum patient weight to filter the samples by"
    maxWeight: Float
    "A number representing the minimum age of the patient at the time of diagnosis to filter the samples by"
    minAgeAtDiagnosis: Int
    "A number representing the minimum patient height to filter the samples by"
    minHeight: Float
    "A number representing the minimum patient weight to filter the samples by"
    minWeight: Float
    "A list of sample names to filter the samples by"
    name: [String!]
    "A list of patient barcodes to filter the samples by"
    patient: [String!]
    "A list of patient races to filter the samples by"
    race: [RaceEnum!]
  ): Sample!


  """
  The "slides" query

  If no arguments are passed, this will return all slides.
  """
  slides(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A unique id for the result generated by the database. PLEASE NOTE: this ID should not be relied on, it may change as the database changes."
    id: ID
    "A list of patient barcodes to filter the slides by."
    barcode: [String!]
    "A list of patient ethnicities to filter the slides by."
    ethnicity: [EthnicityEnum!]
    "A list of patient genders to filter the slides by."
    gender: [GenderEnum!]
    "A number representing the maximum age of the patient at the time of diagnosis to filter the slides by."
    maxAgeAtDiagnosis: Int
    "A number representing the maximum patient height to filter the slides by."
    maxHeight: Float
    "A number representing the maximum patient weight to filter the slides by."
    maxWeight: Float
    "A number representing the minimum age of the patient at the time of diagnosis to filter the slides by."
    minAgeAtDiagnosis: Int
    "A number representing the minimum patient height to filter the slides by."
    minHeight: Float
    "A number representing the minimum patient weight to filter the slides by."
    minWeight: Float
    "A list of slide names to look up."
    name: [String!]
    "A list of patient races to filter the slides by."
    race: [RaceEnum!]
    "A list of samples related to the slides to filter by."
    sample: [String!]
  ): Slide!

    """
  The "snps" query

  If no arguments are passed, this will return all snps.
  """
  snps(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A list of snp names to filter by."
    name: [String!]
    "A list of snp rsids to filter by."
    rsid: [String!]
    "A list of chromosomes to filter by."
    chr: [String!]
    "A maximum basepair value to filter snps by."
    maxBP: Int
    "A minimum basepair value to filter snps by."
    minBP: Int
  ): Snp!

  """
  The "tags" query
  """
  tags(
    "An instance of PagingInput (see PagingInput)"
    paging: PagingInput
    "A boolean specifying whether or not duplicates should be filtered out. Default is false. Set to 'true' only when necessary, as it negatively impacts performance."
    distinct: Boolean
    "A list of data set names."
    dataSet: [String!]
    "A list of tag names related to the data set(s)."
    related: [String!]
    "A list of tag names."
    tag: [String!]
    "A list of sample names."
    sample: [String!]
    "A list of cohort names"
    cohort: [String!]
    "A list of tag types: 'group' or 'parent_group' or 'meta_group' or 'network'"
    type: [TagTypeEnum!]
  ): Tag!

  """
  A simple test query that is independent of the database.
  """
  test: TestPage!
}

type TestPage {
  items: TestFields!
  page: Int!
}

type TestFields {
  contentType: String!
  userAgent: String!
  headers: TestHeaders!
}

type TestHeaders {
  contentLength: Int!
  contentType: String!
  host: String!
  userAgent: String!
}
