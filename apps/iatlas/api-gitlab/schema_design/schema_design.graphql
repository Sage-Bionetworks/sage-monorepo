# General structures:
type Feature {
    class: String
    display: String
    methodTag: String
    name: String!
    order: Int
    sample: String
    unit: String
    value: FeatureValue
}

type FeatureByClass {
    class: String!
    features: [Feature!]!
}

type FeatureByTag {
    characteristics: String
    display: String
    features: [Feature!]!
    tag: String!
}

type Gene {
    id: Int!
    entrez: Int!
    hgnc: String!
    description: String
    friendlyName: String
    ioLandscapeName: String
    geneFamily: String
    geneFunction: String
    immuneCheckpoint: String
    pathway: String
    superCategory: String
    therapyType: String
}

type Sample {
    features: [Feature!]
    genes: [Gene!]
    name: String!
    patient: String!
    tags: [SimpleTag!]
}

type Tag {
    characteristics: String
    color: String
    display: String
    name: String!
    sampleCount: Int!
    sampleIds: [Int!]
}

type SimpleTag {
    characteristics: String
    color: String
    display: String
    name: String!
}

# Make many small queries as the filtering as done in steps.

# Get features by class - pass min and max value and a feature name, Get only samples that fit.

# Get driver mutation by mutation type - done

# Choose a mutation and get all the samples related to that mutation - done

query Nodes($dataSet: [String!], $related: [String!], $network: [String!]) {
    nodes(dataSet: $dataSet, related: $related, network: $network): [Node!]!
}

type Node {
    label: String
    name: String!
    score: Float
    x: Float
    y: Float
    dataSet: SimpleDataSet!
    gene: SimpleGene
    feature: SimpleFeature
    tags: [SimpleTag] # ie C1 or BRCA. No tags that are tagged to the "network" tag.
}


samplesByMutationStatus(mutationsId: Int!, sample: [String!]): [MutationStatus!]!
type SampleByMutationStatus {
    samples: [String!]
    status: StatusEnum! # Mut or Wt
}

# entrez and mutation code plus list of sample names






# Get a list of all data sets for a dropdown
query dataSets {
    display
}

# Get all tags associated with a data set
query groups(dataSet: [String!]) {
    characteristics: String
    display: String
    features: [Feature!]!
    name: String!
}

query CohortSelecter {
    # Accepts these args:
    #   dataSet: an array of strings (ie TCGA or PCAWG from tags)
    #   related: an array of strings (ie Immune_Subtype related to data set from tags)
    #   feature: an array of strings (from sample_to_feature related to data set and group)
    # Returns an array of Tags with these properties:
    #   name: a tag from the tags table that is related to the passed args. (used for sampleGroup)
    #   display: The display name for the tag. (used for groupName)
    #   sampleCount: The number of samples associated with this tag. (used for groupSize)
    #   characteristics: The characteristics of this tag.
    #   color: The color associated with this tag.
    tags(dataSet: [String!]!, related: [String!]!, feature: [String!]): [Tag]!
}

ImmuneFeatureTrends:
query ImmuneFeatureDistributions {
    # See cohort selection get samples_to_feature get classes for "Select or search for variable" dropdown
    # dataSet: an array of strings (ie TCGA or PCAWG from tags)
    # group: an array of strings (ie Immune_Subtype related to data set from tags)
    # feature: an array of strings (from sample_to_feature related to data set and group)
    # name: the "name" value from the classes table.
    featuresByClass(dataSet: [String!], related: [String!], feature: [String!]): [FeatureByClass]!

    # returns values for features related to samples in the datasaet for that class separated in groups
    featuresByTag(dataSet: [String!]!, related: [String!]!, feature: [String!], class: [String!]): [FeatureByTag]!
}

For Till Maps:
query TillMaps {
    # For "Select or search for variable" dropdown get features fro passed class

    getSamples(dataSet: [string (ie TCGA or PCAWG)], featureClass: []) {
        dataSet {
            samples {
                name string!
                slide {
                    name string!
                }
                group (tag) {
                    display
                }
                from features_to_samples
                sample id
                features {
                    display
                    values
                }
            }
        }
    }
}

ImmuneFeatureCorrelations:
query ImmuneFeatureDistributions {
    # see cohort selection get sanples_to_feature get classes for "Select or search for variable" dropdown
    featuresByClass(dataSet: [String!], related: [String!], feature: [String!]): [FeatureByClass]!

    # see cohort selection get samples_to_feature get classes for "Select or search for response variable" dropdown
    featuresByClass(dataSet: [String!], related: [String!], feature: [String!]): [FeatureByClass]!

    For visualization:
    # returns values for features related to samples in the data set for that class separated in groups
    featuresByTag(dataSet: [String!]!, related: [String!]!, feature: [String!], class: [String!]): [FeatureByTag]!
}


For Cell Type Factions:
query TumorMicroenvironmentCellTypeFactions {
    # For cell faction type dropdown - Populated by hand (6 classes)

    # For visualization:
    # returns values for features related to samples in the data set for that class separated in groups
    featuresByTag(dataSet: [String!]!, related: [String!]!, feature: [String!], class: [String!]): [FeatureByTag]!
}

For Sample Group Survival
query ClinicalOutcomes {
    # For survival endpoint dropdown two features hand coded

    # For visualization:
    # returns values for features related to samples in the data set for that class separated in groups
    featuresByTag(dataSet: [String!]!, related: [String!]!, feature: [String!], class: [String!]): [FeatureByTag]!
}

For Concordance Index
query ConcordanceIndex {
    # For survival endpoint dropdown two features hand coded
    # For Search for variables class dropdown load all classes related to features related to samples related to data set
    featuresByClass(dataSet: [String!], related: [String!], feature: [String!]): [FeatureByClass]!

    # For visualization:
    # returns values for features related to samples in the data set for that class separated in groups
    featuresByTag(dataSet: [String!]!, related: [String!]!, feature: [String!], class: [String!]): [FeatureByTag]!
}

For Immunomodulator Distributions
query Immunomodulators {
    # For Group dropdown hand coded "Gene Family", "Super Category", "Immune Checkpoint"
    # For Search genes dropdown load all genes that have something in the Group dropdown (in Immunomodulator gene type and related to samples related to data set)

    # For visualization:
    getGenes(dataSet: [], type: [immunomodulator], group: []) {
        group {
            display
            characteristics
            genes {
                entrez
                hgnc
                friendlyName
                geneFamily
                superCategory
                immuneCheckpoint
                function
                references
                rna_seq_expr (from genes_to_samples)
            }
        }
    }
}

For IO Target Distributions
query ioTargets {

    # Like tags but with rna expr instead of samples.

    # For Group dropdown hand coded "Pathway", "Therapy Type"
    # For Search genes dropdown load all genes that have something in the Group dropdown (in io_targets gene type and related to samples related to data set)

    # For visualization:
    # Accepts these args:
    #   dataSet: an array of strings (ie TCGA or PCAWG from tags)
    #   related: an array of strings (ie Immune_Subtype related to data set from tags)
    #   type: an array of strings (gene types from genes_to_types)
    #   entrez: an array of integers
    getGenesByTag(dataSet: [String!]!, type: [String!], related: [String!], entrez: [String!]) {
        group {
            display
            characteristics
            genes {
                entrez
                hgnc
                description
                friendlyName
                ioLandscapeName
                geneFamily
                geneFunction
                geneTypes [{
                    name
                    display
                }]
                immuneCheckpoint
                pathway
                publication {
                    pubmed_id
                    journal
                    firstAuthorLastName
                    year
                    title
                }
                rnaSeqExpr (from genes_to_samples)
                superCategory
                therapyType
            }
        }
    }
}

# For Driver Associations:
query SingleVariable {
    # (Driver Results Table)
    # For Search for Response Variable Dropdown All features grouped by class - features from Driver results
    getDriverResults(feature: [String!]) {
        gene {
            hgnc
        }
        mutationCode
        tag {
            name
        }
        feature (Simple feature type)
        pValue
        foldChange
        log10pValue
        log10foldChange
    }
}



getFeature(groups: [], feature: [featureClass, feature])
    # returns values for features related to samples in the datasaet for that class separated in groups
    feature {
        value
        sampleName
    }
}







query sampleIds {
    getSamples(dataSet: [string (ie TCGA or PCAWG)], ) {
        dataSet {
            name string!
            characteristics string?
            color string?
            display string!
            sample {
                id numeric!
                name string!
                gender string?
                height string? (change to numeric)
                weight string? (change to numeric)
                maxAgeAtDiagnosis string? (change to numeric)
                ethnicity string?
                race string?
                patient {
                    id numeric!
                    barcode string!
                    gender string?
                    height string? (change to numeric)
                    weight string? (change to numeric)
                    ageAtDiagnosis string? (change to numeric)
                    ethnicity string?
                    race string?
                }
                slide {
                    id numeric!
                    name string!
                    description string?
                }
            }
        }
    }
}

mutationsBySamples {
    name
    mutations [{
        gene {
            entrez
            hgnc
        }
        mutationCode {
            code
        }
        mutationType {
            name
            display
        }
        status
    }]
}