buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
  id 'com.diffplug.spotless' version "${spotlessVersion}"
  id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
  id 'java'
  id 'jvm-test-suite'
  id 'org.springframework.boot' version "${springBootVersion}"
  id 'jacoco'
  id "org.sonarqube" version "${sonarqubeVersion}"
}

repositories {
  mavenCentral()
  mavenLocal()
}

testing {
  suites {
    test {
      useJUnitJupiter()
    }

    integrationTest(JvmTestSuite) {
      sources {
        java {
          srcDirs = ['src/integrationTest/java']
        }
      }
      targets {
        all {
          testTask.configure {
            shouldRunAfter(test)
          }
        }
      }
    }
  }
}

dependencies {
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  compileOnly "org.projectlombok:lombok:${lombokVersion}"
  implementation 'com.google.code.findbugs:jsr305:3.0.2'
  implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
  implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'
  implementation "com.fasterxml.jackson.core:jackson-databind:${fasterxmlVersion}"
  implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${fasterxmlVersion}"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${fasterxmlVersion}"
  implementation "org.sagebionetworks:util:${openchallengesVersion}"
  implementation "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
  implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
  implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
  implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
  implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:${springCloudVersion}"
  implementation "org.springframework.data:spring-data-commons:${springDataVersion}"
  testImplementation 'org.assertj:assertj-core:3.23.1'
  testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"

  // Enable distributed tracing
  implementation "org.springframework.cloud:spring-cloud-starter-sleuth:${springCloudVersion}"
  implementation "org.springframework.cloud:spring-cloud-sleuth-zipkin:${springCloudVersion}"

  implementation "org.springframework.cloud:spring-cloud-starter-config:${springCloudVersion}"
  implementation "org.sagebionetworks.openchallenges:openchallenges-app-config-data:${openchallengesVersion}"

  implementation 'io.micrometer:micrometer-registry-prometheus:1.10.4'
  implementation 'com.squareup:pollexor:3.0.0'
}

group = 'org.sagebionetworks.openchallenges'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

bootBuildImage {
  imageName = "ghcr.io/sage-bionetworks/${project.name}-base:local"
}

test {
	useJUnitPlatform()

  testLogging.showStandardStreams = true

  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }

  failFast = true

  testLogging {
    events("passed", "skipped", "failed")
  }

  finalizedBy jacocoTestReport
}

spotless {
  // format 'misc', {
  //   target '*.gradle', '*.md', '.gitignore'

  //   trimTrailingWhitespace()
  //   indentWithSpaces(2)
  //   endWithNewline()
  // }

  java {
    target 'src/*/java/**/*.java'

    importOrder()
    removeUnusedImports()
    googleJavaFormat()
  }
}

jacocoTestReport {
  reports {
    xml.required = true
  }

  afterEvaluate {
    // A single star (*) selects files AND subdirectories.
    // Exclude Java classes from the JaCoCo report. These files must be excluded from SonarCloud
    // report separatedly (see SonarCloud config)
    def autoGeneratedFiles = [
      '**/api/*.*',
      '**/configuration/EnumConverterConfiguration*.*',
      '**/configuration/HomeController*.*',
      '**/configuration/SpringDocConfiguration*.*',
      '**/model/dto/**',
      '**/RFC3339DateFormat.*'
    ]
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: autoGeneratedFiles
        )
    }))
  }
}

sonar {
  // A single star (*) only selects files, not subdirectories.
  def autoGeneratedFiles = [
    '**/api/*',
    '**/configuration/EnumConverterConfiguration*.*',
    '**/configuration/HomeController*.*',
    '**/configuration/SpringDocConfiguration*.*',
    '**/model/dto/**',
    '**/RFC3339DateFormat.*'
  ]
  properties {
    property("sonar.projectKey", "${project.name}")
    property("sonar.organization", "sage-bionetworks")
    property("sonar.host.url", "https://sonarcloud.io")
    property("sonar.coverage.exclusions", autoGeneratedFiles.join(","))
    // Include the pull request number (ignored if not set)
    property("sonar.pullrequest.key", System.getenv('SONAR_PULL_REQUEST_NUMBER'))
  }
}