/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.openchallenges.image.service.api;

import org.sagebionetworks.openchallenges.image.service.model.dto.BasicErrorDto;
import org.sagebionetworks.openchallenges.image.service.model.dto.ImageDto;
import org.sagebionetworks.openchallenges.image.service.model.dto.ImageQueryDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Image", description = "Operations about images")
public interface ImageApi {

    default ImageApiDelegate getDelegate() {
        return new ImageApiDelegate() {};
    }

    /**
     * GET /images : Get an image
     * Returns the image specified.
     *
     * @param imageQuery The query used to get an image. (optional)
     * @return An image (status code 200)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "getImage",
        summary = "Get an image",
        description = "Returns the image specified.",
        tags = { "Image" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An image", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ImageDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ImageDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/images",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<ImageDto> getImage(
        @Parameter(name = "imageQuery", description = "The query used to get an image.", in = ParameterIn.QUERY) @Valid @Nullable ImageQueryDto imageQuery
    ) {
        return getDelegate().getImage(imageQuery);
    }

}
