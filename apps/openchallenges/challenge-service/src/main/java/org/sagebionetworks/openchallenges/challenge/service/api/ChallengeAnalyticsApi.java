/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.openchallenges.challenge.service.api;

import org.sagebionetworks.openchallenges.challenge.service.model.dto.BasicErrorDto;
import org.sagebionetworks.openchallenges.challenge.service.model.dto.ChallengesPerYearDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Challenge Analytics", description = "Operations about challenge analytics.")
public interface ChallengeAnalyticsApi {

    default ChallengeAnalyticsApiDelegate getDelegate() {
        return new ChallengeAnalyticsApiDelegate() {};
    }

    /**
     * GET /challenge-analytics/challenges-per-year : Get the number of challenges tracked per year
     * Returns the number of challenges tracked per year
     *
     * @return An object (status code 200)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "getChallengesPerYear",
        summary = "Get the number of challenges tracked per year",
        description = "Returns the number of challenges tracked per year",
        tags = { "Challenge Analytics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChallengesPerYearDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ChallengesPerYearDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer", scopes={ "read:challenges-analytics" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/challenge-analytics/challenges-per-year",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<ChallengesPerYearDto> getChallengesPerYear(
        
    ) {
        return getDelegate().getChallengesPerYear();
    }

}
