/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.openchallenges.challenge.service.api;

import org.sagebionetworks.openchallenges.challenge.service.model.dto.BasicErrorDto;
import org.sagebionetworks.openchallenges.challenge.service.model.dto.ChallengePlatformDto;
import org.sagebionetworks.openchallenges.challenge.service.model.dto.ChallengePlatformSearchQueryDto;
import org.sagebionetworks.openchallenges.challenge.service.model.dto.ChallengePlatformsPageDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "ChallengePlatform", description = "Operations about challenge platforms.")
public interface ChallengePlatformApi {

    default ChallengePlatformApiDelegate getDelegate() {
        return new ChallengePlatformApiDelegate() {};
    }

    /**
     * DELETE /challengePlatforms/{challengePlatformId} : Delete a challenge platform
     * Deletes a challenge platform by its unique ID. This action is irreversible. 
     *
     * @param challengePlatformId The unique identifier of the challenge platform. (required)
     * @return Deletion successful (status code 204)
     *         or Unauthorized (status code 401)
     *         or The user does not have the permission to perform this action (status code 403)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "deleteChallengePlatform",
        summary = "Delete a challenge platform",
        description = "Deletes a challenge platform by its unique ID. This action is irreversible. ",
        tags = { "ChallengePlatform" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deletion successful"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user does not have the permission to perform this action", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/challengePlatforms/{challengePlatformId}",
        produces = { "application/problem+json" }
    )
    
    default ResponseEntity<Void> deleteChallengePlatform(
        @Parameter(name = "challengePlatformId", description = "The unique identifier of the challenge platform.", required = true, in = ParameterIn.PATH) @PathVariable("challengePlatformId") Long challengePlatformId
    ) {
        return getDelegate().deleteChallengePlatform(challengePlatformId);
    }


    /**
     * GET /challengePlatforms/{challengePlatformId} : Get a challenge platform
     * Returns the challenge platform identified by its unique ID
     *
     * @param challengePlatformId The unique identifier of the challenge platform. (required)
     * @return Success (status code 200)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "getChallengePlatform",
        summary = "Get a challenge platform",
        description = "Returns the challenge platform identified by its unique ID",
        tags = { "ChallengePlatform" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChallengePlatformDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ChallengePlatformDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/challengePlatforms/{challengePlatformId}",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<ChallengePlatformDto> getChallengePlatform(
        @Parameter(name = "challengePlatformId", description = "The unique identifier of the challenge platform.", required = true, in = ParameterIn.PATH) @PathVariable("challengePlatformId") Long challengePlatformId
    ) {
        return getDelegate().getChallengePlatform(challengePlatformId);
    }


    /**
     * GET /challengePlatforms : List challenge platforms
     * List challenge platforms
     *
     * @param challengePlatformSearchQuery The search query used to find challenge platforms. (optional)
     * @return Success (status code 200)
     *         or Invalid request (status code 400)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "listChallengePlatforms",
        summary = "List challenge platforms",
        description = "List challenge platforms",
        tags = { "ChallengePlatform" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChallengePlatformsPageDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ChallengePlatformsPageDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/challengePlatforms",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<ChallengePlatformsPageDto> listChallengePlatforms(
        @Parameter(name = "challengePlatformSearchQuery", description = "The search query used to find challenge platforms.", in = ParameterIn.QUERY) @Valid ChallengePlatformSearchQueryDto challengePlatformSearchQuery
    ) {
        return getDelegate().listChallengePlatforms(challengePlatformSearchQuery);
    }

}
