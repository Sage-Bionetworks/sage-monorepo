/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.openchallenges.challenge.service.api;

import org.sagebionetworks.openchallenges.challenge.service.model.dto.BasicErrorDto;
import org.sagebionetworks.openchallenges.challenge.service.model.dto.ChallengeContributionCreateRequestDto;
import org.sagebionetworks.openchallenges.challenge.service.model.dto.ChallengeContributionCreateResponseDto;
import org.sagebionetworks.openchallenges.challenge.service.model.dto.ChallengeContributionDto;
import org.sagebionetworks.openchallenges.challenge.service.model.dto.ChallengeContributionUpdateRequestDto;
import org.sagebionetworks.openchallenges.challenge.service.model.dto.ChallengeContributionsPageDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "ChallengeContribution", description = "Operations about challenge contributions.")
public interface ChallengeContributionApi {

    default ChallengeContributionApiDelegate getDelegate() {
        return new ChallengeContributionApiDelegate() {};
    }

    /**
     * POST /challenges/{challengeId}/contributions : Create a new contribution for a challenge
     * Creates a new contribution record associated with a challenge ID. 
     *
     * @param challengeId The unique identifier of the challenge. (required)
     * @param challengeContributionCreateRequestDto  (required)
     * @return Contribution created successfully (status code 201)
     *         or Unauthorized (status code 401)
     *         or The user does not have the permission to perform this action (status code 403)
     *         or The specified resource was not found (status code 404)
     *         or The request conflicts with current state of the target resource (status code 409)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "addChallengeContribution",
        summary = "Create a new contribution for a challenge",
        description = "Creates a new contribution record associated with a challenge ID. ",
        tags = { "ChallengeContribution" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Contribution created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChallengeContributionCreateResponseDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ChallengeContributionCreateResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user does not have the permission to perform this action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "The request conflicts with current state of the target resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/challenges/{challengeId}/contributions",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ChallengeContributionCreateResponseDto> addChallengeContribution(
        @Parameter(name = "challengeId", description = "The unique identifier of the challenge.", required = true, in = ParameterIn.PATH) @PathVariable("challengeId") Long challengeId,
        @Parameter(name = "ChallengeContributionCreateRequestDto", description = "", required = true) @Valid @RequestBody ChallengeContributionCreateRequestDto challengeContributionCreateRequestDto
    ) {
        return getDelegate().addChallengeContribution(challengeId, challengeContributionCreateRequestDto);
    }


    /**
     * DELETE /challenges/{challengeId}/contributions : Delete all contributions for a specific challenge
     * Deletes all associated contributions for a given challenge, identified by its ID. This action is irreversible. 
     *
     * @param challengeId The unique identifier of the challenge. (required)
     * @return Deletion successful (status code 204)
     *         or Unauthorized (status code 401)
     *         or The user does not have the permission to perform this action (status code 403)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "deleteAllChallengeContributions",
        summary = "Delete all contributions for a specific challenge",
        description = "Deletes all associated contributions for a given challenge, identified by its ID. This action is irreversible. ",
        tags = { "ChallengeContribution" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deletion successful"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user does not have the permission to perform this action", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/challenges/{challengeId}/contributions",
        produces = { "application/problem+json" }
    )
    
    default ResponseEntity<Void> deleteAllChallengeContributions(
        @Parameter(name = "challengeId", description = "The unique identifier of the challenge.", required = true, in = ParameterIn.PATH) @PathVariable("challengeId") Long challengeId
    ) {
        return getDelegate().deleteAllChallengeContributions(challengeId);
    }


    /**
     * GET /challenges/{challengeId}/contributions : List challenge contributions
     * List challenge contributions
     *
     * @param challengeId The unique identifier of the challenge. (required)
     * @return Success (status code 200)
     *         or Invalid request (status code 400)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "listChallengeContributions",
        summary = "List challenge contributions",
        description = "List challenge contributions",
        tags = { "ChallengeContribution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChallengeContributionsPageDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ChallengeContributionsPageDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/challenges/{challengeId}/contributions",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<ChallengeContributionsPageDto> listChallengeContributions(
        @Parameter(name = "challengeId", description = "The unique identifier of the challenge.", required = true, in = ParameterIn.PATH) @PathVariable("challengeId") Long challengeId
    ) {
        return getDelegate().listChallengeContributions(challengeId);
    }


    /**
     * PUT /challenges/{challengeId}/contributions/{challengeContributionId} : Update an existing challenge contribution
     * Updates an existing contribution record for a challenge. Only the organization ID and role can be modified. 
     *
     * @param challengeId The unique identifier of the challenge. (required)
     * @param challengeContributionId The unique identifier of a challenge contribution (required)
     * @param challengeContributionUpdateRequestDto  (required)
     * @return Contribution updated successfully (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The user does not have the permission to perform this action (status code 403)
     *         or The specified resource was not found (status code 404)
     *         or The request conflicts with current state of the target resource (status code 409)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "updateChallengeContribution",
        summary = "Update an existing challenge contribution",
        description = "Updates an existing contribution record for a challenge. Only the organization ID and role can be modified. ",
        tags = { "ChallengeContribution" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Contribution updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChallengeContributionDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ChallengeContributionDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user does not have the permission to perform this action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "The request conflicts with current state of the target resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/challenges/{challengeId}/contributions/{challengeContributionId}",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ChallengeContributionDto> updateChallengeContribution(
        @Parameter(name = "challengeId", description = "The unique identifier of the challenge.", required = true, in = ParameterIn.PATH) @PathVariable("challengeId") Long challengeId,
        @Parameter(name = "challengeContributionId", description = "The unique identifier of a challenge contribution", required = true, in = ParameterIn.PATH) @PathVariable("challengeContributionId") Long challengeContributionId,
        @Parameter(name = "ChallengeContributionUpdateRequestDto", description = "", required = true) @Valid @RequestBody ChallengeContributionUpdateRequestDto challengeContributionUpdateRequestDto
    ) {
        return getDelegate().updateChallengeContribution(challengeId, challengeContributionId, challengeContributionUpdateRequestDto);
    }

}
