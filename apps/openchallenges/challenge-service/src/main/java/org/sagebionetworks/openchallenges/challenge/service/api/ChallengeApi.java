/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package org.sagebionetworks.openchallenges.challenge.service.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import org.sagebionetworks.openchallenges.challenge.service.model.dto.BasicErrorDto;
import org.sagebionetworks.openchallenges.challenge.service.model.dto.ChallengeDto;
import org.sagebionetworks.openchallenges.challenge.service.model.dto.ChallengeJsonLdDto;
import org.sagebionetworks.openchallenges.challenge.service.model.dto.ChallengeSearchQueryDto;
import org.sagebionetworks.openchallenges.challenge.service.model.dto.ChallengesPageDto;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Challenge", description = "Operations about challenges.")
public interface ChallengeApi {

  default ChallengeApiDelegate getDelegate() {
    return new ChallengeApiDelegate() {};
  }

  /**
   * GET /challenges/{challengeId} : Get a challenge Returns the challenge specified
   *
   * @param challengeId The unique identifier of the challenge. (required)
   * @return A challenge (status code 200) or The specified resource was not found (status code 404)
   *     or The request cannot be fulfilled due to an unexpected server error (status code 500)
   */
  @Operation(
      operationId = "getChallenge",
      summary = "Get a challenge",
      tags = {"Challenge"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "A challenge",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = ChallengeDto.class)),
              @Content(
                  mediaType = "application/ld+json",
                  schema = @Schema(implementation = ChallengeJsonLdDto.class)),
              @Content(
                  mediaType = "application/problem+json",
                  schema = @Schema(implementation = ChallengeDto.class))
            }),
        @ApiResponse(
            responseCode = "404",
            description = "The specified resource was not found",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = BasicErrorDto.class)),
              @Content(
                  mediaType = "application/ld+json",
                  schema = @Schema(implementation = BasicErrorDto.class)),
              @Content(
                  mediaType = "application/problem+json",
                  schema = @Schema(implementation = BasicErrorDto.class))
            }),
        @ApiResponse(
            responseCode = "500",
            description = "The request cannot be fulfilled due to an unexpected server error",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = BasicErrorDto.class)),
              @Content(
                  mediaType = "application/ld+json",
                  schema = @Schema(implementation = BasicErrorDto.class)),
              @Content(
                  mediaType = "application/problem+json",
                  schema = @Schema(implementation = BasicErrorDto.class))
            })
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/challenges/{challengeId}",
      produces = {"application/json", "application/ld+json", "application/problem+json"})
  default ResponseEntity<ChallengeDto> getChallenge(
      @Parameter(
              name = "challengeId",
              description = "The unique identifier of the challenge.",
              required = true)
          @PathVariable("challengeId")
          Long challengeId) {
    return getDelegate().getChallenge(challengeId);
  }

  /**
   * GET /challenges : List challenges List challenges
   *
   * @param challengeSearchQuery The search query used to find challenges. (optional)
   * @return Success (status code 200) or Invalid request (status code 400) or The request cannot be
   *     fulfilled due to an unexpected server error (status code 500)
   */
  @Operation(
      operationId = "listChallenges",
      summary = "List challenges",
      tags = {"Challenge"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Success",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = ChallengesPageDto.class)),
              @Content(
                  mediaType = "application/problem+json",
                  schema = @Schema(implementation = ChallengesPageDto.class))
            }),
        @ApiResponse(
            responseCode = "400",
            description = "Invalid request",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = BasicErrorDto.class)),
              @Content(
                  mediaType = "application/problem+json",
                  schema = @Schema(implementation = BasicErrorDto.class))
            }),
        @ApiResponse(
            responseCode = "500",
            description = "The request cannot be fulfilled due to an unexpected server error",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = BasicErrorDto.class)),
              @Content(
                  mediaType = "application/problem+json",
                  schema = @Schema(implementation = BasicErrorDto.class))
            })
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/challenges",
      produces = {"application/json", "application/problem+json"})
  default ResponseEntity<ChallengesPageDto> listChallenges(
      @Parameter(
              name = "challengeSearchQuery",
              description = "The search query used to find challenges.")
          @Valid
          ChallengeSearchQueryDto challengeSearchQuery) {
    return getDelegate().listChallenges(challengeSearchQuery);
  }
}
