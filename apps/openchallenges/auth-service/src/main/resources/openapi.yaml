openapi: 3.0.3
info:
  contact:
    name: Support
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  description: |
    Authentication and authorization service for OpenChallenges.

    This service provides:
    - JWT-based user authentication via username/password
    - API key management for service-to-service communication
    - Role-based access control with defined scopes
    - Token validation for accessing protected resources

    **Authentication Methods**:
    - `/v1/auth/login` - Username/password authentication returning JWT tokens
    - `/v1/auth/api-keys` - API key management for programmatic access
    - `/v1/auth/validate` - Token validation for protected resources

    **Authorization Scopes**:
    API access is controlled through role-based permissions and scopes defined below.
  license:
    name: Apache 2.0
    url: https://github.com/Sage-Bionetworks/sage-monorepo/blob/main/LICENSE.txt
  title: OpenChallenges Auth API
  version: 1.0.0
  x-logo:
    url: https://dev.openchallenges.io/img/unsafe/logo/OpenChallenges-logo.png
servers:
  - description: Local/dev base
    url: http://localhost
tags:
  - description: Operations for user authentication and token management
    name: Authentication
    x-audience:
      - public
  - description: Operations for API key management and service-to-service authentication
    name: API Key
    x-audience:
      - public
paths:
  /v1/auth/login:
    post:
      description: Authenticate user and return JWT token
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: Login successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: User login
      tags:
        - Authentication
      x-audience:
        - public
      x-content-type: application/json
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Authentication
  /v1/auth/logout:
    post:
      description: Logout user and revoke refresh tokens for security
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
          description: Logout successful
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: User logout
      tags:
        - Authentication
      x-audience:
        - public
      x-content-type: application/json
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Authentication
  /v1/auth/profile:
    get:
      description: Get the authenticated user's profile information
      operationId: getUserProfile
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: User profile information
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jwtBearerAuth: []
        - apiBearerAuth: []
      summary: Get user profile
      tags:
        - Authentication
      x-audience:
        - public
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Authentication
    put:
      description: Update the authenticated user's profile information
      operationId: updateUserProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: User profile updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jwtBearerAuth: []
      summary: Update user profile
      tags:
        - Authentication
      x-audience:
        - public
      x-content-type: application/json
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Authentication
  /v1/auth/api-keys:
    get:
      description: Get all API keys for the authenticated user
      operationId: listApiKeys
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiKey'
                type: array
          description: List of API keys
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - apiBearerAuth: []
      summary: List API keys
      tags:
        - API Key
      x-audience:
        - public
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: API Key
    post:
      description: Generate a new API key for the authenticated user
      operationId: createApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
          description: API key created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - apiBearerAuth: []
      summary: Create API key
      tags:
        - API Key
      x-audience:
        - public
      x-content-type: application/json
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: API Key
  /v1/auth/api-keys/{keyId}:
    delete:
      description: Revoke an API key
      operationId: deleteApiKey
      parameters:
        - description: The API key ID to delete
          explode: false
          in: path
          name: keyId
          required: true
          schema:
            format: uuid
            type: string
          style: simple
      responses:
        '204':
          description: API key deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - apiBearerAuth: []
      summary: Delete API key
      tags:
        - API Key
      x-audience:
        - public
      x-accepts:
        - application/problem+json
      x-tags:
        - tag: API Key
  /v1/auth/validate:
    post:
      description: Internal endpoint to validate API keys (used by other services)
      operationId: validateApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateApiKeyRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateApiKeyResponse'
          description: API key is valid
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Validate API key
      tags:
        - Authentication
      x-audience:
        - internal
      x-content-type: application/json
      x-accepts:
        - application/json
        - application/problem+json
      x-tags:
        - tag: Authentication
components:
  responses:
    Unauthorized:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: Unauthorized
    InternalServerError:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The request cannot be fulfilled due to an unexpected server error
    BadRequest:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: Invalid request
    NotFound:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The specified resource was not found
  schemas:
    LoginRequest:
      properties:
        username:
          description: Username or email
          example: admin
          type: string
        password:
          description: User password
          example: changeme
          format: password
          type: string
      required:
        - password
        - username
      type: object
    LoginResponse:
      example:
        expiresIn: 3600
        role: admin
        accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        tokenType: Bearer
        userId: 123e4567-e89b-12d3-a456-426614174000
        refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        username: admin
      properties:
        accessToken:
          description: JWT access token (15-60 minutes expiry)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          type: string
        refreshToken:
          description: JWT refresh token (7 days expiry)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          type: string
        tokenType:
          default: Bearer
          description: Token type
          example: Bearer
          type: string
        expiresIn:
          description: Access token expiry time in seconds
          example: 3600
          type: integer
        userId:
          description: User ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        username:
          description: Username
          example: admin
          type: string
        role:
          description: User role
          enum:
            - admin
            - user
            - readonly
            - service
          example: admin
          type: string
      type: object
    BasicError:
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          description: A human readable documentation for the problem type
          type: string
        status:
          description: The HTTP status code
          type: integer
        detail:
          description: A human readable explanation specific to this occurrence of
            the problem
          type: string
        type:
          description: An absolute URI that identifies the problem type
          type: string
      required:
        - status
        - title
      type: object
    LogoutRequest:
      properties:
        refreshToken:
          description: JWT refresh token to revoke
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          type: string
        revokeAllTokens:
          default: false
          description: Whether to revoke all refresh tokens for the user (default
            false)
          example: false
          type: boolean
      required:
        - refreshToken
      type: object
    LogoutResponse:
      example:
        message: Successfully logged out
        revokedTokens: 1
      properties:
        message:
          description: Logout success message
          example: Successfully logged out
          type: string
        revokedTokens:
          description: Number of refresh tokens revoked
          example: 1
          type: integer
      type: object
    UserRole:
      description: User role defining the level of access and permissions
      enum:
        - user
        - moderator
        - admin
        - service
      type: string
    AuthScope:
      description: Permission scope defining specific access rights
      enum:
        - user:profile
        - user:email
        - user:keys
        - read:org
        - write:org
        - delete:org
        - admin:org
        - read:challenge
        - write:challenge
        - delete:challenge
        - admin:challenge
        - admin:auth
        - admin:all
      type: string
    UserProfile:
      example:
        firstName: John
        lastName: Doe
        createdAt: 2024-01-15T10:30:00Z
        website: https://johndoe.com
        role: user
        avatarUrl: https://example.com/avatars/johndoe.jpg
        bio: Researcher in computational biology
        id: user_123456789
        scopes:
          - user:profile
          - user:profile
        email: john.doe@example.com
        username: johndoe
        updatedAt: 2024-02-01T14:20:00Z
      properties:
        id:
          description: Unique user identifier
          example: user_123456789
          type: string
        username:
          description: User's username
          example: johndoe
          type: string
        email:
          description: User's email address
          example: john.doe@example.com
          format: email
          type: string
        firstName:
          description: User's first name
          example: John
          type: string
        lastName:
          description: User's last name
          example: Doe
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        scopes:
          description: User's authorized scopes/permissions
          items:
            $ref: '#/components/schemas/AuthScope'
          type: array
        avatarUrl:
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
          format: uri
          type: string
        bio:
          description: User's biography or description
          example: Researcher in computational biology
          maxLength: 500
          type: string
        website:
          description: User's website URL
          example: https://johndoe.com
          format: uri
          type: string
        createdAt:
          description: Timestamp when the user account was created
          example: 2024-01-15T10:30:00Z
          format: date-time
          type: string
        updatedAt:
          description: Timestamp when the user profile was last updated
          example: 2024-02-01T14:20:00Z
          format: date-time
          type: string
      required:
        - createdAt
        - email
        - id
        - role
        - username
      type: object
    UpdateUserProfileRequest:
      properties:
        firstName:
          description: User's first name
          example: John
          maxLength: 50
          type: string
        lastName:
          description: User's last name
          example: Doe
          maxLength: 50
          type: string
        bio:
          description: User's biography or description
          example: Researcher in computational biology
          maxLength: 500
          type: string
        website:
          description: User's website URL
          example: https://johndoe.com
          format: uri
          type: string
        avatarUrl:
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
          format: uri
          type: string
      type: object
    ApiKey:
      example:
        createdAt: 2024-01-15T10:30:00Z
        lastUsedAt: 2024-06-15T14:20:00Z
        prefix: oc_prod_
        name: Production API Key
        id: 123e4567-e89b-12d3-a456-426614174000
        expiresAt: 2025-01-15T10:30:00Z
      properties:
        id:
          description: API key ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        name:
          description: Human-readable name for the API key
          example: Production API Key
          type: string
        prefix:
          description: First 8 characters of the API key for identification
          example: oc_prod_
          type: string
        createdAt:
          description: When the API key was created
          example: 2024-01-15T10:30:00Z
          format: date-time
          type: string
        expiresAt:
          description: When the API key expires (null if no expiration)
          example: 2025-01-15T10:30:00Z
          format: date-time
          nullable: true
          type: string
        lastUsedAt:
          description: When the API key was last used (null if never used)
          example: 2024-06-15T14:20:00Z
          format: date-time
          nullable: true
          type: string
      type: object
    CreateApiKeyRequest:
      properties:
        name:
          description: Human-readable name for the API key
          example: Production API Key
          maxLength: 100
          minLength: 1
          type: string
        expiresIn:
          description: "Number of days until the API key expires (optional, default\
            \ is no expiration)"
          example: 365
          maximum: 3650
          minimum: 1
          type: integer
      required:
        - name
      type: object
    CreateApiKeyResponse:
      example:
        createdAt: 2024-01-15T10:30:00Z
        prefix: oc_prod_
        name: Production API Key
        id: 123e4567-e89b-12d3-a456-426614174000
        key: oc_prod_abcd1234567890abcdef1234567890abcdef1234
        expiresAt: 2025-01-15T10:30:00Z
      properties:
        id:
          description: API key ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        key:
          description: The actual API key (only returned on creation)
          example: oc_prod_abcd1234567890abcdef1234567890abcdef1234
          type: string
        name:
          description: Human-readable name for the API key
          example: Production API Key
          type: string
        prefix:
          description: First 8 characters of the API key for identification
          example: oc_prod_
          type: string
        createdAt:
          description: When the API key was created
          example: 2024-01-15T10:30:00Z
          format: date-time
          type: string
        expiresAt:
          description: When the API key expires (null if no expiration)
          example: 2025-01-15T10:30:00Z
          format: date-time
          nullable: true
          type: string
      type: object
    ValidateApiKeyRequest:
      properties:
        apiKey:
          description: The API key to validate
          example: oc_prod_abcd1234567890abcdef1234567890abcdef1234
          type: string
      required:
        - apiKey
      type: object
    ValidateApiKeyResponse:
      example:
        valid: true
        role: admin
        scopes:
          - organizations:read
          - organizations:write
        userId: 123e4567-e89b-12d3-a456-426614174000
        username: admin
      properties:
        valid:
          description: Whether the API key is valid
          example: true
          type: boolean
        userId:
          description: ID of the user who owns this API key (only if valid)
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        username:
          description: Username of the API key owner (only if valid)
          example: admin
          type: string
        role:
          description: Role of the API key owner (only if valid)
          enum:
            - admin
            - user
            - readonly
            - service
          example: admin
          type: string
        scopes:
          description: Permissions granted to this API key (only if valid)
          example:
            - organizations:read
            - organizations:write
          items:
            type: string
          type: array
      type: object
  securitySchemes:
    jwtBearerAuth:
      bearerFormat: JWT
      description: JWT access token obtained from /auth/login or /auth/oauth2/callback
        endpoint
      scheme: bearer
      type: http
    apiBearerAuth:
      bearerFormat: JWT
      description: JWT token from authentication service or API key for programmatic
        access
      scheme: bearer
      type: http
