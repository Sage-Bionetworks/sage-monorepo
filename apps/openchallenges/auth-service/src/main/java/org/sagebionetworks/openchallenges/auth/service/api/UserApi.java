/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.openchallenges.auth.service.api;

import org.sagebionetworks.openchallenges.auth.service.model.dto.OAuth2ErrorDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.Oauth2UserInfo200ResponseDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "User", description = "Operations about user management and profile information")
public interface UserApi {

    default UserApiDelegate getDelegate() {
        return new UserApiDelegate() {};
    }

    /**
     * GET /v1/user : Get current user information
     * Get information about the currently authenticated user. This is an alias for the OAuth2 userinfo endpoint for backward compatibility. 
     *
     * @return User information (status code 200)
     *         or Invalid or expired access token (status code 401)
     *         or Insufficient scope (status code 403)
     */
    @Operation(
        operationId = "getCurrentUser",
        summary = "Get current user information",
        description = "Get information about the currently authenticated user. This is an alias for the OAuth2 userinfo endpoint for backward compatibility. ",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Oauth2UserInfo200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or expired access token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuth2ErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Insufficient scope", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuth2ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "openid", "profile", "email" }),
            @SecurityRequirement(name = "jwtBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/user",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Oauth2UserInfo200ResponseDto> getCurrentUser(
        
    ) {
        return getDelegate().getCurrentUser();
    }

}
