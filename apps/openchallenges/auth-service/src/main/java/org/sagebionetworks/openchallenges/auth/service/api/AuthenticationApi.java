/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.openchallenges.auth.service.api;

import org.sagebionetworks.openchallenges.auth.service.model.dto.BasicErrorDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.UpdateUserProfileRequestDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.UserProfileDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Authentication", description = "User profile and token validation operations")
public interface AuthenticationApi {

    default AuthenticationApiDelegate getDelegate() {
        return new AuthenticationApiDelegate() {};
    }

    /**
     * GET /auth/profile : Get user profile
     * Get the authenticated user&#39;s profile information
     *
     * @return User profile information (status code 200)
     *         or Unauthorized (status code 401)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "getUserProfile",
        summary = "Get user profile",
        description = "Get the authenticated user's profile information",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User profile information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfileDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = UserProfileDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKeyAuth"),
            @SecurityRequirement(name = "oauth2", scopes={ "profile" }),
            @SecurityRequirement(name = "jwtBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/auth/profile",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<UserProfileDto> getUserProfile(
        
    ) {
        return getDelegate().getUserProfile();
    }


    /**
     * PUT /auth/profile : Update user profile
     * Update the authenticated user&#39;s profile information
     *
     * @param updateUserProfileRequestDto  (required)
     * @return User profile updated successfully (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "updateUserProfile",
        summary = "Update user profile",
        description = "Update the authenticated user's profile information",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User profile updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfileDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = UserProfileDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKeyAuth"),
            @SecurityRequirement(name = "oauth2", scopes={ "profile" }),
            @SecurityRequirement(name = "jwtBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/auth/profile",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserProfileDto> updateUserProfile(
        @Parameter(name = "UpdateUserProfileRequestDto", description = "", required = true) @Valid @RequestBody UpdateUserProfileRequestDto updateUserProfileRequestDto
    ) {
        return getDelegate().updateUserProfile(updateUserProfileRequestDto);
    }

}
