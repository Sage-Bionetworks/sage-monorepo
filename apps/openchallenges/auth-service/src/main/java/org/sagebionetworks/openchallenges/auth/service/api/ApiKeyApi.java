/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.openchallenges.auth.service.api;

import org.sagebionetworks.openchallenges.auth.service.model.dto.ApiKeyDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.BasicErrorDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.CreateApiKeyRequestDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.CreateApiKeyResponseDto;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "API Key", description = "API key management for service-to-service authentication")
public interface ApiKeyApi {

    default ApiKeyApiDelegate getDelegate() {
        return new ApiKeyApiDelegate() {};
    }

    /**
     * POST /auth/api-keys : Create API key
     * Generate a new API key for the authenticated user
     *
     * @param createApiKeyRequestDto  (required)
     * @return API key created successfully (status code 201)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "createApiKey",
        summary = "Create API key",
        description = "Generate a new API key for the authenticated user",
        tags = { "API Key" },
        responses = {
            @ApiResponse(responseCode = "201", description = "API key created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateApiKeyResponseDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = CreateApiKeyResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/api-keys",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreateApiKeyResponseDto> createApiKey(
        @Parameter(name = "CreateApiKeyRequestDto", description = "", required = true) @Valid @RequestBody CreateApiKeyRequestDto createApiKeyRequestDto
    ) {
        return getDelegate().createApiKey(createApiKeyRequestDto);
    }


    /**
     * DELETE /auth/api-keys/{keyId} : Delete API key
     * Revoke an API key
     *
     * @param keyId The API key ID to delete (required)
     * @return API key deleted successfully (status code 204)
     *         or Unauthorized (status code 401)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "deleteApiKey",
        summary = "Delete API key",
        description = "Revoke an API key",
        tags = { "API Key" },
        responses = {
            @ApiResponse(responseCode = "204", description = "API key deleted successfully"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/auth/api-keys/{keyId}",
        produces = { "application/problem+json" }
    )
    
    default ResponseEntity<Void> deleteApiKey(
        @Parameter(name = "keyId", description = "The API key ID to delete", required = true, in = ParameterIn.PATH) @PathVariable("keyId") UUID keyId
    ) {
        return getDelegate().deleteApiKey(keyId);
    }


    /**
     * GET /auth/api-keys : List API keys
     * Get all API keys for the authenticated user
     *
     * @return List of API keys (status code 200)
     *         or Unauthorized (status code 401)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "listApiKeys",
        summary = "List API keys",
        description = "Get all API keys for the authenticated user",
        tags = { "API Key" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of API keys", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ApiKeyDto.class))),
                @Content(mediaType = "application/problem+json", array = @ArraySchema(schema = @Schema(implementation = ApiKeyDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiBearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/auth/api-keys",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<List<ApiKeyDto>> listApiKeys(
        
    ) {
        return getDelegate().listApiKeys();
    }

}
