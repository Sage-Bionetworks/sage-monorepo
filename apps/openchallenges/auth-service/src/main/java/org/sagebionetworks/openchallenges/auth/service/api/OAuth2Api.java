/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.openchallenges.auth.service.api;

import org.sagebionetworks.openchallenges.auth.service.model.dto.BasicErrorDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.OAuth2ErrorDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.OAuth2TokenResponseDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.Oauth2AuthorizationServerMetadata200ResponseDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.Oauth2Introspect200ResponseDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.Oauth2JwksJson200ResponseDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.Oauth2JwksJson404ResponseDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.Oauth2RevokeToken200ResponseDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.Oauth2UserInfo200ResponseDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.Oauth2WellKnownOpenidConfiguration200ResponseDto;
import org.sagebionetworks.openchallenges.auth.service.model.dto.Oauth2WellKnownOpenidConfiguration404ResponseDto;
import java.net.URI;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "OAuth2", description = "Standard OAuth2 and OIDC endpoints for authorization and authentication")
public interface OAuth2Api {

    default OAuth2ApiDelegate getDelegate() {
        return new OAuth2ApiDelegate() {};
    }

    /**
     * GET /.well-known/oauth-authorization-server : OAuth2 Authorization Server Discovery
     * RFC 8414 OAuth2 Authorization Server Metadata endpoint. Returns the OAuth2 authorization server discovery document. 
     *
     * @return OAuth2 Authorization Server Metadata (status code 200)
     *         or Discovery document not available (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "oauth2AuthorizationServerMetadata",
        summary = "OAuth2 Authorization Server Discovery",
        description = "RFC 8414 OAuth2 Authorization Server Metadata endpoint. Returns the OAuth2 authorization server discovery document. ",
        tags = { "OAuth2" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OAuth2 Authorization Server Metadata", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Oauth2AuthorizationServerMetadata200ResponseDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Oauth2AuthorizationServerMetadata200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Discovery document not available", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuth2ErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = OAuth2ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/.well-known/oauth-authorization-server",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<Oauth2AuthorizationServerMetadata200ResponseDto> oauth2AuthorizationServerMetadata(
        
    ) {
        return getDelegate().oauth2AuthorizationServerMetadata();
    }


    /**
     * GET /oauth2/authorize : OAuth2 Authorization Endpoint
     * Standard OAuth2 authorization endpoint for third-party applications. Redirects users to consent page and returns authorization code. 
     *
     * @param responseType Response type, must be &#39;code&#39; for authorization code flow (required)
     * @param clientId OAuth2 client identifier (required)
     * @param redirectUri Redirect URI for the OAuth2 client (required)
     * @param scope Space-separated list of requested scopes (optional)
     * @param state Opaque state value for CSRF protection (optional)
     * @return Authorization consent page (when user needs to grant consent) (status code 200)
     *         or Redirect to client application with authorization code (status code 302)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "oauth2Authorize",
        summary = "OAuth2 Authorization Endpoint",
        description = "Standard OAuth2 authorization endpoint for third-party applications. Redirects users to consent page and returns authorization code. ",
        tags = { "OAuth2" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Authorization consent page (when user needs to grant consent)", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "302", description = "Redirect to client application with authorization code"),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/oauth2/authorize",
        produces = { "text/html", "application/problem+json" }
    )
    
    default ResponseEntity<String> oauth2Authorize(
        @NotNull @Parameter(name = "response_type", description = "Response type, must be 'code' for authorization code flow", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "response_type", required = true) String responseType,
        @NotNull @Parameter(name = "client_id", description = "OAuth2 client identifier", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "client_id", required = true) String clientId,
        @NotNull @Parameter(name = "redirect_uri", description = "Redirect URI for the OAuth2 client", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "redirect_uri", required = true) URI redirectUri,
        @Parameter(name = "scope", description = "Space-separated list of requested scopes", in = ParameterIn.QUERY) @Valid @RequestParam(value = "scope", required = false) @Nullable String scope,
        @Parameter(name = "state", description = "Opaque state value for CSRF protection", in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = false) @Nullable String state
    ) {
        return getDelegate().oauth2Authorize(responseType, clientId, redirectUri, scope, state);
    }


    /**
     * POST /oauth2/introspect : Token introspection endpoint
     * RFC 7662 token introspection endpoint to determine the active state of a token and to determine meta-information about this token. 
     *
     * @param token The token to introspect (required)
     * @param tokenTypeHint Hint about the type of token being introspected (optional)
     * @return Token introspection response (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "oauth2Introspect",
        summary = "Token introspection endpoint",
        description = "RFC 7662 token introspection endpoint to determine the active state of a token and to determine meta-information about this token. ",
        tags = { "OAuth2" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Token introspection response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Oauth2Introspect200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuth2ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuth2ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "admin:auth" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/oauth2/introspect",
        produces = { "application/json" },
        consumes = { "application/x-www-form-urlencoded" }
    )
    
    default ResponseEntity<Oauth2Introspect200ResponseDto> oauth2Introspect(
        @Parameter(name = "token", description = "The token to introspect", required = true) @Valid @RequestParam(value = "token", required = true) String token,
        @Parameter(name = "token_type_hint", description = "Hint about the type of token being introspected") @Valid @RequestParam(value = "token_type_hint", required = false) String tokenTypeHint
    ) {
        return getDelegate().oauth2Introspect(token, tokenTypeHint);
    }


    /**
     * GET /.well-known/jwks.json : JSON Web Key Set
     * RFC 7517 JSON Web Key Set document containing the public keys used to verify JWT tokens. 
     *
     * @return JSON Web Key Set (status code 200)
     *         or JWKS not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "oauth2JwksJson",
        summary = "JSON Web Key Set",
        description = "RFC 7517 JSON Web Key Set document containing the public keys used to verify JWT tokens. ",
        tags = { "OAuth2" },
        responses = {
            @ApiResponse(responseCode = "200", description = "JSON Web Key Set", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Oauth2JwksJson200ResponseDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Oauth2JwksJson200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "JWKS not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Oauth2JwksJson404ResponseDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Oauth2JwksJson404ResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/.well-known/jwks.json",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<Oauth2JwksJson200ResponseDto> oauth2JwksJson(
        
    ) {
        return getDelegate().oauth2JwksJson();
    }


    /**
     * POST /oauth2/revoke : Revoke access or refresh token
     * Revoke an access token or refresh token according to RFC 7009. This endpoint invalidates the specified token and any associated tokens. 
     *
     * @param token The token to revoke (access token or refresh token) (required)
     * @param tokenTypeHint Hint about the type of token being revoked (optional)
     * @param clientId Client identifier (optional)
     * @param clientSecret Client secret (if required) (optional)
     * @return Token successfully revoked (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "oauth2RevokeToken",
        summary = "Revoke access or refresh token",
        description = "Revoke an access token or refresh token according to RFC 7009. This endpoint invalidates the specified token and any associated tokens. ",
        tags = { "OAuth2" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Token successfully revoked", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Oauth2RevokeToken200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuth2ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuth2ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "admin:auth" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/oauth2/revoke",
        produces = { "application/json" },
        consumes = { "application/x-www-form-urlencoded" }
    )
    
    default ResponseEntity<Oauth2RevokeToken200ResponseDto> oauth2RevokeToken(
        @Parameter(name = "token", description = "The token to revoke (access token or refresh token)", required = true) @Valid @RequestParam(value = "token", required = true) String token,
        @Parameter(name = "token_type_hint", description = "Hint about the type of token being revoked") @Valid @RequestParam(value = "token_type_hint", required = false) String tokenTypeHint,
        @Parameter(name = "client_id", description = "Client identifier") @Valid @RequestParam(value = "client_id", required = false) String clientId,
        @Parameter(name = "client_secret", description = "Client secret (if required)") @Valid @RequestParam(value = "client_secret", required = false) String clientSecret
    ) {
        return getDelegate().oauth2RevokeToken(token, tokenTypeHint, clientId, clientSecret);
    }


    /**
     * POST /oauth2/token : OAuth2 Token Endpoint
     * Standard OAuth2 token endpoint for exchanging authorization codes for access tokens. Also supports refresh token grant and client credentials grant. 
     *
     * @param grantType OAuth2 grant type (required)
     * @param clientId OAuth2 client identifier (required)
     * @param code Authorization code (required for authorization_code grant) (optional)
     * @param redirectUri Redirect URI (required for authorization_code grant) (optional)
     * @param clientSecret OAuth2 client secret (optional)
     * @param refreshToken Refresh token (required for refresh_token grant) (optional)
     * @param scope Requested scope (optional, space-separated) (optional)
     * @return Access token response (status code 200)
     *         or Invalid request (status code 400)
     *         or Invalid client credentials (status code 401)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "oauth2Token",
        summary = "OAuth2 Token Endpoint",
        description = "Standard OAuth2 token endpoint for exchanging authorization codes for access tokens. Also supports refresh token grant and client credentials grant. ",
        tags = { "OAuth2" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Access token response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuth2TokenResponseDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = OAuth2TokenResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuth2ErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = OAuth2ErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid client credentials", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuth2ErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = OAuth2ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/oauth2/token",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/x-www-form-urlencoded" }
    )
    
    default ResponseEntity<OAuth2TokenResponseDto> oauth2Token(
        @Parameter(name = "grant_type", description = "OAuth2 grant type", required = true) @Valid @RequestParam(value = "grant_type", required = true) String grantType,
        @Parameter(name = "client_id", description = "OAuth2 client identifier", required = true) @Valid @RequestParam(value = "client_id", required = true) String clientId,
        @Parameter(name = "code", description = "Authorization code (required for authorization_code grant)") @Valid @RequestParam(value = "code", required = false) String code,
        @Parameter(name = "redirect_uri", description = "Redirect URI (required for authorization_code grant)") @Valid @RequestParam(value = "redirect_uri", required = false) URI redirectUri,
        @Parameter(name = "client_secret", description = "OAuth2 client secret") @Valid @RequestParam(value = "client_secret", required = false) String clientSecret,
        @Parameter(name = "refresh_token", description = "Refresh token (required for refresh_token grant)") @Valid @RequestParam(value = "refresh_token", required = false) String refreshToken,
        @Parameter(name = "scope", description = "Requested scope (optional, space-separated)") @Valid @RequestParam(value = "scope", required = false) String scope
    ) {
        return getDelegate().oauth2Token(grantType, clientId, code, redirectUri, clientSecret, refreshToken, scope);
    }


    /**
     * GET /oauth2/userinfo : OAuth2 user info endpoint
     * Standard OAuth2/OIDC user info endpoint that returns information about the authenticated user. Requires a valid access token with appropriate scopes. 
     *
     * @return User information (status code 200)
     *         or Invalid or expired access token (status code 401)
     *         or Insufficient scope (status code 403)
     */
    @Operation(
        operationId = "oauth2UserInfo",
        summary = "OAuth2 user info endpoint",
        description = "Standard OAuth2/OIDC user info endpoint that returns information about the authenticated user. Requires a valid access token with appropriate scopes. ",
        tags = { "OAuth2" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Oauth2UserInfo200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Invalid or expired access token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuth2ErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Insufficient scope", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OAuth2ErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "openid", "profile", "email" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/oauth2/userinfo",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Oauth2UserInfo200ResponseDto> oauth2UserInfo(
        
    ) {
        return getDelegate().oauth2UserInfo();
    }


    /**
     * GET /.well-known/openid-configuration : OAuth2 Authorization Server Metadata
     * RFC 8414 OAuth2 Authorization Server Metadata endpoint. Returns the OAuth2/OIDC discovery document with server configuration. 
     *
     * @return OAuth2 Authorization Server Metadata (status code 200)
     *         or Configuration not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "oauth2WellKnownOpenidConfiguration",
        summary = "OAuth2 Authorization Server Metadata",
        description = "RFC 8414 OAuth2 Authorization Server Metadata endpoint. Returns the OAuth2/OIDC discovery document with server configuration. ",
        tags = { "OAuth2" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OAuth2 Authorization Server Metadata", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Oauth2WellKnownOpenidConfiguration200ResponseDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Oauth2WellKnownOpenidConfiguration200ResponseDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Configuration not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Oauth2WellKnownOpenidConfiguration404ResponseDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Oauth2WellKnownOpenidConfiguration404ResponseDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/.well-known/openid-configuration",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<Oauth2WellKnownOpenidConfiguration200ResponseDto> oauth2WellKnownOpenidConfiguration(
        
    ) {
        return getDelegate().oauth2WellKnownOpenidConfiguration();
    }

}
