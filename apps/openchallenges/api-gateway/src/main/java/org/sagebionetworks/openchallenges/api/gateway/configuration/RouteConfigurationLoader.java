package org.sagebionetworks.openchallenges.api.gateway.configuration;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import jakarta.annotation.PostConstruct;
import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import org.sagebionetworks.openchallenges.api.gateway.model.config.RouteConfig;
import org.sagebionetworks.openchallenges.api.gateway.model.config.RouteConfigRegistry;
import org.springframework.context.annotation.Bean;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Component;

/**
 * Configuration loader for route configurations.
 * This configuration loads the route-config.yml file generated by OpenApiRouteConfigGenerator.
 */
@Slf4j
@Component
public class RouteConfigurationLoader {

  private static final ObjectMapper yamlMapper = new ObjectMapper(new YAMLFactory());
  private static final String CONFIG_FILE_NAME = "route-config.yml";

  private RouteConfigRegistry routeConfigRegistry;

  @PostConstruct
  public void loadRouteConfig() {
    try {
      ClassPathResource resource = new ClassPathResource(CONFIG_FILE_NAME);
      if (!resource.exists()) {
        log.warn(
          "{} not found in classpath. No route configurations will be available.",
          CONFIG_FILE_NAME
        );
        log.warn(
          "To generate route configurations, run: ./gradlew :openchallenges-api-gateway:generateRouteConfig"
        );
        this.routeConfigRegistry = new RouteConfigRegistry();
        return;
      }

      try (InputStream inputStream = resource.getInputStream()) {
        @SuppressWarnings("unchecked")
        Map<String, Object> config = yamlMapper.readValue(inputStream, Map.class);
        this.routeConfigRegistry = parseRouteConfig(config);
        log.info(
          "Loaded {} route configurations from {}",
          this.routeConfigRegistry.size(),
          CONFIG_FILE_NAME
        );

        // Log some sample configurations for debugging
        if (log.isDebugEnabled() && !routeConfigRegistry.isEmpty()) {
          routeConfigRegistry
            .getAllRouteConfigs()
            .entrySet()
            .stream()
            .limit(5)
            .forEach(entry -> log.debug("Route config: {} -> {}", entry.getKey(), entry.getValue())
            );
        }
      }
    } catch (IOException e) {
      log.error("Failed to load {}", CONFIG_FILE_NAME, e);
      this.routeConfigRegistry = new RouteConfigRegistry();
    }
  }

  @Bean
  public RouteConfigRegistry routeConfigRegistry() {
    return routeConfigRegistry;
  }

  @SuppressWarnings("unchecked")
  private RouteConfigRegistry parseRouteConfig(Map<String, Object> config) {
    try {
      // Navigate to app.route-config
      Map<String, Object> app = (Map<String, Object>) config.get("app");
      if (app == null) {
        log.warn("No 'app' section found in route configuration");
        return new RouteConfigRegistry();
      }

      Map<String, Object> routeConfigSection = (Map<String, Object>) app.get("route-config");
      if (routeConfigSection == null) {
        log.warn("No 'route-config' section found under 'app' in configuration");
        return new RouteConfigRegistry();
      }

      Map<String, RouteConfig> routeConfigs = new LinkedHashMap<>();

      for (Map.Entry<String, Object> entry : routeConfigSection.entrySet()) {
        String routeKey = entry.getKey();
        Map<String, Object> configMap = (Map<String, Object>) entry.getValue();

        RouteConfig routeConfig = parseRouteConfigEntry(routeKey, configMap);
        routeConfigs.put(routeKey, routeConfig);
      }

      return new RouteConfigRegistry(routeConfigs);
    } catch (Exception e) {
      log.error("Error parsing route configuration", e);
      return new RouteConfigRegistry();
    }
  }

  @SuppressWarnings("unchecked")
  private RouteConfig parseRouteConfigEntry(String routeKey, Map<String, Object> configMap) {
    List<String> scopes = (List<String>) configMap.getOrDefault("scopes", List.of());
    String audience = (String) configMap.get("audience");
    Boolean anonymousAccess = (Boolean) configMap.getOrDefault("anonymousAccess", false);

    return new RouteConfig(scopes, audience, anonymousAccess);
  }
}
