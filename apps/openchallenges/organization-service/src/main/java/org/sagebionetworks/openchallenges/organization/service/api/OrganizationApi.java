/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.openchallenges.organization.service.api;

import org.sagebionetworks.openchallenges.organization.service.model.dto.BasicErrorDto;
import org.sagebionetworks.openchallenges.organization.service.model.dto.OrganizationDto;
import org.sagebionetworks.openchallenges.organization.service.model.dto.OrganizationSearchQueryDto;
import org.sagebionetworks.openchallenges.organization.service.model.dto.OrganizationsPageDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "Organization", description = "Operations about organizations")
public interface OrganizationApi {

    default OrganizationApiDelegate getDelegate() {
        return new OrganizationApiDelegate() {};
    }

    /**
     * GET /organizations/{org} : Get an organization
     * Returns the organization specified
     *
     * @param org The id or login of the organization. (required)
     * @return An organization (status code 200)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "getOrganization",
        summary = "Get an organization",
        description = "Returns the organization specified",
        tags = { "Organization" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An organization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = OrganizationDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/organizations/{org}",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<OrganizationDto> getOrganization(
        @Size(min = 1, max = 64) @Parameter(name = "org", description = "The id or login of the organization.", required = true, in = ParameterIn.PATH) @PathVariable("org") String org
    ) {
        return getDelegate().getOrganization(org);
    }


    /**
     * GET /organizations : List organizations
     * List organizations
     *
     * @param organizationSearchQuery The search query used to find organizations. (optional)
     * @return Success (status code 200)
     *         or Invalid request (status code 400)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "listOrganizations",
        summary = "List organizations",
        description = "List organizations",
        tags = { "Organization" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationsPageDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = OrganizationsPageDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/organizations",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<OrganizationsPageDto> listOrganizations(
        @Parameter(name = "organizationSearchQuery", description = "The search query used to find organizations.", in = ParameterIn.QUERY) @Valid OrganizationSearchQueryDto organizationSearchQuery
    ) {
        return getDelegate().listOrganizations(organizationSearchQuery);
    }

}
