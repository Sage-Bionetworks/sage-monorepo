/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.openchallenges.organization.service.api;

import org.sagebionetworks.openchallenges.organization.service.model.dto.BasicErrorDto;
import org.sagebionetworks.openchallenges.organization.service.model.dto.OrganizationCreateRequestDto;
import org.sagebionetworks.openchallenges.organization.service.model.dto.OrganizationDto;
import org.sagebionetworks.openchallenges.organization.service.model.dto.OrganizationSearchQueryDto;
import org.sagebionetworks.openchallenges.organization.service.model.dto.OrganizationUpdateRequestDto;
import org.sagebionetworks.openchallenges.organization.service.model.dto.OrganizationsPageDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Organization", description = "Operations about organizations")
public interface OrganizationApi {

    default OrganizationApiDelegate getDelegate() {
        return new OrganizationApiDelegate() {};
    }

    /**
     * POST /organizations : Create an organization
     * Create an organization with the specified account name
     *
     * @param organizationCreateRequestDto  (required)
     * @return Organization created successfully (status code 201)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The user does not have the permission to perform this action (status code 403)
     *         or The request conflicts with current state of the target resource (status code 409)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "createOrganization",
        summary = "Create an organization",
        description = "Create an organization with the specified account name",
        tags = { "Organization" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Organization created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = OrganizationDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user does not have the permission to perform this action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "The request conflicts with current state of the target resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer", scopes={ "write:org" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/organizations",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<OrganizationDto> createOrganization(
        @Parameter(name = "OrganizationCreateRequestDto", description = "", required = true) @Valid @RequestBody OrganizationCreateRequestDto organizationCreateRequestDto
    ) {
        return getDelegate().createOrganization(organizationCreateRequestDto);
    }


    /**
     * DELETE /organizations/{org} : Delete an organization
     * Deletes the organization specified by its login or ID.
     *
     * @param org The id or login of the organization. (required)
     * @return Organization successfully deleted (status code 204)
     *         or Unauthorized (status code 401)
     *         or The user does not have the permission to perform this action (status code 403)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "deleteOrganization",
        summary = "Delete an organization",
        description = "Deletes the organization specified by its login or ID.",
        tags = { "Organization" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Organization successfully deleted"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user does not have the permission to perform this action", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer", scopes={ "delete:org" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/organizations/{org}",
        produces = { "application/problem+json" }
    )
    
    default ResponseEntity<Void> deleteOrganization(
        @Size(min = 1, max = 64) @Parameter(name = "org", description = "The id or login of the organization.", required = true, in = ParameterIn.PATH) @PathVariable("org") String org
    ) {
        return getDelegate().deleteOrganization(org);
    }


    /**
     * GET /organizations/{org} : Get an organization
     * Returns the organization identified by its login or ID.
     *
     * @param org The id or login of the organization. (required)
     * @return Organization retrieved successfully (status code 200)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "getOrganization",
        summary = "Get an organization",
        description = "Returns the organization identified by its login or ID.",
        tags = { "Organization" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Organization retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = OrganizationDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/organizations/{org}",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<OrganizationDto> getOrganization(
        @Size(min = 1, max = 64) @Parameter(name = "org", description = "The id or login of the organization.", required = true, in = ParameterIn.PATH) @PathVariable("org") String org
    ) {
        return getDelegate().getOrganization(org);
    }


    /**
     * GET /organizations : List organizations
     * List organizations
     *
     * @param organizationSearchQuery The search query used to find organizations. (optional)
     * @return Success (status code 200)
     *         or Invalid request (status code 400)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "listOrganizations",
        summary = "List organizations",
        description = "List organizations",
        tags = { "Organization" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationsPageDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = OrganizationsPageDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer", scopes={ "read:org" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/organizations",
        produces = { "application/json", "application/problem+json" }
    )
    
    default ResponseEntity<OrganizationsPageDto> listOrganizations(
        @Parameter(name = "organizationSearchQuery", description = "The search query used to find organizations.", in = ParameterIn.QUERY) @Valid @Nullable OrganizationSearchQueryDto organizationSearchQuery
    ) {
        return getDelegate().listOrganizations(organizationSearchQuery);
    }


    /**
     * PUT /organizations/{org} : Update an existing organization
     * Updates an existing organization.
     *
     * @param org The id or login of the organization. (required)
     * @param organizationUpdateRequestDto  (required)
     * @return Organization successfully updated (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or The user does not have the permission to perform this action (status code 403)
     *         or The specified resource was not found (status code 404)
     *         or The request conflicts with current state of the target resource (status code 409)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "updateOrganization",
        summary = "Update an existing organization",
        description = "Updates an existing organization.",
        tags = { "Organization" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Organization successfully updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = OrganizationDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user does not have the permission to perform this action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "The request conflicts with current state of the target resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer", scopes={ "write:org" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/organizations/{org}",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<OrganizationDto> updateOrganization(
        @Size(min = 1, max = 64) @Parameter(name = "org", description = "The id or login of the organization.", required = true, in = ParameterIn.PATH) @PathVariable("org") String org,
        @Parameter(name = "OrganizationUpdateRequestDto", description = "", required = true) @Valid @RequestBody OrganizationUpdateRequestDto organizationUpdateRequestDto
    ) {
        return getDelegate().updateOrganization(org, organizationUpdateRequestDto);
    }

}
