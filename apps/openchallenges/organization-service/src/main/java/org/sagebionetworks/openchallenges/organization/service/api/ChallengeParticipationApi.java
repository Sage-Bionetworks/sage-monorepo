/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sagebionetworks.openchallenges.organization.service.api;

import org.sagebionetworks.openchallenges.organization.service.model.dto.BasicErrorDto;
import org.sagebionetworks.openchallenges.organization.service.model.dto.ChallengeParticipationCreateRequestDto;
import org.sagebionetworks.openchallenges.organization.service.model.dto.ChallengeParticipationDto;
import org.sagebionetworks.openchallenges.organization.service.model.dto.ChallengeParticipationRoleDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Challenge Participation", description = "Operations about a challenge participation")
public interface ChallengeParticipationApi {

    default ChallengeParticipationApiDelegate getDelegate() {
        return new ChallengeParticipationApiDelegate() {};
    }

    /**
     * POST /organizations/{org}/participations : Create a new challenge participation
     * Creates a new challenge participation.
     *
     * @param org The id or login of the organization. (required)
     * @param challengeParticipationCreateRequestDto  (required)
     * @return Participation created successfully (status code 201)
     *         or Unauthorized (status code 401)
     *         or The user does not have the permission to perform this action (status code 403)
     *         or The specified resource was not found (status code 404)
     *         or The request conflicts with current state of the target resource (status code 409)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "createChallengeParticipation",
        summary = "Create a new challenge participation",
        description = "Creates a new challenge participation.",
        tags = { "Challenge Participation" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Participation created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChallengeParticipationDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ChallengeParticipationDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user does not have the permission to perform this action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "409", description = "The request conflicts with current state of the target resource", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer", scopes={ "write:org" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/organizations/{org}/participations",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ChallengeParticipationDto> createChallengeParticipation(
        @Size(min = 1, max = 64) @Parameter(name = "org", description = "The id or login of the organization.", required = true, in = ParameterIn.PATH) @PathVariable("org") String org,
        @Parameter(name = "ChallengeParticipationCreateRequestDto", description = "", required = true) @Valid @RequestBody ChallengeParticipationCreateRequestDto challengeParticipationCreateRequestDto
    ) {
        return getDelegate().createChallengeParticipation(org, challengeParticipationCreateRequestDto);
    }


    /**
     * DELETE /organizations/{org}/participations/{challengeId}/roles/{role} : Delete a specific challenge participation
     * Delete a specific challenge participation.
     *
     * @param org The id or login of the organization. (required)
     * @param challengeId The unique identifier of the challenge. (required)
     * @param role A challenge participation role. (required)
     * @return Participation deleted successfully (status code 204)
     *         or Unauthorized (status code 401)
     *         or The user does not have the permission to perform this action (status code 403)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @Operation(
        operationId = "deleteChallengeParticipation",
        summary = "Delete a specific challenge participation",
        description = "Delete a specific challenge participation.",
        tags = { "Challenge Participation" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Participation deleted successfully"),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "The user does not have the permission to perform this action", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "The request cannot be fulfilled due to an unexpected server error", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BasicErrorDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwtBearer", scopes={ "write:org" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/organizations/{org}/participations/{challengeId}/roles/{role}",
        produces = { "application/problem+json" }
    )
    
    default ResponseEntity<Void> deleteChallengeParticipation(
        @Size(min = 1, max = 64) @Parameter(name = "org", description = "The id or login of the organization.", required = true, in = ParameterIn.PATH) @PathVariable("org") String org,
        @Parameter(name = "challengeId", description = "The unique identifier of the challenge.", required = true, in = ParameterIn.PATH) @PathVariable("challengeId") Long challengeId,
        @Parameter(name = "role", description = "A challenge participation role.", required = true, in = ParameterIn.PATH) @PathVariable("role") ChallengeParticipationRoleDto role
    ) {
        return getDelegate().deleteChallengeParticipation(org, challengeId, role);
    }

}
