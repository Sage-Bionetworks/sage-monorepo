buildscript {
  dependencies {
    classpath(libs.flyway.database.postgresql)
  }
}

plugins {
    // id("dev.nx.gradle.project-graph") version("0.1.4")
  alias(libs.plugins.flyway)
  // Spring Boot plugin will be applied by the root build.gradle.kts
}

dependencies {
  annotationProcessor(libs.lombok)
  compileOnly(libs.lombok)
  implementation(libs.findbugs.jsr305)
  implementation(libs.flyway.core)
  implementation(libs.hibernate.search.backend.elasticsearch)
  implementation(libs.hibernate.search.mapper.orm)
  implementation(libs.jackson.databind)
  implementation(libs.jackson.dataformat.yaml)
  implementation(libs.jackson.datatype.jsr310)
  implementation(libs.openchallenges.app.config.data)
  implementation(libs.sagebionetworks.util)
  implementation(libs.spring.boot.starter.actuator)
  implementation(libs.spring.boot.starter.data.jpa)
  implementation(libs.spring.boot.starter.jdbc)
  implementation(libs.spring.boot.starter.security)
  implementation(libs.spring.boot.starter.validation)
  implementation(libs.spring.boot.starter.web)
  implementation(libs.spring.cloud.starter.openfeign)
  implementation(libs.spring.data.commons)
  implementation(libs.springdoc.openapi.ui)
  implementation(platform(libs.spring.boot.dependencies))
  runtimeOnly(libs.flyway.database.postgresql)
  runtimeOnly(libs.postgresql)
  runtimeOnly(libs.spring.boot.devtools)
  testAnnotationProcessor(libs.lombok)
  testCompileOnly(libs.lombok)
  testImplementation(libs.spring.boot.starter.test)
  testImplementation(libs.spring.security.test)
  testImplementation(libs.testcontainers.junit.jupiter)
  testImplementation(libs.testcontainers.postgresql)
  testImplementation(platform(libs.testcontainers.bom))
  testRuntimeOnly(libs.h2database.h2)

  // Add dependency on the API client module
  implementation(project(":openchallenges-api-client-java"))
}

// Task for unit tests only (excludes integration tests)
tasks.register<Test>("testUnit") {
  group = "verification"
  description = "Runs unit tests only (fast)"

  useJUnitPlatform {
    excludeTags("integration")
  }

  testLogging {
    events("passed", "skipped", "failed")
  }
}

// Task for integration tests only
tasks.register<Test>("testIntegration") {
  group = "verification"
  description = "Runs integration tests only (slow)"

  useJUnitPlatform {
    includeTags("integration")
  }

  testLogging {
    events("passed", "skipped", "failed")
  }
}

// Exclude files generated by the OpenAPI generator from the coverage report
val coverageExclusions = listOf(
  "org/sagebionetworks/openchallenges/organization/service/model/dto/**",
  "org/sagebionetworks/openchallenges/organization/service/api/**"
)

val coverageIncludeExclusions = listOf(
  "org/sagebionetworks/openchallenges/organization/service/configuration/EnumConverterConfiguration*",
  "org/sagebionetworks/openchallenges/organization/service/configuration/Flyway*",
  "org/sagebionetworks/openchallenges/organization/service/configuration/HibernateSearch*",
  "org/sagebionetworks/openchallenges/organization/service/configuration/HomeController*",
  "org/sagebionetworks/openchallenges/organization/service/configuration/SpringDocConfiguration*",
  "org/sagebionetworks/openchallenges/organization/service/RFC3339DateFormat*"
)

val coverageClassFiles = files(
  fileTree(layout.buildDirectory.dir("classes/java/main")) {
    exclude(coverageExclusions)
    exclude(coverageIncludeExclusions)
  },
  fileTree(layout.buildDirectory.dir("classes/java/main")) {
    include("org/sagebionetworks/openchallenges/organization/service/api/*Impl.class")
  }
)

tasks.jacocoTestReport {
  dependsOn(tasks.test)

  classDirectories.setFrom(coverageClassFiles)

  reports {
    xml.required = true
    html.required = true
    csv.required = false
    html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
  }
}

tasks.jacocoTestCoverageVerification {
  classDirectories.setFrom(coverageClassFiles)

  violationRules {
    rule {
      element = "CLASS"
      limit {
        counter = "LINE"
        value = "COVEREDRATIO"
        minimum = "0".toBigDecimal()
      }
    }
  }
}

tasks.check {
  dependsOn(tasks.jacocoTestReport, tasks.jacocoTestCoverageVerification)
}

tasks.named<org.springframework.boot.gradle.tasks.bundling.BootBuildImage>("bootBuildImage") {
  imageName.set("ghcr.io/sage-bionetworks/${project.name}-base:local")
}

flyway {
  url = "jdbc:postgresql://openchallenges-postgres:8091/organization_service"
  user = System.getenv("FLYWAY_USER") ?: "organization_service"
  password = System.getenv("FLYWAY_PASSWORD") ?: "changeme"
  cleanDisabled = false
}

// allprojects {
//     apply {
//         plugin("dev.nx.gradle.project-graph")
//     }
// }