# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from schematic_api.models.base_model_ import Model
from schematic_api.models.component import Component
from schematic_api import util

from schematic_api.models.component import Component  # noqa: E501

class ComponentsPageAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, components=None):  # noqa: E501
        """ComponentsPageAllOf - a model defined in OpenAPI

        :param components: The components of this ComponentsPageAllOf.  # noqa: E501
        :type components: List[Component]
        """
        self.openapi_types = {
            'components': List[Component]
        }

        self.attribute_map = {
            'components': 'components'
        }

        self._components = components

    @classmethod
    def from_dict(cls, dikt) -> 'ComponentsPageAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ComponentsPage_allOf of this ComponentsPageAllOf.  # noqa: E501
        :rtype: ComponentsPageAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def components(self):
        """Gets the components of this ComponentsPageAllOf.

        A list of components.  # noqa: E501

        :return: The components of this ComponentsPageAllOf.
        :rtype: List[Component]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this ComponentsPageAllOf.

        A list of components.  # noqa: E501

        :param components: The components of this ComponentsPageAllOf.
        :type components: List[Component]
        """
        if components is None:
            raise ValueError("Invalid value for `components`, must not be `None`")  # noqa: E501

        self._components = components
