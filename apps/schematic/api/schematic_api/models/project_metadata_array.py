# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from schematic_api.models.base_model_ import Model
from schematic_api.models.project_metadata import ProjectMetadata
from schematic_api import util

from schematic_api.models.project_metadata import ProjectMetadata  # noqa: E501

class ProjectMetadataArray(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, projects=None):  # noqa: E501
        """ProjectMetadataArray - a model defined in OpenAPI

        :param projects: The projects of this ProjectMetadataArray.  # noqa: E501
        :type projects: List[ProjectMetadata]
        """
        self.openapi_types = {
            'projects': List[ProjectMetadata]
        }

        self.attribute_map = {
            'projects': 'projects'
        }

        self._projects = projects

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectMetadataArray':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProjectMetadataArray of this ProjectMetadataArray.  # noqa: E501
        :rtype: ProjectMetadataArray
        """
        return util.deserialize_model(dikt, cls)

    @property
    def projects(self):
        """Gets the projects of this ProjectMetadataArray.

        An array of project metadata.  # noqa: E501

        :return: The projects of this ProjectMetadataArray.
        :rtype: List[ProjectMetadata]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this ProjectMetadataArray.

        An array of project metadata.  # noqa: E501

        :param projects: The projects of this ProjectMetadataArray.
        :type projects: List[ProjectMetadata]
        """

        self._projects = projects
