# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from schematic_api.models.base_model_ import Model
from schematic_api.models.relationship import Relationship
from schematic_api import util

from schematic_api.models.relationship import Relationship  # noqa: E501

class RelationshipsPageAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, relationships=None):  # noqa: E501
        """RelationshipsPageAllOf - a model defined in OpenAPI

        :param relationships: The relationships of this RelationshipsPageAllOf.  # noqa: E501
        :type relationships: List[Relationship]
        """
        self.openapi_types = {
            'relationships': List[Relationship]
        }

        self.attribute_map = {
            'relationships': 'relationships'
        }

        self._relationships = relationships

    @classmethod
    def from_dict(cls, dikt) -> 'RelationshipsPageAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RelationshipsPage_allOf of this RelationshipsPageAllOf.  # noqa: E501
        :rtype: RelationshipsPageAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def relationships(self):
        """Gets the relationships of this RelationshipsPageAllOf.

        A list of relationships  # noqa: E501

        :return: The relationships of this RelationshipsPageAllOf.
        :rtype: List[Relationship]
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this RelationshipsPageAllOf.

        A list of relationships  # noqa: E501

        :param relationships: The relationships of this RelationshipsPageAllOf.
        :type relationships: List[Relationship]
        """
        if relationships is None:
            raise ValueError("Invalid value for `relationships`, must not be `None`")  # noqa: E501

        self._relationships = relationships
