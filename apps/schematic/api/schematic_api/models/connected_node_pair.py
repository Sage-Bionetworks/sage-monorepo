# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from schematic_api.models.base_model_ import Model
from schematic_api import util


class ConnectedNodePair(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node1=None, node2=None):  # noqa: E501
        """ConnectedNodePair - a model defined in OpenAPI

        :param node1: The node1 of this ConnectedNodePair.  # noqa: E501
        :type node1: str
        :param node2: The node2 of this ConnectedNodePair.  # noqa: E501
        :type node2: str
        """
        self.openapi_types = {
            'node1': str,
            'node2': str
        }

        self.attribute_map = {
            'node1': 'node1',
            'node2': 'node2'
        }

        self._node1 = node1
        self._node2 = node2

    @classmethod
    def from_dict(cls, dikt) -> 'ConnectedNodePair':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConnectedNodePair of this ConnectedNodePair.  # noqa: E501
        :rtype: ConnectedNodePair
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node1(self):
        """Gets the node1 of this ConnectedNodePair.

        The disaplay name of the first node.  # noqa: E501

        :return: The node1 of this ConnectedNodePair.
        :rtype: str
        """
        return self._node1

    @node1.setter
    def node1(self, node1):
        """Sets the node1 of this ConnectedNodePair.

        The disaplay name of the first node.  # noqa: E501

        :param node1: The node1 of this ConnectedNodePair.
        :type node1: str
        """
        if node1 is None:
            raise ValueError("Invalid value for `node1`, must not be `None`")  # noqa: E501

        self._node1 = node1

    @property
    def node2(self):
        """Gets the node2 of this ConnectedNodePair.

        The display name of the second node.  # noqa: E501

        :return: The node2 of this ConnectedNodePair.
        :rtype: str
        """
        return self._node2

    @node2.setter
    def node2(self, node2):
        """Sets the node2 of this ConnectedNodePair.

        The display name of the second node.  # noqa: E501

        :param node2: The node2 of this ConnectedNodePair.
        :type node2: str
        """
        if node2 is None:
            raise ValueError("Invalid value for `node2`, must not be `None`")  # noqa: E501

        self._node2 = node2
