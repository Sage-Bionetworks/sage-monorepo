# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from schematic_api.models.base_model_ import Model
from schematic_api.models.node import Node
from schematic_api import util

from schematic_api.models.node import Node  # noqa: E501

class NodeArray(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nodes=None):  # noqa: E501
        """NodeArray - a model defined in OpenAPI

        :param nodes: The nodes of this NodeArray.  # noqa: E501
        :type nodes: List[Node]
        """
        self.openapi_types = {
            'nodes': List[Node]
        }

        self.attribute_map = {
            'nodes': 'nodes'
        }

        self._nodes = nodes

    @classmethod
    def from_dict(cls, dikt) -> 'NodeArray':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NodeArray of this NodeArray.  # noqa: E501
        :rtype: NodeArray
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes(self):
        """Gets the nodes of this NodeArray.

        An array of nodes.  # noqa: E501

        :return: The nodes of this NodeArray.
        :rtype: List[Node]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this NodeArray.

        An array of nodes.  # noqa: E501

        :param nodes: The nodes of this NodeArray.
        :type nodes: List[Node]
        """

        self._nodes = nodes
