# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from schematic_api.models.base_model_ import Model
from schematic_api import util


class ManifestMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, id=None, dataset_name=None, dataset_id=None, component_name=None):  # noqa: E501
        """ManifestMetadata - a model defined in OpenAPI

        :param name: The name of this ManifestMetadata.  # noqa: E501
        :type name: str
        :param id: The id of this ManifestMetadata.  # noqa: E501
        :type id: str
        :param dataset_name: The dataset_name of this ManifestMetadata.  # noqa: E501
        :type dataset_name: str
        :param dataset_id: The dataset_id of this ManifestMetadata.  # noqa: E501
        :type dataset_id: str
        :param component_name: The component_name of this ManifestMetadata.  # noqa: E501
        :type component_name: str
        """
        self.openapi_types = {
            'name': str,
            'id': str,
            'dataset_name': str,
            'dataset_id': str,
            'component_name': str
        }

        self.attribute_map = {
            'name': 'name',
            'id': 'id',
            'dataset_name': 'datasetName',
            'dataset_id': 'datasetId',
            'component_name': 'componentName'
        }

        self._name = name
        self._id = id
        self._dataset_name = dataset_name
        self._dataset_id = dataset_id
        self._component_name = component_name

    @classmethod
    def from_dict(cls, dikt) -> 'ManifestMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ManifestMetadata of this ManifestMetadata.  # noqa: E501
        :rtype: ManifestMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ManifestMetadata.

        The name of the manifest file.  # noqa: E501

        :return: The name of this ManifestMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManifestMetadata.

        The name of the manifest file.  # noqa: E501

        :param name: The name of this ManifestMetadata.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id(self):
        """Gets the id of this ManifestMetadata.

        The id of the manifest file.  # noqa: E501

        :return: The id of this ManifestMetadata.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ManifestMetadata.

        The id of the manifest file.  # noqa: E501

        :param id: The id of this ManifestMetadata.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def dataset_name(self):
        """Gets the dataset_name of this ManifestMetadata.

        The name of the dataset the manifest belongs to.  # noqa: E501

        :return: The dataset_name of this ManifestMetadata.
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this ManifestMetadata.

        The name of the dataset the manifest belongs to.  # noqa: E501

        :param dataset_name: The dataset_name of this ManifestMetadata.
        :type dataset_name: str
        """

        self._dataset_name = dataset_name

    @property
    def dataset_id(self):
        """Gets the dataset_id of this ManifestMetadata.

        The id of the dataset the manifest belongs to.  # noqa: E501

        :return: The dataset_id of this ManifestMetadata.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this ManifestMetadata.

        The id of the dataset the manifest belongs to.  # noqa: E501

        :param dataset_id: The dataset_id of this ManifestMetadata.
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def component_name(self):
        """Gets the component_name of this ManifestMetadata.

        The name of the component the manifest is of.  # noqa: E501

        :return: The component_name of this ManifestMetadata.
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this ManifestMetadata.

        The name of the component the manifest is of.  # noqa: E501

        :param component_name: The component_name of this ManifestMetadata.
        :type component_name: str
        """

        self._component_name = component_name
