# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from schematic_api.models.base_model_ import Model
from schematic_api.models.manifest_metadata import ManifestMetadata
from schematic_api import util

from schematic_api.models.manifest_metadata import ManifestMetadata  # noqa: E501

class ManifestMetadataArray(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, manifests=None):  # noqa: E501
        """ManifestMetadataArray - a model defined in OpenAPI

        :param manifests: The manifests of this ManifestMetadataArray.  # noqa: E501
        :type manifests: List[ManifestMetadata]
        """
        self.openapi_types = {
            'manifests': List[ManifestMetadata]
        }

        self.attribute_map = {
            'manifests': 'manifests'
        }

        self._manifests = manifests

    @classmethod
    def from_dict(cls, dikt) -> 'ManifestMetadataArray':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ManifestMetadataArray of this ManifestMetadataArray.  # noqa: E501
        :rtype: ManifestMetadataArray
        """
        return util.deserialize_model(dikt, cls)

    @property
    def manifests(self):
        """Gets the manifests of this ManifestMetadataArray.

        A list of manifest metadata  # noqa: E501

        :return: The manifests of this ManifestMetadataArray.
        :rtype: List[ManifestMetadata]
        """
        return self._manifests

    @manifests.setter
    def manifests(self, manifests):
        """Sets the manifests of this ManifestMetadataArray.

        A list of manifest metadata  # noqa: E501

        :param manifests: The manifests of this ManifestMetadataArray.
        :type manifests: List[ManifestMetadata]
        """

        self._manifests = manifests
