openapi: 3.0.3
info:
  contact:
    name: Support
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  license:
    name: Apache 2.0
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  title: Schematic REST API
  version: 0.1.0
  x-logo:
    url: https://Sage-Bionetworks.github.io/rocc-schemas/logo.png
servers:
- url: http://localhost/api/v1
tags:
- description: Operations about storages.
  name: Storage
paths:
  /assetTypes/{assetType}/assetViews/{assetViewId}/csv:
    get:
      description: Gets the asset view table in csv file form
      operationId: get_asset_view_csv
      parameters:
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: false
        in: path
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: simple
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      responses:
        "200":
          content:
            text/csv:
              schema:
                type: string
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Gets the asset view table in csv file form
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/assetViews/{assetViewId}/json:
    get:
      description: Gets the asset view table in json form
      operationId: get_asset_view_json
      parameters:
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: false
        in: path
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: simple
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetViewJson'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Gets the asset view table in json form
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/assetViews/{assetViewId}/projectMetadataArray:
    get:
      description: Gets all storage projects the current user has access to.
      operationId: get_project_metadata_array
      parameters:
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: false
        in: path
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: simple
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMetadataArray'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Gets all storage projects the current user has access to.
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/assetViews/{assetViewId}/projectMetadataPage:
    get:
      description: Gets all storage projects the current user has access to.
      operationId: get_project_metadata_page
      parameters:
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: false
        in: path
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: simple
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      - description: The page number to get for a paginated query
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: "The maximum number of items per page (up to 100,000) for paginated\
          \ endpoints"
        explode: true
        in: query
        name: pageMaxItems
        required: false
        schema:
          default: 100000
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMetadataPage'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Gets all storage projects the current user has access to.
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/datasets/{datasetId}/fileMetadataArray:
    get:
      description: Gets all files associated with a dataset.
      operationId: get_dataset_file_metadata_array
      parameters:
      - description: The ID of a dataset.
        explode: false
        in: path
        name: datasetId
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
        style: simple
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      - description: A list of file names used to filter the output.
        explode: true
        in: query
        name: fileNames
        required: false
        schema:
          $ref: '#/components/schemas/FileNames'
        style: form
      - description: "Whether or not to return the full path of output, or just the\
          \ basename."
        explode: true
        in: query
        name: useFullFilePath
        required: false
        schema:
          $ref: '#/components/schemas/UseFullFilePath'
        style: form
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: true
        in: query
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadataArray'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Gets all files associated with a dataset.
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/datasets/{datasetId}/fileMetadataPage:
    get:
      description: Gets all files associated with a dataset.
      operationId: get_dataset_file_metadata_page
      parameters:
      - description: The ID of a dataset.
        explode: false
        in: path
        name: datasetId
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
        style: simple
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      - description: A list of file names used to filter the output.
        explode: true
        in: query
        name: fileNames
        required: false
        schema:
          $ref: '#/components/schemas/FileNames'
        style: form
      - description: "Whether or not to return the full path of output, or just the\
          \ basename."
        explode: true
        in: query
        name: useFullFilePath
        required: false
        schema:
          $ref: '#/components/schemas/UseFullFilePath'
        style: form
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: true
        in: query
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: form
      - description: The page number to get for a paginated query
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: "The maximum number of items per page (up to 100,000) for paginated\
          \ endpoints"
        explode: true
        in: query
        name: pageMaxItems
        required: false
        schema:
          default: 100000
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadataPage'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Gets all files associated with a dataset.
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/datasets/{datasetId}/manifestCsv:
    get:
      description: Gets the manifest in csv form
      operationId: get_dataset_manifest_csv
      parameters:
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      - description: The ID of a dataset.
        explode: false
        in: path
        name: datasetId
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
        style: simple
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: true
        in: query
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: form
      responses:
        "200":
          content:
            text/csv:
              schema:
                type: string
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Gets the manifest in csv form
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/datasets/{datasetId}/manifestJson:
    get:
      description: Gets the manifest in json form
      operationId: get_dataset_manifest_json
      parameters:
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      - description: The ID of a dataset.
        explode: false
        in: path
        name: datasetId
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
        style: simple
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: true
        in: query
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestJson'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Gets the manifest in json form
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/manifests/{manifestId}/csv:
    get:
      description: Gets the manifest in csv form
      operationId: get_manifest_csv
      parameters:
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      - description: ID of a manifest
        explode: false
        in: path
        name: manifestId
        required: true
        schema:
          $ref: '#/components/schemas/ManifestId'
        style: simple
      responses:
        "200":
          content:
            text/csv:
              schema:
                type: string
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Gets the manifest in csv form
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/manifests/{manifestId}/json:
    get:
      description: Gets the manifest in json form
      operationId: get_manifest_json
      parameters:
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      - description: ID of a manifest
        explode: false
        in: path
        name: manifestId
        required: true
        schema:
          $ref: '#/components/schemas/ManifestId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestJson'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Gets the manifest in json form
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/projects/{projectId}/datasetMetadataArray:
    get:
      description: Gets all dataset meatdata in folder under a given storage project
        that the current user has access to.
      operationId: get_project_dataset_metadata_array
      parameters:
      - description: The Synapse ID of a storage project.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
        style: simple
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: true
        in: query
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetMetadataArray'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Gets all dataset metadata in folder under a given storage project that
        the current user has access to.
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/projects/{projectId}/datasetMetadataPage:
    get:
      description: Gets a page of dataset meatdata in folder under a given storage
        project that the current user has access to.
      operationId: get_project_dataset_metadata_page
      parameters:
      - description: The Synapse ID of a storage project.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
        style: simple
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: true
        in: query
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: form
      - description: The page number to get for a paginated query
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: "The maximum number of items per page (up to 100,000) for paginated\
          \ endpoints"
        explode: true
        in: query
        name: pageMaxItems
        required: false
        schema:
          default: 100000
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetMetadataPage'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Gets a page of dataset metadata in folder under a given storage project
        that the current user has access to.
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/projects/{projectId}/manifestMetadataArray:
    get:
      description: Gets all manifests in a project folder that the current user has
        access to.
      operationId: get_project_manifest_metadata_array
      parameters:
      - description: The Synapse ID of a storage project.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
        style: simple
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: true
        in: query
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestMetadataArray'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Gets all manifests in a project folder that users have access to
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/projects/{projectId}/manifestMetadataPage:
    get:
      description: Gets all manifests in a project folder that the current user has
        access to.
      operationId: get_project_manifest_metadata_page
      parameters:
      - description: The Synapse ID of a storage project.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
        style: simple
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: true
        in: query
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: form
      - description: The page number to get for a paginated query
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: "The maximum number of items per page (up to 100,000) for paginated\
          \ endpoints"
        explode: true
        in: query
        name: pageMaxItems
        required: false
        schema:
          default: 100000
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestMetadataPage'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Gets all manifests in a project folder that users have access to
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /components/{componentLabel}/:
    get:
      description: Get all the attributes associated with a specific data model component
        formatted as a dataframe (stored as a JSON String).
      operationId: get_component
      parameters:
      - description: The label of a component in a schema
        explode: false
        in: path
        name: componentLabel
        required: true
        schema:
          $ref: '#/components/schemas/ComponentLabel'
        style: simple
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: Whether to include the indexes of the dataframe in the returned
          JSON string.
        explode: true
        in: query
        name: includeIndex
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The component as a json string
                type: string
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get all the attributes associated with a specific data model component
        formatted as a dataframe (stored as a JSON String).
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /components/{componentLabel}/requirementsArray:
    get:
      description: "Given a source model component (see https://w3id.org/biolink/vocab/category\
        \ for definnition of component), return all components required by it in array\
        \ form."
      operationId: get_component_requirements_array
      parameters:
      - description: The label of a component in a schema
        explode: false
        in: path
        name: componentLabel
        required: true
        schema:
          $ref: '#/components/schemas/ComponentLabel'
        style: simple
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentRequirementArray'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: "Given a source model component (see https://w3id.org/biolink/vocab/category\
        \ for definnition of component), return all components required by it in array\
        \ form."
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /components/{componentLabel}/requirementsGraph:
    get:
      description: "Given a source model component (see https://w3id.org/biolink/vocab/category\
        \ for definnition of component), return all components required by it in graph\
        \ form."
      operationId: get_component_requirements_graph
      parameters:
      - description: The label of a component in a schema
        explode: false
        in: path
        name: componentLabel
        required: true
        schema:
          $ref: '#/components/schemas/ComponentLabel'
        style: simple
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentRequirementGraph'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: "Given a source model component (see https://w3id.org/biolink/vocab/category\
        \ for definnition of component), return all components required by it in graph\
        \ form."
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /connectedNodePairArray:
    get:
      description: Gets a array of connected node pairs
      operationId: get_connected_node_pair_array
      parameters:
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: "Type of relationship in a schema, such as requiresDependency"
        explode: true
        in: query
        name: relationshipType
        required: true
        schema:
          $ref: '#/components/schemas/RelationshipType'
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectedNodePairArray'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets an array of connected node pairs
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /connectedNodePairPage:
    get:
      description: Gets a page of connected node pairs
      operationId: get_connected_node_pair_page
      parameters:
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: "Type of relationship in a schema, such as requiresDependency"
        explode: true
        in: query
        name: relationshipType
        required: true
        schema:
          $ref: '#/components/schemas/RelationshipType'
        style: form
      - description: The page number to get for a paginated query
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: "The maximum number of items per page (up to 100,000) for paginated\
          \ endpoints"
        explode: true
        in: query
        name: pageMaxItems
        required: false
        schema:
          default: 100000
          minimum: 1
          type: integer
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectedNodePairPage'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets a page of connected node pairs
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /generateGoogleSheetManifests:
    get:
      description: Generates a list of google sheet links
      operationId: generate_google_sheet_manifests
      parameters:
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: "If true, annotations are added to the manifest"
        explode: true
        in: query
        name: addAnnotations
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: An array of dataset ids
        explode: true
        in: query
        name: datasetIdArray
        required: false
        schema:
          $ref: '#/components/schemas/DatasetIdArray'
        style: form
      - description: "If making one manifest, the title of the manifest. If making\
          \ multiple manifests, the prefix of the title of the manifests."
        explode: true
        in: query
        name: manifestTitle
        required: false
        schema:
          type: string
        style: form
      - description: An array of data types
        explode: true
        in: query
        name: dataTypeArray
        required: false
        schema:
          $ref: '#/components/schemas/DataTypeArray'
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      - description: "If true, users are blocked from entering incorrect values. If\
          \ false, users will get a warning when using incorrect values."
        explode: true
        in: query
        name: useStrictValidation
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: true
        in: query
        name: assetViewId
        required: false
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: form
      - description: "If true, a manifest for all components will be generated, datasetIds\
          \ will be ignored. If false, manifests for each id in datasetIds will be\
          \ generated."
        explode: true
        in: query
        name: generateAllManifests
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleSheetLinks'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Generates a list of google sheet links
      tags:
      - ManifestGeneration
      x-openapi-router-controller: schematic_api.controllers.manifest_generation_controller
  /nodes/{nodeDisplay}/isRequired:
    get:
      description: Gets whether or not the node is required in the schema
      operationId: get_node_is_required
      parameters:
      - description: The display name of the node in a schema
        explode: false
        in: path
        name: nodeDisplay
        required: true
        schema:
          $ref: '#/components/schemas/NodeDisplay'
        style: simple
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Whether or not the node is required in the schema
                type: boolean
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets whether or not the node is required in the schema
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /nodes/{nodeDisplay}/propertyLabel:
    get:
      description: Gets the property label of the node
      operationId: get_property_label
      parameters:
      - description: The display name of the node in a schema
        explode: false
        in: path
        name: nodeDisplay
        required: true
        schema:
          $ref: '#/components/schemas/NodeDisplay'
        style: simple
      - description: Whether or not to use the more strict way of converting to camel
          case
        explode: true
        in: query
        name: useStrictCamelCase
        required: false
        schema:
          $ref: '#/components/schemas/UseStrictCamelCase'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyLabel'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets the property label of the node
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /nodes/{nodeDisplay}/validationRules:
    get:
      description: "Gets the validation rules, along with the arguments for each given\
        \ rule associated with a given node"
      operationId: get_node_validation_rules
      parameters:
      - description: The display name of the node in a schema
        explode: false
        in: path
        name: nodeDisplay
        required: true
        schema:
          $ref: '#/components/schemas/NodeDisplay'
        style: simple
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationRuleArray'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: "Gets the validation rules, along with the arguments for each given\
        \ rule associated with a given node"
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /nodes/{nodeLabel}/dependencyArray:
    get:
      description: Gets the immediate dependencies that are related to the given source
        node
      operationId: get_node_dependency_array
      parameters:
      - description: The label of the source node in a schema to get the dependencies
          of
        explode: false
        in: path
        name: nodeLabel
        required: true
        schema:
          $ref: '#/components/schemas/NodeLabel'
        style: simple
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: "Whether or not to return the display names of the component,\
          \ otherwise the label"
        explode: true
        in: query
        name: returnDisplayNames
        required: false
        schema:
          $ref: '#/components/schemas/ReturnDisplayNames'
        style: form
      - description: "Whether or not to order the components by their order in the\
          \ schema, otherwise random"
        explode: true
        in: query
        name: returnOrderedBySchema
        required: false
        schema:
          $ref: '#/components/schemas/ReturnOrderedBySchema'
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeArray'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets the immediate dependencies that are related to the given source
        node
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /nodes/{nodeLabel}/dependencyPage:
    get:
      description: Gets the immediate dependencies that are related to the given source
        node
      operationId: get_node_dependency_page
      parameters:
      - description: The label of the source node in a schema to get the dependencies
          of
        explode: false
        in: path
        name: nodeLabel
        required: true
        schema:
          $ref: '#/components/schemas/NodeLabel'
        style: simple
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: "Whether or not to return the display names of the component,\
          \ otherwise the label"
        explode: true
        in: query
        name: returnDisplayNames
        required: false
        schema:
          $ref: '#/components/schemas/ReturnDisplayNames'
        style: form
      - description: "Whether or not to order the components by their order in the\
          \ schema, otherwise random"
        explode: true
        in: query
        name: returnOrderedBySchema
        required: false
        schema:
          $ref: '#/components/schemas/ReturnOrderedBySchema'
        style: form
      - description: The page number to get for a paginated query
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: "The maximum number of items per page (up to 100,000) for paginated\
          \ endpoints"
        explode: true
        in: query
        name: pageMaxItems
        required: false
        schema:
          default: 100000
          minimum: 1
          type: integer
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodePage'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets the immediate dependencies that are related to the given source
        node
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /nodes/{nodeLabel}/nodeProperties:
    get:
      description: Gets properties associated with a given node
      operationId: get_node_properties
      parameters:
      - description: The label of the source node in a schema to get the dependencies
          of
        explode: false
        in: path
        name: nodeLabel
        required: true
        schema:
          $ref: '#/components/schemas/NodeLabel'
        style: simple
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodePropertyArray'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets properties associated with a given node
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /schemaAttributes:
    get:
      description: Get all the attributes associated with a data model formatted as
        a dataframe (stored as a JSON String).
      operationId: get_schema_attributes
      parameters:
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The schema as a json string
                type: string
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get all the attributes associated with a data model formatted as a
        dataframe (stored as a JSON String).
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /schematicVersion:
    get:
      description: Gets the version of the schematic library currently used by the
        API
      operationId: get_schematic_version
      responses:
        "200":
          content:
            application/json:
              schema:
                example: v21.1.1
                type: string
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets the version of the schematic library currently used by the API
      tags:
      - Versions
      x-openapi-router-controller: schematic_api.controllers.versions_controller
  /submitManifestCsv:
    post:
      description: "Validates manifest in csv form, then submits it"
      operationId: submit_manifest_csv
      parameters:
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: "A component in a schema, either the dsplay label or schema label"
        explode: true
        in: query
        name: component
        required: true
        schema:
          type: string
        style: form
      - description: "If True, validation suite will only run with in-house validation\
          \ rule. If False, the Great Expectations suite will be utilized and all\
          \ rules will be available."
        explode: true
        in: query
        name: restrictRules
        required: false
        schema:
          $ref: '#/components/schemas/RestrictRules'
        style: form
      - description: The ID of a dataset.
        explode: true
        in: query
        name: datasetId
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
        style: form
      - description: file_and_entities will store the manifest as a csv and create
          Synapse files for each row in the manifest. table_and_file will store the
          manifest as a table and a csv on Synapse. file_only will store the manifest
          as a csv only on Synapse. table_file_and_entities will perform the options
          file_with_entites and table in combination.
        explode: true
        in: query
        name: storageMethod
        required: false
        schema:
          default: table_file_and_entities
          enum:
          - file_and_entities
          - table_and_file
          - file_only
          - table_file_and_entities
          type: string
        style: form
      - description: "If true, annotations with blank values will be hidden from a\
          \ dataset's annotation list in Synaspe. If false, annotations with blank\
          \ values will be displayed."
        explode: true
        in: query
        name: hideBlanks
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: true
        in: query
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: form
      - description: "replace will remove the rows and columns from the existing table\
          \ and store the new rows and columns, preserving the name and synID. upsert\
          \ will add the new rows to the table and preserve the exisitng rows and\
          \ columns in the existing table."
        explode: true
        in: query
        name: tableManipulationMethod
        required: false
        schema:
          default: replace
          enum:
          - replace
          - upsert
          type: string
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      - description: The labeling style for annotation keys.
        explode: true
        in: query
        name: annotationKeyStyle
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      - description: The labeling syle for table column names.
        explode: true
        in: query
        name: tableColumnNameStyle
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          - display_name
          type: string
        style: form
      requestBody:
        content:
          application/csv:
            schema:
              format: binary
              type: string
        description: .csv file
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestId'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: "Validates manifest in csv form, then submits it"
      tags:
      - ManifestValidation
      x-openapi-router-controller: schematic_api.controllers.manifest_validation_controller
  /submitManifestJson:
    post:
      description: "Validates a manifest in json form, then submits it in csv form"
      operationId: submit_manifest_json
      parameters:
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: "A component in a schema, either the dsplay label or schema label"
        explode: true
        in: query
        name: component
        required: true
        schema:
          type: string
        style: form
      - description: "If True, validation suite will only run with in-house validation\
          \ rule. If False, the Great Expectations suite will be utilized and all\
          \ rules will be available."
        explode: true
        in: query
        name: restrictRules
        required: false
        schema:
          $ref: '#/components/schemas/RestrictRules'
        style: form
      - description: The ID of a dataset.
        explode: true
        in: query
        name: datasetId
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
        style: form
      - description: file_and_entities will store the manifest as a csv and create
          Synapse files for each row in the manifest. table_and_file will store the
          manifest as a table and a csv on Synapse. file_only will store the manifest
          as a csv only on Synapse. table_file_and_entities will perform the options
          file_with_entites and table in combination.
        explode: true
        in: query
        name: storageMethod
        required: false
        schema:
          default: table_file_and_entities
          enum:
          - file_and_entities
          - table_and_file
          - file_only
          - table_file_and_entities
          type: string
        style: form
      - description: "If true, annotations with blank values will be hidden from a\
          \ dataset's annotation list in Synaspe. If false, annotations with blank\
          \ values will be displayed."
        explode: true
        in: query
        name: hideBlanks
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: true
        in: query
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: form
      - description: "replace will remove the rows and columns from the existing table\
          \ and store the new rows and columns, preserving the name and synID. upsert\
          \ will add the new rows to the table and preserve the exisitng rows and\
          \ columns in the existing table."
        explode: true
        in: query
        name: tableManipulationMethod
        required: false
        schema:
          default: replace
          enum:
          - replace
          - upsert
          type: string
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      - description: The labeling style for annotation keys.
        explode: true
        in: query
        name: annotationKeyStyle
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      - description: The labeling syle for table column names.
        explode: true
        in: query
        name: tableColumnNameStyle
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          - display_name
          type: string
        style: form
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: A manifest in json form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestId'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: "Validates a manifest in json form, then submits it"
      tags:
      - ManifestValidation
      x-openapi-router-controller: schematic_api.controllers.manifest_validation_controller
  /tangledTreeLayers:
    get:
      description: Get tangled tree node layers to display for a given data model
        and figure type
      operationId: get_tangled_tree_layers
      parameters:
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: Figure type to generate.
        explode: true
        in: query
        name: figureType
        required: false
        schema:
          default: component
          enum:
          - component
          - dependency
          type: string
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TangledTreeLayers'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get tangled tree node layers to display for a given data model and
        figure type
      tags:
      - TangledTree
      x-openapi-router-controller: schematic_api.controllers.tangled_tree_controller
  /tangledTreeText:
    get:
      description: "Get tangled tree plain or highlighted text to display for a given\
        \ data model, text formatting and figure type"
      operationId: get_tangled_tree_text
      parameters:
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: Figure type to generate.
        explode: true
        in: query
        name: figureType
        required: false
        schema:
          default: component
          enum:
          - component
          - dependency
          type: string
        style: form
      - description: Text formatting type.
        explode: true
        in: query
        name: textFormat
        required: false
        schema:
          default: plain
          enum:
          - plain
          - highlighted
          type: string
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TangledTreeText'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: "Get tangled tree plain or highlighted text to display for a given\
        \ data model, text formatting and figure type"
      tags:
      - TangledTree
      x-openapi-router-controller: schematic_api.controllers.tangled_tree_controller
  /validateManifestCsv:
    post:
      description: Validates a manifest in csv form
      operationId: validate_manifest_csv
      parameters:
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: The label of a component in a schema
        explode: true
        in: query
        name: componentLabel
        required: true
        schema:
          $ref: '#/components/schemas/ComponentLabel'
        style: form
      - description: "If True, validation suite will only run with in-house validation\
          \ rule. If False, the Great Expectations suite will be utilized and all\
          \ rules will be available."
        explode: true
        in: query
        name: restrictRules
        required: false
        schema:
          $ref: '#/components/schemas/RestrictRules'
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      requestBody:
        content:
          application/csv:
            schema:
              format: binary
              type: string
        description: .csv file
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestValidationResult'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
      - bearerAuth: []
      summary: Validates a manifest in csv form
      tags:
      - ManifestValidation
      x-openapi-router-controller: schematic_api.controllers.manifest_validation_controller
  /validateManifestJson:
    post:
      description: Validates a manifest in json form
      operationId: validate_manifest_json
      parameters:
      - description: The URL of a schema in jsonld or csv form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: The label of a component in a schema
        explode: true
        in: query
        name: componentLabel
        required: true
        schema:
          $ref: '#/components/schemas/ComponentLabel'
        style: form
      - description: "If True, validation suite will only run with in-house validation\
          \ rule. If False, the Great Expectations suite will be utilized and all\
          \ rules will be available."
        explode: true
        in: query
        name: restrictRules
        required: false
        schema:
          $ref: '#/components/schemas/RestrictRules'
        style: form
      - description: The type of label to display
        explode: true
        in: query
        name: displayLabelType
        required: false
        schema:
          default: class_label
          enum:
          - class_label
          - display_label
          type: string
        style: form
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: A manifest in json form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestValidationResult'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Validates a manifest in json form
      tags:
      - ManifestValidation
      x-openapi-router-controller: schematic_api.controllers.manifest_validation_controller
components:
  parameters:
    projectId:
      description: The Synapse ID of a storage project.
      explode: false
      in: path
      name: projectId
      required: true
      schema:
        $ref: '#/components/schemas/ProjectId'
      style: simple
    assetType:
      description: "Type of asset, such as Synapse"
      explode: false
      in: path
      name: assetType
      required: true
      schema:
        $ref: '#/components/schemas/AssetType'
      style: simple
    assetViewIdQuery:
      description: ID of view listing all project data assets. E.g. for Synapse this
        would be the Synapse ID of the fileview listing all data assets for a given
        project
      explode: true
      in: query
      name: assetViewId
      required: true
      schema:
        $ref: '#/components/schemas/AssetViewId'
      style: form
    pageNumber:
      description: The page number to get for a paginated query
      explode: true
      in: query
      name: pageNumber
      required: false
      schema:
        default: 1
        minimum: 1
        type: integer
      style: form
    pageMaxItems:
      description: "The maximum number of items per page (up to 100,000) for paginated\
        \ endpoints"
      explode: true
      in: query
      name: pageMaxItems
      required: false
      schema:
        default: 100000
        minimum: 1
        type: integer
      style: form
    assetViewId:
      description: ID of view listing all project data assets. E.g. for Synapse this
        would be the Synapse ID of the fileview listing all data assets for a given
        project
      explode: false
      in: path
      name: assetViewId
      required: true
      schema:
        $ref: '#/components/schemas/AssetViewId'
      style: simple
    datasetId:
      description: The ID of a dataset.
      explode: false
      in: path
      name: datasetId
      required: true
      schema:
        $ref: '#/components/schemas/DatasetId'
      style: simple
    fileNames:
      description: A list of file names used to filter the output.
      explode: true
      in: query
      name: fileNames
      required: false
      schema:
        $ref: '#/components/schemas/FileNames'
      style: form
    useFullFilePath:
      description: "Whether or not to return the full path of output, or just the\
        \ basename."
      explode: true
      in: query
      name: useFullFilePath
      required: false
      schema:
        $ref: '#/components/schemas/UseFullFilePath'
      style: form
    manifestId:
      description: ID of a manifest
      explode: false
      in: path
      name: manifestId
      required: true
      schema:
        $ref: '#/components/schemas/ManifestId'
      style: simple
    nodeLabel:
      description: The label of the source node in a schema to get the dependencies
        of
      explode: false
      in: path
      name: nodeLabel
      required: true
      schema:
        $ref: '#/components/schemas/NodeLabel'
      style: simple
    schemaUrl:
      description: The URL of a schema in jsonld or csv form
      explode: true
      in: query
      name: schemaUrl
      required: true
      schema:
        $ref: '#/components/schemas/SchemaUrl'
      style: form
    returnDisplayNames:
      description: "Whether or not to return the display names of the component, otherwise\
        \ the label"
      explode: true
      in: query
      name: returnDisplayNames
      required: false
      schema:
        $ref: '#/components/schemas/ReturnDisplayNames'
      style: form
    returnOrderedBySchema:
      description: "Whether or not to order the components by their order in the schema,\
        \ otherwise random"
      explode: true
      in: query
      name: returnOrderedBySchema
      required: false
      schema:
        $ref: '#/components/schemas/ReturnOrderedBySchema'
      style: form
    displayLabelType:
      description: The type of label to display
      explode: true
      in: query
      name: displayLabelType
      required: false
      schema:
        default: class_label
        enum:
        - class_label
        - display_label
        type: string
      style: form
    nodeDisplay:
      description: The display name of the node in a schema
      explode: false
      in: path
      name: nodeDisplay
      required: true
      schema:
        $ref: '#/components/schemas/NodeDisplay'
      style: simple
    useStrictCamelCase:
      description: Whether or not to use the more strict way of converting to camel
        case
      explode: true
      in: query
      name: useStrictCamelCase
      required: false
      schema:
        $ref: '#/components/schemas/UseStrictCamelCase'
      style: form
    componentLabel:
      description: The label of a component in a schema
      explode: false
      in: path
      name: componentLabel
      required: true
      schema:
        $ref: '#/components/schemas/ComponentLabel'
      style: simple
    includeIndex:
      description: Whether to include the indexes of the dataframe in the returned
        JSON string.
      explode: true
      in: query
      name: includeIndex
      required: false
      schema:
        default: false
        type: boolean
      style: form
    relationshipType:
      description: "Type of relationship in a schema, such as requiresDependency"
      explode: true
      in: query
      name: relationshipType
      required: true
      schema:
        $ref: '#/components/schemas/RelationshipType'
      style: form
    componentLabelQuery:
      description: The label of a component in a schema
      explode: true
      in: query
      name: componentLabel
      required: true
      schema:
        $ref: '#/components/schemas/ComponentLabel'
      style: form
    restrictRules:
      description: "If True, validation suite will only run with in-house validation\
        \ rule. If False, the Great Expectations suite will be utilized and all rules\
        \ will be available."
      explode: true
      in: query
      name: restrictRules
      required: false
      schema:
        $ref: '#/components/schemas/RestrictRules'
      style: form
    component:
      description: "A component in a schema, either the dsplay label or schema label"
      explode: true
      in: query
      name: component
      required: true
      schema:
        type: string
      style: form
    datasetIdQuery:
      description: The ID of a dataset.
      explode: true
      in: query
      name: datasetId
      required: true
      schema:
        $ref: '#/components/schemas/DatasetId'
      style: form
    storageMethod:
      description: file_and_entities will store the manifest as a csv and create Synapse
        files for each row in the manifest. table_and_file will store the manifest
        as a table and a csv on Synapse. file_only will store the manifest as a csv
        only on Synapse. table_file_and_entities will perform the options file_with_entites
        and table in combination.
      explode: true
      in: query
      name: storageMethod
      required: false
      schema:
        default: table_file_and_entities
        enum:
        - file_and_entities
        - table_and_file
        - file_only
        - table_file_and_entities
        type: string
      style: form
    hideBlanks:
      description: "If true, annotations with blank values will be hidden from a dataset's\
        \ annotation list in Synaspe. If false, annotations with blank values will\
        \ be displayed."
      explode: true
      in: query
      name: hideBlanks
      required: false
      schema:
        default: false
        type: boolean
      style: form
    tableManipulationMethod:
      description: "replace will remove the rows and columns from the existing table\
        \ and store the new rows and columns, preserving the name and synID. upsert\
        \ will add the new rows to the table and preserve the exisitng rows and columns\
        \ in the existing table."
      explode: true
      in: query
      name: tableManipulationMethod
      required: false
      schema:
        default: replace
        enum:
        - replace
        - upsert
        type: string
      style: form
    annotationKeyStyle:
      description: The labeling style for annotation keys.
      explode: true
      in: query
      name: annotationKeyStyle
      required: false
      schema:
        default: class_label
        enum:
        - class_label
        - display_label
        type: string
      style: form
    tableColumnNameStyle:
      description: The labeling syle for table column names.
      explode: true
      in: query
      name: tableColumnNameStyle
      required: false
      schema:
        default: class_label
        enum:
        - class_label
        - display_label
        - display_name
        type: string
      style: form
    figureType:
      description: Figure type to generate.
      explode: true
      in: query
      name: figureType
      required: false
      schema:
        default: component
        enum:
        - component
        - dependency
        type: string
      style: form
    textFormat:
      description: Text formatting type.
      explode: true
      in: query
      name: textFormat
      required: false
      schema:
        default: plain
        enum:
        - plain
        - highlighted
        type: string
      style: form
    addAnnotations:
      description: "If true, annotations are added to the manifest"
      explode: true
      in: query
      name: addAnnotations
      required: false
      schema:
        default: false
        type: boolean
      style: form
    datasetIdArray:
      description: An array of dataset ids
      explode: true
      in: query
      name: datasetIdArray
      required: false
      schema:
        $ref: '#/components/schemas/DatasetIdArray'
      style: form
    manifestTitle:
      description: "If making one manifest, the title of the manifest. If making multiple\
        \ manifests, the prefix of the title of the manifests."
      explode: true
      in: query
      name: manifestTitle
      required: false
      schema:
        type: string
      style: form
    dataTypeArray:
      description: An array of data types
      explode: true
      in: query
      name: dataTypeArray
      required: false
      schema:
        $ref: '#/components/schemas/DataTypeArray'
      style: form
    useStrictValidation:
      description: "If true, users are blocked from entering incorrect values. If\
        \ false, users will get a warning when using incorrect values."
      explode: true
      in: query
      name: useStrictValidation
      required: false
      schema:
        default: true
        type: boolean
      style: form
  responses:
    InternalServerError:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The request cannot be fulfilled due to an unexpected server error
    BadRequest:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: Invalid request
    Unauthorized:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: Unauthorized
    NotFound:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The specified resource was not found
  schemas:
    BasicError:
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          description: A human readable documentation for the problem type
          title: title
          type: string
        status:
          description: The HTTP status code
          title: status
          type: integer
        detail:
          description: A human readable explanation specific to this occurrence of
            the problem
          title: detail
          type: string
        type:
          description: An absolute URI that identifies the problem type
          title: type
          type: string
      required:
      - status
      - title
      title: BasicError
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    ProjectId:
      description: A project ID.
      example: syn26251192
      type: string
    AssetType:
      description: "Type of asset store, such as Synapse"
      enum:
      - synapse
      example: synapse
      title: AssetType
      type: string
    AssetViewId:
      description: An asset view ID.
      example: syn23643253
      type: string
    DatasetMetadata:
      description: The metadata of a dataset.
      example:
        name: Example dataset
        id: Syn1
      properties:
        name:
          description: The name of the dataset.
          example: Example dataset
          title: name
          type: string
        id:
          description: The ID of the dataset.
          example: Syn1
          title: id
          type: string
      required:
      - id
      - name
      title: DatasetMetadata
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    DatasetMetadataArray:
      description: An array of dataset metadata.
      example:
        datasets:
        - name: Example dataset
          id: Syn1
        - name: Example dataset
          id: Syn1
      properties:
        datasets:
          description: An array of dataset meatdata.
          items:
            $ref: '#/components/schemas/DatasetMetadata'
          title: datasets
          type: array
      title: DatasetMetadataArray
      type: object
    PageMetadata:
      description: The metadata of a page.
      properties:
        number:
          description: The page number.
          example: 99
          format: int32
          title: number
          type: integer
        size:
          description: The number of items in a single page.
          example: 99
          format: int32
          title: size
          type: integer
        totalElements:
          description: Total number of elements in the result set.
          example: 99
          format: int64
          title: totalElements
          type: integer
        totalPages:
          description: Total number of pages in the result set.
          example: 99
          format: int32
          title: totalPages
          type: integer
        hasNext:
          description: Returns if there is a next page.
          example: true
          title: hasNext
          type: boolean
        hasPrevious:
          description: Returns if there is a previous page.
          example: true
          title: hasPrevious
          type: boolean
      required:
      - hasNext
      - hasPrevious
      - number
      - size
      - totalElements
      - totalPages
      title: PageMetadata
      type: object
    DatasetMetadataPage:
      allOf:
      - $ref: '#/components/schemas/PageMetadata'
      - $ref: '#/components/schemas/DatasetMetadataPage_allOf'
      description: A page of dataset metadata.
      title: DatasetMetadataPage
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    ManifestMetadata:
      description: The metadata for a manifest file
      example:
        name: synapse_storage_manifest.csv
        datasetName: dataset_X
        datasetId: syn2
        id: syn1
        componentName: patient
      properties:
        name:
          description: The name of the manifest file.
          example: synapse_storage_manifest.csv
          title: name
          type: string
        id:
          description: The id of the manifest file.
          example: syn1
          title: id
          type: string
        datasetName:
          description: The name of the dataset the manifest belongs to.
          example: dataset_X
          title: datasetName
          type: string
        datasetId:
          description: The id of the dataset the manifest belongs to.
          example: syn2
          title: datasetId
          type: string
        componentName:
          description: The name of the component the manifest is of.
          example: patient
          title: componentName
          type: string
      required:
      - id
      - name
      title: ManifestMetadata
      type: object
    ManifestMetadataArray:
      description: An array of manifest metadata
      example:
        manifests:
        - name: synapse_storage_manifest.csv
          datasetName: dataset_X
          datasetId: syn2
          id: syn1
          componentName: patient
        - name: synapse_storage_manifest.csv
          datasetName: dataset_X
          datasetId: syn2
          id: syn1
          componentName: patient
      properties:
        manifests:
          description: A list of manifest metadata
          items:
            $ref: '#/components/schemas/ManifestMetadata'
          title: manifests
          type: array
      title: ManifestMetadataArray
      type: object
    ManifestMetadataPage:
      allOf:
      - $ref: '#/components/schemas/PageMetadata'
      - $ref: '#/components/schemas/ManifestMetadataPage_allOf'
      description: A page of manifest metadata
      title: ManifestMetadataPage
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    AssetViewJson:
      description: An asset view in json format
      type: object
    DatasetId:
      description: A dataset ID.
      example: syn23643250
      title: DatasetId
      type: string
    ManifestJson:
      description: A manifest in json format
      type: object
    ProjectMetadata:
      description: The metadata for a project
      example:
        name: Example project
        id: Syn1
      properties:
        name:
          description: The name of the project.
          example: Example project
          title: name
          type: string
        id:
          description: The ID of the project.
          example: Syn1
          title: id
          type: string
      required:
      - id
      - name
      title: ProjectMetadata
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    ProjectMetadataArray:
      description: An array of project metadata.
      example:
        projects:
        - name: Example project
          id: Syn1
        - name: Example project
          id: Syn1
      properties:
        projects:
          description: An array of project metadata.
          items:
            $ref: '#/components/schemas/ProjectMetadata'
          title: projects
          type: array
      title: ProjectMetadataArray
      type: object
    ProjectMetadataPage:
      allOf:
      - $ref: '#/components/schemas/PageMetadata'
      - $ref: '#/components/schemas/ProjectMetadataPage_allOf'
      description: A page of project metadata.
      title: ProjectMetadataPage
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    FileNames:
      description: A list of file names.
      items:
        type: string
      type: array
    UseFullFilePath:
      default: false
      description: "Whether or not to return the full path of output, or just the\
        \ basename."
      type: boolean
    FileMetadata:
      description: The metadata for a file
      example:
        name: file.txt
        id: Syn1
      properties:
        name:
          description: The name of the file.
          example: file.txt
          title: name
          type: string
        id:
          description: The ID of the file.
          example: Syn1
          title: id
          type: string
      required:
      - id
      - name
      title: FileMetadata
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    FileMetadataArray:
      description: A list of file metadata.
      example:
        files:
        - name: file.txt
          id: Syn1
        - name: file.txt
          id: Syn1
      properties:
        files:
          description: A list of file metadata.
          items:
            $ref: '#/components/schemas/FileMetadata'
          title: files
          type: array
      title: FileMetadataArray
      type: object
    FileMetadataPage:
      allOf:
      - $ref: '#/components/schemas/PageMetadata'
      - $ref: '#/components/schemas/FileMetadataPage_allOf'
      description: A page of file metadata.
      title: FileMetadataPage
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    ManifestId:
      description: A manifest ID.
      example: syn51078535
      type: string
    NodeLabel:
      description: The label of a node in a schema
      example: MolecularEntity
      type: string
    SchemaUrl:
      description: The URL of a schema in jsonld form
      example: https://raw.githubusercontent.com/Sage-Bionetworks/schematic/develop/tests/data/example.model.jsonld
      type: string
    ReturnDisplayNames:
      default: true
      description: Whether or not to return the display names of the node otherwise
        the label
      type: boolean
    ReturnOrderedBySchema:
      default: true
      description: "Whether or not to order the components by their order in the schema,\
        \ otherwise random"
      type: boolean
    Node:
      description: A node of a schema.
      example:
        name: Patient
      properties:
        name:
          description: The name of the node.
          example: Patient
          title: name
          type: string
      required:
      - name
      title: Node
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    NodeArray:
      description: An array of nodes.
      example:
        nodes:
        - name: Patient
        - name: Patient
      properties:
        nodes:
          description: An array of nodes.
          items:
            $ref: '#/components/schemas/Node'
          title: nodes
          type: array
      title: NodeArray
      type: object
    NodePage:
      allOf:
      - $ref: '#/components/schemas/PageMetadata'
      - $ref: '#/components/schemas/NodePage_allOf'
      description: A page of nodes.
      title: NodePage
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    NodeDisplay:
      description: The display name of a node in a schema
      example: MolecularEntity
      type: string
    NodePropertyArray:
      description: An array of node properties.
      example:
        node_properties:
        - node_properties
        - node_properties
      properties:
        node_properties:
          description: An array of node properties.
          items:
            type: string
          title: node_properties
          type: array
      title: NodePropertyArray
      type: object
    UseStrictCamelCase:
      default: true
      description: Whether or not to use the more strict way of converting to camel
        case
      type: boolean
    PropertyLabel:
      description: The property label of a node in a schema
      example: MolecularEntity
      type: string
    ValidationRule:
      description: A validation rule.
      example:
        name: list strict
      properties:
        name:
          description: "The name of the rule, along with the arguments for the given\
            \ rule."
          example: list strict
          title: name
          type: string
      required:
      - name
      title: ValidationRule
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    ValidationRuleArray:
      description: An array of validation rules.
      example:
        validation_rules:
        - name: list strict
        - name: list strict
      properties:
        validation_rules:
          description: An array of validation rules.
          items:
            $ref: '#/components/schemas/ValidationRule'
          title: validation_rules
          type: array
      title: ValidationRuleArray
      type: object
    ComponentLabel:
      description: The label of a component in a schema
      example: Patient
      type: string
    ComponentRequirementArray:
      description: An array of components
      example:
        componentRequirementsList:
        - componentRequirementsList
        - componentRequirementsList
      properties:
        componentRequirementsList:
          items:
            type: string
          title: componentRequirementsList
          type: array
      title: ComponentRequirementArray
      type: object
    ComponentRequirementSubgraph:
      description: A pair of components
      example:
        component1: component1
        component2: component2
      properties:
        component1:
          description: The display name of the first component in the graph
          example: component1
          title: component1
          type: string
        component2:
          description: The display name of the second component in the graph
          example: component2
          title: component2
          type: string
      required:
      - component1
      - component2
      title: ComponentRequirementSubgraph
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    ComponentRequirementGraph:
      description: A graph of components
      example:
        componentRequirementsGraph:
        - component1: component1
          component2: component2
        - component1: component1
          component2: component2
      properties:
        componentRequirementsGraph:
          items:
            $ref: '#/components/schemas/ComponentRequirementSubgraph'
          title: componentRequirementsGraph
          type: array
      title: ComponentRequirementGraph
      type: object
    RelationshipType:
      description: A type of schema relationship
      example: requiresDependency
      type: string
    ConnectedNodePair:
      description: A pair of conncted nodes
      example:
        node2: Node2
        node1: Node1
      properties:
        node1:
          description: The disaplay name of the first node.
          example: Node1
          title: node1
          type: string
        node2:
          description: The display name of the second node.
          example: Node2
          title: node2
          type: string
      required:
      - node1
      - node2
      title: ConnectedNodePair
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    ConnectedNodePairArray:
      description: An array of conncted node pairs
      example:
        connectedNodes:
        - node2: Node2
          node1: Node1
        - node2: Node2
          node1: Node1
      properties:
        connectedNodes:
          description: An array of conncted node pairs.
          items:
            $ref: '#/components/schemas/ConnectedNodePair'
          title: connectedNodes
          type: array
      title: ConnectedNodePairArray
      type: object
    ConnectedNodePairPage:
      allOf:
      - $ref: '#/components/schemas/PageMetadata'
      - $ref: '#/components/schemas/ConnectedNodePairPage_allOf'
      description: A page of conncted node pairs
      title: ConnectedNodePairPage
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    RestrictRules:
      default: false
      description: "If True, validation suite will only run with in-house validation\
        \ rule. If False, the Great Expectations suite will be utilized and all rules\
        \ will be available."
      type: boolean
    ManifestValidationResult:
      description: The results of manifest validation
      example:
        warnings:
        - warnings
        - warnings
        errors:
        - errors
        - errors
      properties:
        errors:
          description: Any errors from validation
          items:
            type: string
          title: errors
          type: array
        warnings:
          description: Any warnings from validation
          items:
            type: string
          title: warnings
          type: array
      title: ManifestValidationResult
      type: object
    TangledTreeLayers:
      description: Tangled tree node layers to display for a given data model
      type: string
    TangledTreeText:
      description: Tangled tree plain or higlighted text to display for a given data
        model
      type: object
    DatasetIdArray:
      description: An array of dataset ids
      items:
        $ref: '#/components/schemas/DatasetId'
      type: array
    DataType:
      description: A data type
      example: Patient
      title: DataType
      type: string
    DataTypeArray:
      description: An array of data types
      items:
        $ref: '#/components/schemas/DataType'
      type: array
    GoogleSheetLinks:
      description: An array of google sheet links
      example:
        links:
        - links
        - links
      properties:
        links:
          items:
            type: string
          title: links
          type: array
      title: GoogleSheetLinks
      type: object
    DatasetMetadataPage_allOf:
      properties:
        datasets:
          description: An array of dataset meatdata.
          items:
            $ref: '#/components/schemas/DatasetMetadata'
          title: datasets
          type: array
      required:
      - datasets
      title: DatasetMetadataPage_allOf
      type: object
      example: null
    ManifestMetadataPage_allOf:
      properties:
        manifests:
          description: A list of manifest metadata
          items:
            $ref: '#/components/schemas/ManifestMetadata'
          title: manifests
          type: array
      required:
      - manifests
      title: ManifestMetadataPage_allOf
      type: object
      example: null
    ProjectMetadataPage_allOf:
      properties:
        projects:
          description: An array of project metadata.
          items:
            $ref: '#/components/schemas/ProjectMetadata'
          title: projects
          type: array
      required:
      - projects
      title: ProjectMetadataPage_allOf
      type: object
      example: null
    FileMetadataPage_allOf:
      properties:
        files:
          description: A list of file metadata.
          items:
            $ref: '#/components/schemas/FileMetadata'
          title: files
          type: array
      required:
      - files
      title: FileMetadataPage_allOf
      type: object
      example: null
    NodePage_allOf:
      properties:
        nodes:
          description: An array of nodes.
          items:
            $ref: '#/components/schemas/Node'
          title: nodes
          type: array
      required:
      - nodes
      title: NodePage_allOf
      type: object
      example: null
    ConnectedNodePairPage_allOf:
      properties:
        connectedNodes:
          description: An array of conncted node pairs.
          items:
            $ref: '#/components/schemas/ConnectedNodePair'
          title: connectedNodes
          type: array
      required:
      - connectedNodes
      title: ConnectedNodePairPage_allOf
      type: object
      example: null
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
      x-bearerInfoFunc: schematic_api.controllers.security_controller_.info_from_bearerAuth
