openapi: 3.0.3
info:
  contact:
    name: Support
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  license:
    name: Apache 2.0
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  title: Schematic REST API
  version: 0.1.0
  x-logo:
    url: https://Sage-Bionetworks.github.io/rocc-schemas/logo.png
servers:
- url: http://localhost/api/v1
security:
- bearerAuth: []
tags:
- description: Operations about storages.
  name: Storage
paths:
  /assetTypes/{assetType}/assetViews/{assetViewId}/projects:
    get:
      description: Gets all storage projects the current user has access to.
      operationId: list_projects
      parameters:
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: false
        in: path
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: simple
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsPage'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets all storage projects the current user has access to.
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/assetViews/{assetViewId}/projects/{projectId}/datasets:
    get:
      description: Gets all datasets in folder under a given storage project that
        the current user has access to.
      operationId: list_storage_project_datasets
      parameters:
      - description: The Synapse ID of a storage project.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
        style: simple
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: false
        in: path
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: simple
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetsPage'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets all datasets in folder under a given storage project that the
        current user has access to.
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /assetTypes/{assetType}/assetViews/{assetViewId}/projects/{projectId}/manifests:
    get:
      description: Gets all manifests in a project folder that the current user has
        access to.
      operationId: list_storage_project_manifests
      parameters:
      - description: The Synapse ID of a storage project.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
        style: simple
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: false
        in: path
        name: assetViewId
        required: true
        schema:
          $ref: '#/components/schemas/AssetViewId'
        style: simple
      - description: "Type of asset, such as Synapse"
        explode: false
        in: path
        name: assetType
        required: true
        schema:
          $ref: '#/components/schemas/AssetType'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestsPage'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets all manifests in a project folder that users have access to
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /nodes/{nodeDisplay}/isRequired:
    get:
      description: Gets whether or not the node is required in the schema
      operationId: node_is_required
      parameters:
      - description: The display name of the node in a schema
        explode: false
        in: path
        name: nodeDisplay
        required: true
        schema:
          $ref: '#/components/schemas/NodeDisplay'
        style: simple
      - description: The URL of a schema in jsonld form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Whether or not the node is required in the schema
                type: boolean
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets whether or not the node is required in the schema
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /nodes/{nodeDisplay}/nodeLabel:
    get:
      description: Gets the label of the node
      operationId: get_node_label
      parameters:
      - description: The display name of the node in a schema
        explode: false
        in: path
        name: nodeDisplay
        required: true
        schema:
          $ref: '#/components/schemas/NodeDisplay'
        style: simple
      - description: The URL of a schema in jsonld form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: Whether or not to use the more strict way of converting to camel
          case
        explode: true
        in: query
        name: useStrictCamelCase
        required: false
        schema:
          $ref: '#/components/schemas/UseStrictCamelCase'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeLabel'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets the label of the node
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /nodes/{nodeDisplay}/validationRules:
    get:
      description: Gets the validation rules associated with a given node
      operationId: list_node_validation_rules
      parameters:
      - description: The display name of the node in a schema
        explode: false
        in: path
        name: nodeDisplay
        required: true
        schema:
          $ref: '#/components/schemas/NodeDisplay'
        style: simple
      - description: The URL of a schema in jsonld form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationRulesPage'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets the validation rules associated with a given node
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /nodes/{nodeLabel}/attributes:
    get:
      description: Gets attributes associated with a given node
      operationId: list_node_attributes
      parameters:
      - description: The label of the source node in a schema to get the dependencies
          of
        explode: false
        in: path
        name: nodeLabel
        required: true
        schema:
          $ref: '#/components/schemas/NodeLabel'
        style: simple
      - description: The URL of a schema in jsonld form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributesPage'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets attributes associated with a given node
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
  /nodes/{nodeLabel}/dependencies:
    get:
      description: Gets the immediate dependencies that are related to the given source
        node
      operationId: list_node_dependencies
      parameters:
      - description: The label of the source node in a schema to get the dependencies
          of
        explode: false
        in: path
        name: nodeLabel
        required: true
        schema:
          $ref: '#/components/schemas/NodeLabel'
        style: simple
      - description: The URL of a schema in jsonld form
        explode: true
        in: query
        name: schemaUrl
        required: true
        schema:
          $ref: '#/components/schemas/SchemaUrl'
        style: form
      - description: "Whether or not to return the display names of the component,\
          \ otherwise the label"
        explode: true
        in: query
        name: returnDisplayNames
        required: false
        schema:
          $ref: '#/components/schemas/ReturnDisplayNames'
        style: form
      - description: "Whether or not to order the components by their order in the\
          \ schema, otherwise random"
        explode: true
        in: query
        name: returnOrderedBySchema
        required: false
        schema:
          $ref: '#/components/schemas/ReturnOrderedBySchema'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesPage'
          description: Success
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets the immediate dependencies that are related to the given source
        node
      tags:
      - Schema
      x-openapi-router-controller: schematic_api.controllers.schema_controller
components:
  parameters:
    projectId:
      description: The Synapse ID of a storage project.
      explode: false
      in: path
      name: projectId
      required: true
      schema:
        $ref: '#/components/schemas/ProjectId'
      style: simple
    assetViewId:
      description: ID of view listing all project data assets. E.g. for Synapse this
        would be the Synapse ID of the fileview listing all data assets for a given
        project
      explode: false
      in: path
      name: assetViewId
      required: true
      schema:
        $ref: '#/components/schemas/AssetViewId'
      style: simple
    assetType:
      description: "Type of asset, such as Synapse"
      explode: false
      in: path
      name: assetType
      required: true
      schema:
        $ref: '#/components/schemas/AssetType'
      style: simple
    nodeLabel:
      description: The label of the source node in a schema to get the dependencies
        of
      explode: false
      in: path
      name: nodeLabel
      required: true
      schema:
        $ref: '#/components/schemas/NodeLabel'
      style: simple
    schemaUrl:
      description: The URL of a schema in jsonld form
      explode: true
      in: query
      name: schemaUrl
      required: true
      schema:
        $ref: '#/components/schemas/SchemaUrl'
      style: form
    nodeDisplay:
      description: The display name of the node in a schema
      explode: false
      in: path
      name: nodeDisplay
      required: true
      schema:
        $ref: '#/components/schemas/NodeDisplay'
      style: simple
    useStrictCamelCase:
      description: Whether or not to use the more strict way of converting to camel
        case
      explode: true
      in: query
      name: useStrictCamelCase
      required: false
      schema:
        $ref: '#/components/schemas/UseStrictCamelCase'
      style: form
    returnDisplayNames:
      description: "Whether or not to return the display names of the component, otherwise\
        \ the label"
      explode: true
      in: query
      name: returnDisplayNames
      required: false
      schema:
        $ref: '#/components/schemas/ReturnDisplayNames'
      style: form
    returnOrderedBySchema:
      description: "Whether or not to order the components by their order in the schema,\
        \ otherwise random"
      explode: true
      in: query
      name: returnOrderedBySchema
      required: false
      schema:
        $ref: '#/components/schemas/ReturnOrderedBySchema'
      style: form
  responses:
    BadRequest:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: Invalid request
    Unauthorized:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: Unauthorized
    NotFound:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The specified resource was not found
    InternalServerError:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The request cannot be fulfilled due to an unexpected server error
  schemas:
    ProjectId:
      description: A project ID.
      example: syn26251192
      type: string
    AssetViewId:
      description: An asset view ID.
      example: syn23643253
      type: string
    AssetType:
      description: A type of asset.
      enum:
      - synapse
      example: synapse
      title: AssetType
      type: string
    PageMetadata:
      description: The metadata of a page.
      properties:
        number:
          description: The page number.
          example: 99
          format: int32
          title: number
          type: integer
        size:
          description: The number of items in a single page.
          example: 99
          format: int32
          title: size
          type: integer
        totalElements:
          description: Total number of elements in the result set.
          example: 99
          format: int64
          title: totalElements
          type: integer
        totalPages:
          description: Total number of pages in the result set.
          example: 99
          format: int32
          title: totalPages
          type: integer
        hasNext:
          description: Returns if there is a next page.
          example: true
          title: hasNext
          type: boolean
        hasPrevious:
          description: Returns if there is a previous page.
          example: true
          title: hasPrevious
          type: boolean
      required:
      - hasNext
      - hasPrevious
      - number
      - size
      - totalElements
      - totalPages
      title: PageMetadata
      type: object
    Dataset:
      description: A dataset.
      properties:
        name:
          description: The name of the dataset.
          example: Example dataset
          title: name
          type: string
        id:
          description: The ID of the dataset.
          example: Syn1
          title: id
          type: string
      required:
      - id
      - name
      title: Dataset
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    DatasetsPage:
      allOf:
      - $ref: '#/components/schemas/PageMetadata'
      - $ref: '#/components/schemas/DatasetsPage_allOf'
      description: A page of datasets.
      title: DatasetsPage
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    BasicError:
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          description: A human readable documentation for the problem type
          title: title
          type: string
        status:
          description: The HTTP status code
          title: status
          type: integer
        detail:
          description: A human readable explanation specific to this occurrence of
            the problem
          title: detail
          type: string
        type:
          description: An absolute URI that identifies the problem type
          title: type
          type: string
      required:
      - status
      - title
      title: BasicError
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    Manifest:
      description: A manifest object
      properties:
        name:
          description: The name of the manifest file.
          example: synapse_storage_manifest.csv
          title: name
          type: string
        id:
          description: The id of the manifest file.
          example: syn1
          title: id
          type: string
        datasetName:
          description: The name of the dataset the manifest belongs to.
          example: dataset_X
          title: datasetName
          type: string
        datasetId:
          description: The id of the dataset the manifest belongs to.
          example: syn2
          title: datasetId
          type: string
        componentName:
          description: The name of the component the manifest is of.
          example: patient
          title: componentName
          type: string
      required:
      - id
      - name
      title: Manifest
      type: object
    ManifestsPage:
      allOf:
      - $ref: '#/components/schemas/PageMetadata'
      - $ref: '#/components/schemas/ManifestsPage_allOf'
      description: A page of manifests.
      title: ManifestsPage
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    Project:
      description: A project.
      properties:
        name:
          description: The name of the project.
          example: Example project
          title: name
          type: string
        id:
          description: The ID of the project.
          example: Syn1
          title: id
          type: string
      required:
      - id
      - name
      title: Project
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    ProjectsPage:
      allOf:
      - $ref: '#/components/schemas/PageMetadata'
      - $ref: '#/components/schemas/ProjectsPage_allOf'
      description: A page of projects.
      title: ProjectsPage
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    NodeLabel:
      description: The label of a node in a schema
      example: MolecularEntity
      type: string
    SchemaUrl:
      description: The URL of a schema in jsonld form
      example: https://raw.githubusercontent.com/Sage-Bionetworks/schematic/develop/tests/data/example.model.jsonld
      type: string
    Attribute:
      description: An attribute from a component in a schema
      properties:
        name:
          description: The name of the attribute.
          example: molecularlyInteractsWith
          title: name
          type: string
      required:
      - name
      title: Attribute
      type: object
    AttributesPage:
      allOf:
      - $ref: '#/components/schemas/PageMetadata'
      - $ref: '#/components/schemas/AttributesPage_allOf'
      description: A page of attributes.
      title: AttributesPage
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    NodeDisplay:
      description: The display name of a node in a schema
      example: MolecularEntity
      type: string
    UseStrictCamelCase:
      default: true
      description: Whether or not to use the more strict way of converting to camel
        case
      type: boolean
    ReturnDisplayNames:
      default: true
      description: Whether or not to return the display names of the node otherwise
        the label
      type: boolean
    ReturnOrderedBySchema:
      default: true
      description: "Whether or not to order the components by their order in the schema,\
        \ otherwise random"
      type: boolean
    Node:
      description: A node of a schema.
      properties:
        name:
          description: The name of the node.
          example: Patient
          title: name
          type: string
      required:
      - name
      title: Node
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    NodesPage:
      allOf:
      - $ref: '#/components/schemas/PageMetadata'
      - $ref: '#/components/schemas/NodesPage_allOf'
      description: A page of nodes.
      title: NodesPage
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    ValidationRule:
      description: A validation rule.
      properties:
        name:
          description: The name of the rule.
          example: list strict
          title: name
          type: string
      required:
      - name
      title: ValidationRule
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    ValidationRulesPage:
      allOf:
      - $ref: '#/components/schemas/PageMetadata'
      - $ref: '#/components/schemas/ValidationRulesPage_allOf'
      description: A page of validation rules.
      title: ValidationRulesPage
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    DatasetsPage_allOf:
      properties:
        datasets:
          description: A list of datasets.
          items:
            $ref: '#/components/schemas/Dataset'
          title: datasets
          type: array
      required:
      - datasets
      title: DatasetsPage_allOf
      type: object
      example: null
    ManifestsPage_allOf:
      properties:
        manifests:
          description: A list of manifests.
          items:
            $ref: '#/components/schemas/Manifest'
          title: manifests
          type: array
      required:
      - manifests
      title: ManifestsPage_allOf
      type: object
      example: null
    ProjectsPage_allOf:
      properties:
        projects:
          description: A list of projects.
          items:
            $ref: '#/components/schemas/Project'
          title: projects
          type: array
      required:
      - projects
      title: ProjectsPage_allOf
      type: object
      example: null
    AttributesPage_allOf:
      properties:
        attributes:
          description: A list of attributrs.
          items:
            $ref: '#/components/schemas/Attribute'
          title: attributes
          type: array
      required:
      - attributes
      title: AttributesPage_allOf
      type: object
      example: null
    NodesPage_allOf:
      properties:
        nodes:
          description: A list of nodes.
          items:
            $ref: '#/components/schemas/Node'
          title: nodes
          type: array
      required:
      - nodes
      title: NodesPage_allOf
      type: object
      example: null
    ValidationRulesPage_allOf:
      properties:
        validation_rules:
          description: A list of validation rules.
          items:
            $ref: '#/components/schemas/ValidationRule'
          title: validation_rules
          type: array
      required:
      - validation_rules
      title: ValidationRulesPage_allOf
      type: object
      example: null
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
      x-bearerInfoFunc: schematic_api.controllers.security_controller_.info_from_bearerAuth
