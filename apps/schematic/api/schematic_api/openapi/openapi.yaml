openapi: 3.0.3
info:
  contact:
    name: Support
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  license:
    name: Apache 2.0
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  title: Schematic REST API
  version: 0.1.0
  x-logo:
    url: https://Sage-Bionetworks.github.io/rocc-schemas/logo.png
servers:
- url: http://localhost/api/v1
security:
- bearerAuth: []
tags:
- description: Operations about storages.
  name: Storage
paths:
  /storages/asset-views/{assetView}/projects/{projectId}/manifests:
    get:
      description: Gets all manifests in a project folder that the current user has
        access to.
      operationId: list_storage_project_manifests
      parameters:
      - description: The Synapse ID of a storage project.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
        style: simple
      - description: ID of view listing all project data assets. E.g. for Synapse
          this would be the Synapse ID of the fileview listing all data assets for
          a given project
        explode: false
        in: path
        name: assetView
        required: true
        schema:
          $ref: '#/components/schemas/AssetView'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestsPage'
          description: Success
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets all manifests in a project folder that users have access to
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
  /storages/projects/{projectId}/datasets:
    get:
      description: Gets all datasets in folder under a given storage project that
        the current user has access to.
      operationId: list_storage_project_datasets
      parameters:
      - description: The Synapse ID of a storage project.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          $ref: '#/components/schemas/ProjectId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetsPage'
          description: Success
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Gets all datasets in folder under a given storage project that the
        current user has access to.
      tags:
      - Storage
      x-openapi-router-controller: schematic_api.controllers.storage_controller
components:
  parameters:
    projectId:
      description: The Synapse ID of a storage project.
      explode: false
      in: path
      name: projectId
      required: true
      schema:
        $ref: '#/components/schemas/ProjectId'
      style: simple
    assetView:
      description: ID of view listing all project data assets. E.g. for Synapse this
        would be the Synapse ID of the fileview listing all data assets for a given
        project
      explode: false
      in: path
      name: assetView
      required: true
      schema:
        $ref: '#/components/schemas/AssetView'
      style: simple
  responses:
    NotFound:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The specified resource was not found
    InternalServerError:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The request cannot be fulfilled due to an unexpected server error
    BadRequest:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: Invalid request
    Unauthorized:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: Unauthorized
  schemas:
    ProjectId:
      description: A Synapse project ID.
      example: syn26251192
      type: string
    PageMetadata:
      description: The metadata of a page.
      properties:
        number:
          description: The page number.
          example: 99
          format: int32
          title: number
          type: integer
        size:
          description: The number of items in a single page.
          example: 99
          format: int32
          title: size
          type: integer
        totalElements:
          description: Total number of elements in the result set.
          example: 99
          format: int64
          title: totalElements
          type: integer
        totalPages:
          description: Total number of pages in the result set.
          example: 99
          format: int32
          title: totalPages
          type: integer
        hasNext:
          description: Returns if there is a next page.
          example: true
          title: hasNext
          type: boolean
        hasPrevious:
          description: Returns if there is a previous page.
          example: true
          title: hasPrevious
          type: boolean
      required:
      - hasNext
      - hasPrevious
      - number
      - size
      - totalElements
      - totalPages
      title: PageMetadata
      type: object
    Dataset:
      description: A dataset.
      properties:
        name:
          description: The name of the dataset.
          example: Example dataset
          title: name
          type: string
      required:
      - name
      title: Dataset
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    DatasetsPage:
      allOf:
      - $ref: '#/components/schemas/PageMetadata'
      - $ref: '#/components/schemas/DatasetsPage_allOf'
      description: A page of datasets.
      title: DatasetsPage
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    BasicError:
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          description: A human readable documentation for the problem type
          title: title
          type: string
        status:
          description: The HTTP status code
          title: status
          type: integer
        detail:
          description: A human readable explanation specific to this occurrence of
            the problem
          title: detail
          type: string
        type:
          description: An absolute URI that identifies the problem type
          title: type
          type: string
      required:
      - status
      - title
      title: BasicError
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    AssetView:
      description: ID of view listing all project data assets. E.g. for Synapse this
        would be the Synapse ID of the fileview listing all data assets for a given
        project.
      example: syn23643253
      type: string
    Manifest:
      description: A manifest ID object
      properties:
        name:
          description: The name of the manifest file.
          example: synapse_storage_manifest.csv
          title: name
          type: string
        synapseId:
          description: The Synapse id of the manifest file.
          example: syn1
          title: synapseId
          type: string
        datasetName:
          description: The name of the dataset the manifest belongs to.
          example: dataset_X
          title: datasetName
          type: string
        datasetSynapseId:
          description: The Synapse id of the dataset the manifest belongs to.
          example: syn2
          title: datasetSynapseId
          type: string
        componentName:
          description: The name of the component the manifest is of.
          example: patient
          title: componentName
          type: string
      title: Manifest
      type: object
    ManifestsPage:
      allOf:
      - $ref: '#/components/schemas/PageMetadata'
      - $ref: '#/components/schemas/ManifestsPage_allOf'
      description: A page of manifests.
      title: ManifestsPage
      type: object
      x-java-class-annotations:
      - '@lombok.Builder'
    DatasetsPage_allOf:
      properties:
        datasets:
          description: A list of datasets.
          items:
            $ref: '#/components/schemas/Dataset'
          title: datasets
          type: array
      required:
      - datasets
      title: DatasetsPage_allOf
      type: object
      example: null
    ManifestsPage_allOf:
      properties:
        manifests:
          description: A list of manifests.
          items:
            $ref: '#/components/schemas/Manifest'
          title: manifests
          type: array
      required:
      - manifests
      title: ManifestsPage_allOf
      type: object
      example: null
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
      x-bearerInfoFunc: schematic_api.controllers.security_controller_.info_from_bearerAuth
