# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.user import User
from openapi_server import util

from openapi_server.models.user import User  # noqa: E501

class PageOfUsersAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, users=None):  # noqa: E501
        """PageOfUsersAllOf - a model defined in OpenAPI

        :param users: The users of this PageOfUsersAllOf.  # noqa: E501
        :type users: List[User]
        """
        self.openapi_types = {
            'users': List[User]
        }

        self.attribute_map = {
            'users': 'users'
        }

        self._users = users

    @classmethod
    def from_dict(cls, dikt) -> 'PageOfUsersAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PageOfUsers_allOf of this PageOfUsersAllOf.  # noqa: E501
        :rtype: PageOfUsersAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def users(self):
        """Gets the users of this PageOfUsersAllOf.

        An array of Users  # noqa: E501

        :return: The users of this PageOfUsersAllOf.
        :rtype: List[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this PageOfUsersAllOf.

        An array of Users  # noqa: E501

        :param users: The users of this PageOfUsersAllOf.
        :type users: List[User]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")  # noqa: E501

        self._users = users
