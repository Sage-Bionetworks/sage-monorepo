# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Registry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, description=None, user_count=None, org_count=None, challenge_count=None):  # noqa: E501
        """Registry - a model defined in OpenAPI

        :param name: The name of this Registry.  # noqa: E501
        :type name: str
        :param description: The description of this Registry.  # noqa: E501
        :type description: str
        :param user_count: The user_count of this Registry.  # noqa: E501
        :type user_count: int
        :param org_count: The org_count of this Registry.  # noqa: E501
        :type org_count: int
        :param challenge_count: The challenge_count of this Registry.  # noqa: E501
        :type challenge_count: int
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'user_count': int,
            'org_count': int,
            'challenge_count': int
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'user_count': 'userCount',
            'org_count': 'orgCount',
            'challenge_count': 'challengeCount'
        }

        self._name = name
        self._description = description
        self._user_count = user_count
        self._org_count = org_count
        self._challenge_count = challenge_count

    @classmethod
    def from_dict(cls, dikt) -> 'Registry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Registry of this Registry.  # noqa: E501
        :rtype: Registry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Registry.


        :return: The name of this Registry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Registry.


        :param name: The name of this Registry.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Registry.


        :return: The description of this Registry.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Registry.


        :param description: The description of this Registry.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def user_count(self):
        """Gets the user_count of this Registry.


        :return: The user_count of this Registry.
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this Registry.


        :param user_count: The user_count of this Registry.
        :type user_count: int
        """
        if user_count is None:
            raise ValueError("Invalid value for `user_count`, must not be `None`")  # noqa: E501

        self._user_count = user_count

    @property
    def org_count(self):
        """Gets the org_count of this Registry.


        :return: The org_count of this Registry.
        :rtype: int
        """
        return self._org_count

    @org_count.setter
    def org_count(self, org_count):
        """Sets the org_count of this Registry.


        :param org_count: The org_count of this Registry.
        :type org_count: int
        """
        if org_count is None:
            raise ValueError("Invalid value for `org_count`, must not be `None`")  # noqa: E501

        self._org_count = org_count

    @property
    def challenge_count(self):
        """Gets the challenge_count of this Registry.


        :return: The challenge_count of this Registry.
        :rtype: int
        """
        return self._challenge_count

    @challenge_count.setter
    def challenge_count(self, challenge_count):
        """Sets the challenge_count of this Registry.


        :param challenge_count: The challenge_count of this Registry.
        :type challenge_count: int
        """
        if challenge_count is None:
            raise ValueError("Invalid value for `challenge_count`, must not be `None`")  # noqa: E501

        self._challenge_count = challenge_count
