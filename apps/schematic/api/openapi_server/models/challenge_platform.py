# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.challenge_platform_create_request import ChallengePlatformCreateRequest
from openapi_server.models.challenge_platform_create_response import ChallengePlatformCreateResponse
from openapi_server.models.challenge_readme_all_of import ChallengeReadmeAllOf
import re
from openapi_server import util

from openapi_server.models.challenge_platform_create_request import ChallengePlatformCreateRequest  # noqa: E501
from openapi_server.models.challenge_platform_create_response import ChallengePlatformCreateResponse  # noqa: E501
from openapi_server.models.challenge_readme_all_of import ChallengeReadmeAllOf  # noqa: E501
import re  # noqa: E501

class ChallengePlatform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, display_name=None, website_url=None, avatar_url=None, created_at=None, updated_at=None):  # noqa: E501
        """ChallengePlatform - a model defined in OpenAPI

        :param id: The id of this ChallengePlatform.  # noqa: E501
        :type id: str
        :param name: The name of this ChallengePlatform.  # noqa: E501
        :type name: str
        :param display_name: The display_name of this ChallengePlatform.  # noqa: E501
        :type display_name: str
        :param website_url: The website_url of this ChallengePlatform.  # noqa: E501
        :type website_url: str
        :param avatar_url: The avatar_url of this ChallengePlatform.  # noqa: E501
        :type avatar_url: str
        :param created_at: The created_at of this ChallengePlatform.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this ChallengePlatform.  # noqa: E501
        :type updated_at: datetime
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'display_name': str,
            'website_url': str,
            'avatar_url': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'display_name': 'displayName',
            'website_url': 'websiteUrl',
            'avatar_url': 'avatarUrl',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._id = id
        self._name = name
        self._display_name = display_name
        self._website_url = website_url
        self._avatar_url = avatar_url
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'ChallengePlatform':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChallengePlatform of this ChallengePlatform.  # noqa: E501
        :rtype: ChallengePlatform
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ChallengePlatform.

        The unique identifier of a challenge platform  # noqa: E501

        :return: The id of this ChallengePlatform.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChallengePlatform.

        The unique identifier of a challenge platform  # noqa: E501

        :param id: The id of this ChallengePlatform.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ChallengePlatform.

        The name of the challenge platform  # noqa: E501

        :return: The name of this ChallengePlatform.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChallengePlatform.

        The name of the challenge platform  # noqa: E501

        :param name: The name of this ChallengePlatform.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 30:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `30`")  # noqa: E501
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")  # noqa: E501
        if name is not None and not re.search(r'^[a-z0-9]+(?:-[a-z0-9]+)*$', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-z0-9]+(?:-[a-z0-9]+)*$/`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this ChallengePlatform.


        :return: The display_name of this ChallengePlatform.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ChallengePlatform.


        :param display_name: The display_name of this ChallengePlatform.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def website_url(self):
        """Gets the website_url of this ChallengePlatform.


        :return: The website_url of this ChallengePlatform.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this ChallengePlatform.


        :param website_url: The website_url of this ChallengePlatform.
        :type website_url: str
        """
        if website_url is None:
            raise ValueError("Invalid value for `website_url`, must not be `None`")  # noqa: E501

        self._website_url = website_url

    @property
    def avatar_url(self):
        """Gets the avatar_url of this ChallengePlatform.


        :return: The avatar_url of this ChallengePlatform.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this ChallengePlatform.


        :param avatar_url: The avatar_url of this ChallengePlatform.
        :type avatar_url: str
        """
        if avatar_url is None:
            raise ValueError("Invalid value for `avatar_url`, must not be `None`")  # noqa: E501

        self._avatar_url = avatar_url

    @property
    def created_at(self):
        """Gets the created_at of this ChallengePlatform.


        :return: The created_at of this ChallengePlatform.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ChallengePlatform.


        :param created_at: The created_at of this ChallengePlatform.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ChallengePlatform.


        :return: The updated_at of this ChallengePlatform.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ChallengePlatform.


        :param updated_at: The updated_at of this ChallengePlatform.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at
