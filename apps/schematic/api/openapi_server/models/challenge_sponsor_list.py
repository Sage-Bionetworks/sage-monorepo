# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.challenge_sponsor import ChallengeSponsor
from openapi_server import util

from openapi_server.models.challenge_sponsor import ChallengeSponsor  # noqa: E501

class ChallengeSponsorList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, challenge_sponsors=None):  # noqa: E501
        """ChallengeSponsorList - a model defined in OpenAPI

        :param challenge_sponsors: The challenge_sponsors of this ChallengeSponsorList.  # noqa: E501
        :type challenge_sponsors: List[ChallengeSponsor]
        """
        self.openapi_types = {
            'challenge_sponsors': List[ChallengeSponsor]
        }

        self.attribute_map = {
            'challenge_sponsors': 'challengeSponsors'
        }

        self._challenge_sponsors = challenge_sponsors

    @classmethod
    def from_dict(cls, dikt) -> 'ChallengeSponsorList':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChallengeSponsorList of this ChallengeSponsorList.  # noqa: E501
        :rtype: ChallengeSponsorList
        """
        return util.deserialize_model(dikt, cls)

    @property
    def challenge_sponsors(self):
        """Gets the challenge_sponsors of this ChallengeSponsorList.

        A list of ChallengeSponsors  # noqa: E501

        :return: The challenge_sponsors of this ChallengeSponsorList.
        :rtype: List[ChallengeSponsor]
        """
        return self._challenge_sponsors

    @challenge_sponsors.setter
    def challenge_sponsors(self, challenge_sponsors):
        """Sets the challenge_sponsors of this ChallengeSponsorList.

        A list of ChallengeSponsors  # noqa: E501

        :param challenge_sponsors: The challenge_sponsors of this ChallengeSponsorList.
        :type challenge_sponsors: List[ChallengeSponsor]
        """
        if challenge_sponsors is None:
            raise ValueError("Invalid value for `challenge_sponsors`, must not be `None`")  # noqa: E501

        self._challenge_sponsors = challenge_sponsors
