# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UserCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, login=None, email=None, password=None, name=None, avatar_url=None, bio=None):  # noqa: E501
        """UserCreateRequest - a model defined in OpenAPI

        :param login: The login of this UserCreateRequest.  # noqa: E501
        :type login: str
        :param email: The email of this UserCreateRequest.  # noqa: E501
        :type email: str
        :param password: The password of this UserCreateRequest.  # noqa: E501
        :type password: str
        :param name: The name of this UserCreateRequest.  # noqa: E501
        :type name: str
        :param avatar_url: The avatar_url of this UserCreateRequest.  # noqa: E501
        :type avatar_url: str
        :param bio: The bio of this UserCreateRequest.  # noqa: E501
        :type bio: str
        """
        self.openapi_types = {
            'login': str,
            'email': str,
            'password': str,
            'name': str,
            'avatar_url': str,
            'bio': str
        }

        self.attribute_map = {
            'login': 'login',
            'email': 'email',
            'password': 'password',
            'name': 'name',
            'avatar_url': 'avatarUrl',
            'bio': 'bio'
        }

        self._login = login
        self._email = email
        self._password = password
        self._name = name
        self._avatar_url = avatar_url
        self._bio = bio

    @classmethod
    def from_dict(cls, dikt) -> 'UserCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserCreateRequest of this UserCreateRequest.  # noqa: E501
        :rtype: UserCreateRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def login(self):
        """Gets the login of this UserCreateRequest.


        :return: The login of this UserCreateRequest.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this UserCreateRequest.


        :param login: The login of this UserCreateRequest.
        :type login: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")  # noqa: E501

        self._login = login

    @property
    def email(self):
        """Gets the email of this UserCreateRequest.

        An email address  # noqa: E501

        :return: The email of this UserCreateRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCreateRequest.

        An email address  # noqa: E501

        :param email: The email of this UserCreateRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this UserCreateRequest.


        :return: The password of this UserCreateRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserCreateRequest.


        :param password: The password of this UserCreateRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def name(self):
        """Gets the name of this UserCreateRequest.


        :return: The name of this UserCreateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserCreateRequest.


        :param name: The name of this UserCreateRequest.
        :type name: str
        """

        self._name = name

    @property
    def avatar_url(self):
        """Gets the avatar_url of this UserCreateRequest.


        :return: The avatar_url of this UserCreateRequest.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this UserCreateRequest.


        :param avatar_url: The avatar_url of this UserCreateRequest.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def bio(self):
        """Gets the bio of this UserCreateRequest.


        :return: The bio of this UserCreateRequest.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this UserCreateRequest.


        :param bio: The bio of this UserCreateRequest.
        :type bio: str
        """

        self._bio = bio
