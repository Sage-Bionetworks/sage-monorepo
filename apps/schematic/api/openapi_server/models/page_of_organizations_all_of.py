# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.organization import Organization
from openapi_server import util

from openapi_server.models.organization import Organization  # noqa: E501

class PageOfOrganizationsAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, organizations=None):  # noqa: E501
        """PageOfOrganizationsAllOf - a model defined in OpenAPI

        :param organizations: The organizations of this PageOfOrganizationsAllOf.  # noqa: E501
        :type organizations: List[Organization]
        """
        self.openapi_types = {
            'organizations': List[Organization]
        }

        self.attribute_map = {
            'organizations': 'organizations'
        }

        self._organizations = organizations

    @classmethod
    def from_dict(cls, dikt) -> 'PageOfOrganizationsAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PageOfOrganizations_allOf of this PageOfOrganizationsAllOf.  # noqa: E501
        :rtype: PageOfOrganizationsAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def organizations(self):
        """Gets the organizations of this PageOfOrganizationsAllOf.

        An array of Organizations  # noqa: E501

        :return: The organizations of this PageOfOrganizationsAllOf.
        :rtype: List[Organization]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this PageOfOrganizationsAllOf.

        An array of Organizations  # noqa: E501

        :param organizations: The organizations of this PageOfOrganizationsAllOf.
        :type organizations: List[Organization]
        """
        if organizations is None:
            raise ValueError("Invalid value for `organizations`, must not be `None`")  # noqa: E501

        self._organizations = organizations
