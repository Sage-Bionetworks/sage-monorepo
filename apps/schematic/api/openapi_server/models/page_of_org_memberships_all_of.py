# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.org_membership import OrgMembership
from openapi_server import util

from openapi_server.models.org_membership import OrgMembership  # noqa: E501

class PageOfOrgMembershipsAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, org_memberships=None):  # noqa: E501
        """PageOfOrgMembershipsAllOf - a model defined in OpenAPI

        :param org_memberships: The org_memberships of this PageOfOrgMembershipsAllOf.  # noqa: E501
        :type org_memberships: List[OrgMembership]
        """
        self.openapi_types = {
            'org_memberships': List[OrgMembership]
        }

        self.attribute_map = {
            'org_memberships': 'orgMemberships'
        }

        self._org_memberships = org_memberships

    @classmethod
    def from_dict(cls, dikt) -> 'PageOfOrgMembershipsAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PageOfOrgMemberships_allOf of this PageOfOrgMembershipsAllOf.  # noqa: E501
        :rtype: PageOfOrgMembershipsAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def org_memberships(self):
        """Gets the org_memberships of this PageOfOrgMembershipsAllOf.

        An array of org memberships  # noqa: E501

        :return: The org_memberships of this PageOfOrgMembershipsAllOf.
        :rtype: List[OrgMembership]
        """
        return self._org_memberships

    @org_memberships.setter
    def org_memberships(self, org_memberships):
        """Sets the org_memberships of this PageOfOrgMembershipsAllOf.

        An array of org memberships  # noqa: E501

        :param org_memberships: The org_memberships of this PageOfOrgMembershipsAllOf.
        :type org_memberships: List[OrgMembership]
        """
        if org_memberships is None:
            raise ValueError("Invalid value for `org_memberships`, must not be `None`")  # noqa: E501

        self._org_memberships = org_memberships
