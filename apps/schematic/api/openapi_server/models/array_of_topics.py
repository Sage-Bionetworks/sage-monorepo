# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ArrayOfTopics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topics=None):  # noqa: E501
        """ArrayOfTopics - a model defined in OpenAPI

        :param topics: The topics of this ArrayOfTopics.  # noqa: E501
        :type topics: List[str]
        """
        self.openapi_types = {
            'topics': List[str]
        }

        self.attribute_map = {
            'topics': 'topics'
        }

        self._topics = topics

    @classmethod
    def from_dict(cls, dikt) -> 'ArrayOfTopics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ArrayOfTopics of this ArrayOfTopics.  # noqa: E501
        :rtype: ArrayOfTopics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topics(self):
        """Gets the topics of this ArrayOfTopics.

        An array of Topics  # noqa: E501

        :return: The topics of this ArrayOfTopics.
        :rtype: List[str]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this ArrayOfTopics.

        An array of Topics  # noqa: E501

        :param topics: The topics of this ArrayOfTopics.
        :type topics: List[str]
        """
        if topics is None:
            raise ValueError("Invalid value for `topics`, must not be `None`")  # noqa: E501

        self._topics = topics
