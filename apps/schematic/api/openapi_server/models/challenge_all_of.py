# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ChallengeAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_name=None, owner_id=None, readme_id=None, featured=False, participant_count=0, view_count=0, starred_count=0, created_at=None, updated_at=None):  # noqa: E501
        """ChallengeAllOf - a model defined in OpenAPI

        :param full_name: The full_name of this ChallengeAllOf.  # noqa: E501
        :type full_name: str
        :param owner_id: The owner_id of this ChallengeAllOf.  # noqa: E501
        :type owner_id: str
        :param readme_id: The readme_id of this ChallengeAllOf.  # noqa: E501
        :type readme_id: str
        :param featured: The featured of this ChallengeAllOf.  # noqa: E501
        :type featured: bool
        :param participant_count: The participant_count of this ChallengeAllOf.  # noqa: E501
        :type participant_count: int
        :param view_count: The view_count of this ChallengeAllOf.  # noqa: E501
        :type view_count: int
        :param starred_count: The starred_count of this ChallengeAllOf.  # noqa: E501
        :type starred_count: int
        :param created_at: The created_at of this ChallengeAllOf.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this ChallengeAllOf.  # noqa: E501
        :type updated_at: datetime
        """
        self.openapi_types = {
            'full_name': str,
            'owner_id': str,
            'readme_id': str,
            'featured': bool,
            'participant_count': int,
            'view_count': int,
            'starred_count': int,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'full_name': 'fullName',
            'owner_id': 'ownerId',
            'readme_id': 'readmeId',
            'featured': 'featured',
            'participant_count': 'participantCount',
            'view_count': 'viewCount',
            'starred_count': 'starredCount',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._full_name = full_name
        self._owner_id = owner_id
        self._readme_id = readme_id
        self._featured = featured
        self._participant_count = participant_count
        self._view_count = view_count
        self._starred_count = starred_count
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'ChallengeAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Challenge_allOf of this ChallengeAllOf.  # noqa: E501
        :rtype: ChallengeAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self):
        """Gets the full_name of this ChallengeAllOf.


        :return: The full_name of this ChallengeAllOf.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ChallengeAllOf.


        :param full_name: The full_name of this ChallengeAllOf.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def owner_id(self):
        """Gets the owner_id of this ChallengeAllOf.

        The unique identifier of an account  # noqa: E501

        :return: The owner_id of this ChallengeAllOf.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this ChallengeAllOf.

        The unique identifier of an account  # noqa: E501

        :param owner_id: The owner_id of this ChallengeAllOf.
        :type owner_id: str
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    @property
    def readme_id(self):
        """Gets the readme_id of this ChallengeAllOf.

        The unique identifier of a challenge README  # noqa: E501

        :return: The readme_id of this ChallengeAllOf.
        :rtype: str
        """
        return self._readme_id

    @readme_id.setter
    def readme_id(self, readme_id):
        """Sets the readme_id of this ChallengeAllOf.

        The unique identifier of a challenge README  # noqa: E501

        :param readme_id: The readme_id of this ChallengeAllOf.
        :type readme_id: str
        """
        if readme_id is None:
            raise ValueError("Invalid value for `readme_id`, must not be `None`")  # noqa: E501

        self._readme_id = readme_id

    @property
    def featured(self):
        """Gets the featured of this ChallengeAllOf.

        Whether the challenge is featured  # noqa: E501

        :return: The featured of this ChallengeAllOf.
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this ChallengeAllOf.

        Whether the challenge is featured  # noqa: E501

        :param featured: The featured of this ChallengeAllOf.
        :type featured: bool
        """

        self._featured = featured

    @property
    def participant_count(self):
        """Gets the participant_count of this ChallengeAllOf.

        Number of challenge participants  # noqa: E501

        :return: The participant_count of this ChallengeAllOf.
        :rtype: int
        """
        return self._participant_count

    @participant_count.setter
    def participant_count(self, participant_count):
        """Sets the participant_count of this ChallengeAllOf.

        Number of challenge participants  # noqa: E501

        :param participant_count: The participant_count of this ChallengeAllOf.
        :type participant_count: int
        """

        self._participant_count = participant_count

    @property
    def view_count(self):
        """Gets the view_count of this ChallengeAllOf.

        Number of challenge views  # noqa: E501

        :return: The view_count of this ChallengeAllOf.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this ChallengeAllOf.

        Number of challenge views  # noqa: E501

        :param view_count: The view_count of this ChallengeAllOf.
        :type view_count: int
        """

        self._view_count = view_count

    @property
    def starred_count(self):
        """Gets the starred_count of this ChallengeAllOf.

        Number of times the challenge has been starred by users  # noqa: E501

        :return: The starred_count of this ChallengeAllOf.
        :rtype: int
        """
        return self._starred_count

    @starred_count.setter
    def starred_count(self, starred_count):
        """Sets the starred_count of this ChallengeAllOf.

        Number of times the challenge has been starred by users  # noqa: E501

        :param starred_count: The starred_count of this ChallengeAllOf.
        :type starred_count: int
        """

        self._starred_count = starred_count

    @property
    def created_at(self):
        """Gets the created_at of this ChallengeAllOf.


        :return: The created_at of this ChallengeAllOf.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ChallengeAllOf.


        :param created_at: The created_at of this ChallengeAllOf.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ChallengeAllOf.


        :return: The updated_at of this ChallengeAllOf.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ChallengeAllOf.


        :param updated_at: The updated_at of this ChallengeAllOf.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at
