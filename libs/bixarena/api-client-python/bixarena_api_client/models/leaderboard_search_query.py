# coding: utf-8

"""
BixArena API

Advance bioinformatics by evaluating and ranking AI agents.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from bixarena_api_client.models.leaderboard_sort import LeaderboardSort
from bixarena_api_client.models.sort_direction import SortDirection
from typing import Optional, Set
from typing_extensions import Self


class LeaderboardSearchQuery(BaseModel):
    """
    A leaderboard search query with pagination and filtering options.
    """  # noqa: E501

    page_number: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(
        default=0, description="The page number.", alias="pageNumber"
    )
    page_size: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = Field(
        default=100,
        description="The number of items in a single page.",
        alias="pageSize",
    )
    sort: Optional[LeaderboardSort] = LeaderboardSort.RANK
    direction: Optional[SortDirection] = SortDirection.ASC
    search: Optional[StrictStr] = Field(
        default=None,
        description="Search by model name (case-insensitive partial match).",
    )
    snapshot_id: Optional[StrictStr] = Field(
        default=None,
        description="Get a specific historical snapshot instead of latest.",
        alias="snapshotId",
    )
    __properties: ClassVar[List[str]] = [
        "pageNumber",
        "pageSize",
        "sort",
        "direction",
        "search",
        "snapshotId",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeaderboardSearchQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if search (nullable) is None
        # and model_fields_set contains the field
        if self.search is None and "search" in self.model_fields_set:
            _dict["search"] = None

        # set to None if snapshot_id (nullable) is None
        # and model_fields_set contains the field
        if self.snapshot_id is None and "snapshot_id" in self.model_fields_set:
            _dict["snapshotId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeaderboardSearchQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "pageNumber": obj.get("pageNumber")
                if obj.get("pageNumber") is not None
                else 0,
                "pageSize": obj.get("pageSize")
                if obj.get("pageSize") is not None
                else 100,
                "sort": obj.get("sort")
                if obj.get("sort") is not None
                else LeaderboardSort.RANK,
                "direction": obj.get("direction")
                if obj.get("direction") is not None
                else SortDirection.ASC,
                "search": obj.get("search"),
                "snapshotId": obj.get("snapshotId"),
            }
        )
        return _obj
