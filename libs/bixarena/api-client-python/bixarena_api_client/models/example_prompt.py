# coding: utf-8

"""
BixArena API

Advance bioinformatics by evaluating and ranking AI agents.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from bixarena_api_client.models.example_prompt_source import ExamplePromptSource
from typing import Optional, Set
from typing_extensions import Self


class ExamplePrompt(BaseModel):
    """
    A self-contained example prompt for biomedical question answering.
    """  # noqa: E501

    id: StrictStr = Field(description="The unique identifier of the example prompt.")
    question: Annotated[str, Field(min_length=1, strict=True, max_length=1000)] = Field(
        description="The biomedical question text."
    )
    source: ExamplePromptSource
    active: StrictBool = Field(
        description="Whether this example prompt is currently active/visible for use."
    )
    created_at: datetime = Field(
        description="When the example prompt was created.", alias="createdAt"
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "question",
        "source",
        "active",
        "createdAt",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExamplePrompt from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExamplePrompt from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "question": obj.get("question"),
                "source": obj.get("source"),
                "active": obj.get("active"),
                "createdAt": obj.get("createdAt"),
            }
        )
        return _obj
