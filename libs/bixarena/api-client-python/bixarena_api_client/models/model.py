# coding: utf-8

"""
BixArena AI Service

Advance bioinformatics by evaluating and ranking AI agents.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from bixarena_api_client.models.license import License
from typing import Optional, Set
from typing_extensions import Self


class Model(BaseModel):
    """
    A model entity.
    """  # noqa: E501

    id: StrictStr = Field(description="Unique identifier (UUID) of the model.")
    slug: StrictStr = Field(description="URL-friendly unique slug for the model.")
    alias: Optional[StrictStr] = Field(
        default=None, description="Alternative name or alias for the model."
    )
    name: StrictStr = Field(description="Human-readable name of the model.")
    organization: Optional[StrictStr] = Field(
        default=None, description="Organization that developed or maintains the model."
    )
    license: License
    active: StrictBool = Field(description="Whether the model is active/visible.")
    external_link: StrictStr = Field(
        description="External URL with more information about the model.",
        alias="externalLink",
    )
    description: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=300)]
    ] = Field(default=None, description="Detailed description of the model.")
    api_model_name: StrictStr = Field(
        description="The model name used for API calls.", alias="apiModelName"
    )
    api_base: StrictStr = Field(
        description="Base URL for the model API.", alias="apiBase"
    )
    created_at: datetime = Field(
        description="When the model was created.", alias="createdAt"
    )
    updated_at: datetime = Field(
        description="When the model was last updated.", alias="updatedAt"
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "slug",
        "alias",
        "name",
        "organization",
        "license",
        "active",
        "externalLink",
        "description",
        "apiModelName",
        "apiBase",
        "createdAt",
        "updatedAt",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Model from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if alias (nullable) is None
        # and model_fields_set contains the field
        if self.alias is None and "alias" in self.model_fields_set:
            _dict["alias"] = None

        # set to None if organization (nullable) is None
        # and model_fields_set contains the field
        if self.organization is None and "organization" in self.model_fields_set:
            _dict["organization"] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Model from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "slug": obj.get("slug"),
                "alias": obj.get("alias"),
                "name": obj.get("name"),
                "organization": obj.get("organization"),
                "license": obj.get("license"),
                "active": obj.get("active"),
                "externalLink": obj.get("externalLink"),
                "description": obj.get("description"),
                "apiModelName": obj.get("apiModelName"),
                "apiBase": obj.get("apiBase"),
                "createdAt": obj.get("createdAt"),
                "updatedAt": obj.get("updatedAt"),
            }
        )
        return _obj
