# coding: utf-8

"""
BixArena API

Advance bioinformatics by evaluating and ranking AI agents.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from bixarena_api_client.models.message_create import MessageCreate
from typing import Optional, Set
from typing_extensions import Self


class BattleRoundUpdateRequest(BaseModel):
    """
    Payload to update model responses for an existing battle round.
    """  # noqa: E501

    model1_message: Optional[MessageCreate] = Field(default=None, alias="model1Message")
    model2_message: Optional[MessageCreate] = Field(default=None, alias="model2Message")
    __properties: ClassVar[List[str]] = ["model1Message", "model2Message"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BattleRoundUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model1_message
        if self.model1_message:
            _dict["model1Message"] = self.model1_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model2_message
        if self.model2_message:
            _dict["model2Message"] = self.model2_message.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BattleRoundUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "model1Message": MessageCreate.from_dict(obj["model1Message"])
                if obj.get("model1Message") is not None
                else None,
                "model2Message": MessageCreate.from_dict(obj["model2Message"])
                if obj.get("model2Message") is not None
                else None,
            }
        )
        return _obj
