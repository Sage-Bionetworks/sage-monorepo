# coding: utf-8

"""
BixArena API

Advance bioinformatics by evaluating and ranking AI agents.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from bixarena_api_client.models.model import Model
from typing import Optional, Set
from typing_extensions import Self


class BattleCreateResponse(BaseModel):
    """
    A battle between two AI models.
    """  # noqa: E501

    id: UUID = Field(description="Unique identifier (UUID) of the battle.")
    title: Optional[StrictStr] = Field(default=None, description="Title of the battle.")
    user_id: UUID = Field(description="UUID of a user.", alias="userId")
    model1: Model
    model2: Model
    created_at: datetime = Field(
        description="Timestamp when the entity was created.", alias="createdAt"
    )
    ended_at: Optional[datetime] = Field(
        default=None, description="Timestamp when the entity ended.", alias="endedAt"
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "title",
        "userId",
        "model1",
        "model2",
        "createdAt",
        "endedAt",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BattleCreateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model1
        if self.model1:
            _dict["model1"] = self.model1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model2
        if self.model2:
            _dict["model2"] = self.model2.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BattleCreateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "title": obj.get("title"),
                "userId": obj.get("userId"),
                "model1": Model.from_dict(obj["model1"])
                if obj.get("model1") is not None
                else None,
                "model2": Model.from_dict(obj["model2"])
                if obj.get("model2") is not None
                else None,
                "createdAt": obj.get("createdAt"),
                "endedAt": obj.get("endedAt"),
            }
        )
        return _obj
