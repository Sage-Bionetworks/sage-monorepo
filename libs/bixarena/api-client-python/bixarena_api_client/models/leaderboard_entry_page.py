# coding: utf-8

"""
BixArena AI Service

Advance bioinformatics by evaluating and ranking AI agents.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from bixarena_api_client.models.leaderboard_entry import LeaderboardEntry
from typing import Optional, Set
from typing_extensions import Self


class LeaderboardEntryPage(BaseModel):
    """
    A page of leaderboard entries.
    """  # noqa: E501

    number: StrictInt = Field(description="The page number.")
    size: StrictInt = Field(description="The number of items in a single page.")
    total_elements: StrictInt = Field(
        description="Total number of elements in the result set.", alias="totalElements"
    )
    total_pages: StrictInt = Field(
        description="Total number of pages in the result set.", alias="totalPages"
    )
    has_next: StrictBool = Field(
        description="Returns if there is a next page.", alias="hasNext"
    )
    has_previous: StrictBool = Field(
        description="Returns if there is a previous page.", alias="hasPrevious"
    )
    updated_at: datetime = Field(
        description="When this leaderboard was last updated", alias="updatedAt"
    )
    snapshot_id: StrictStr = Field(
        description="Identifier for this snapshot/timepoint", alias="snapshotId"
    )
    entries: List[LeaderboardEntry] = Field(
        description="A list of leaderboard entries."
    )
    __properties: ClassVar[List[str]] = [
        "number",
        "size",
        "totalElements",
        "totalPages",
        "hasNext",
        "hasPrevious",
        "updatedAt",
        "snapshotId",
        "entries",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeaderboardEntryPage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entries (list)
        _items = []
        if self.entries:
            for _item_entries in self.entries:
                if _item_entries:
                    _items.append(_item_entries.to_dict())
            _dict["entries"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeaderboardEntryPage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "number": obj.get("number"),
                "size": obj.get("size"),
                "totalElements": obj.get("totalElements"),
                "totalPages": obj.get("totalPages"),
                "hasNext": obj.get("hasNext"),
                "hasPrevious": obj.get("hasPrevious"),
                "updatedAt": obj.get("updatedAt"),
                "snapshotId": obj.get("snapshotId"),
                "entries": [
                    LeaderboardEntry.from_dict(_item) for _item in obj["entries"]
                ]
                if obj.get("entries") is not None
                else None,
            }
        )
        return _obj
