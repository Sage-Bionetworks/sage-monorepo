openapi: 3.0.3
info:
  version: 1.0.0
  title: BixArena API
  description: Advance bioinformatics by evaluating and ranking AI agents.
  license:
    name: Apache 2.0
    url: https://github.com/Sage-Bionetworks/sage-monorepo/blob/main/LICENSE.txt
  contact:
    name: Support
    url: https://github.com/Sage-Bionetworks/sage-monorepo
servers:
  - url: http://localhost/v1
tags:
  - name: Leaderboard
    description: Operations about leaderboards.
  - name: Model
    description: Operations about models.
paths:
  /leaderboards:
    get:
      tags:
        - Leaderboard
      summary: List all available leaderboards
      description: Get a list of all available leaderboards with their metadata
      operationId: listLeaderboards
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /leaderboards/{leaderboardId}:
    get:
      tags:
        - Leaderboard
      summary: Get leaderboard entries
      description: Get paginated leaderboard entries for a specific leaderboard
      operationId: getLeaderboard
      parameters:
        - $ref: '#/components/parameters/leaderboardId'
        - $ref: '#/components/parameters/leaderboardSearchQuery'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardEntryPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /leaderboards/{leaderboardId}/history/{modelId}:
    get:
      tags:
        - Leaderboard
      summary: Get model performance history
      description: Get historical performance data for a specific model in a leaderboard
      operationId: getModelHistory
      parameters:
        - $ref: '#/components/parameters/leaderboardId'
        - $ref: '#/components/parameters/modelId'
        - $ref: '#/components/parameters/leaderboardModelHistoryQuery'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardModelHistoryPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /leaderboards/{leaderboardId}/snapshots:
    get:
      tags:
        - Leaderboard
      summary: Get leaderboard snapshots
      description: Get a paginated list of available snapshots for a leaderboard
      operationId: getLeaderboardSnapshots
      parameters:
        - $ref: '#/components/parameters/leaderboardId'
        - $ref: '#/components/parameters/leaderboardSnapshotQuery'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardSnapshotPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /models:
    get:
      tags:
        - Model
      summary: List models
      description: Get a paginated list of models with optional filters (e.g., active)
      operationId: listModels
      parameters:
        - $ref: '#/components/parameters/modelSearchQuery'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    LeaderboardList:
      type: array
      description: A list of leaderboards.
      items:
        type: object
        properties:
          id:
            type: string
            description: Unique identifier for the leaderboard
            example: open-source
          name:
            type: string
            description: Display name for the leaderboard
            example: Open Source Models
          description:
            type: string
            description: Description of what this leaderboard measures
            example: Performance ranking of open-source AI models
          updatedAt:
            type: string
            format: date-time
            description: When this leaderboard was last updated
            example: '2025-08-16T14:30:00Z'
        required:
          - id
          - name
          - description
          - updatedAt
    BasicError:
      type: object
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          type: string
          description: A human readable documentation for the problem type
        status:
          type: integer
          description: The HTTP status code
        detail:
          type: string
          description: A human readable explanation specific to this occurrence of the problem
        type:
          type: string
          description: An absolute URI that identifies the problem type
        instance:
          type: string
          description: An absolute URI that identifies the specific occurrence of the problem
      required:
        - title
        - status
    LeaderboardSort:
      type: string
      description: The field to sort leaderboard entries by.
      enum:
        - rank
        - bt_score
        - vote_count
        - created_at
        - model_name
      default: rank
      example: bt_score
    SortDirection:
      type: string
      description: The direction to sort results.
      enum:
        - asc
        - desc
      default: asc
      example: desc
    LeaderboardSearchQuery:
      type: object
      description: A leaderboard search query with pagination and filtering options.
      properties:
        pageNumber:
          description: The page number.
          type: integer
          format: int32
          default: 0
          minimum: 0
          example: 0
        pageSize:
          description: The number of items in a single page.
          type: integer
          format: int32
          default: 100
          minimum: 1
          maximum: 1000
          example: 25
        sort:
          $ref: '#/components/schemas/LeaderboardSort'
        direction:
          $ref: '#/components/schemas/SortDirection'
        search:
          description: Search by model name (case-insensitive partial match).
          type: string
          nullable: true
          example: gpt
        snapshotId:
          description: Get a specific historical snapshot instead of latest.
          type: string
          nullable: true
          example: snapshot_2025-08-15_10-00
    PageMetadata:
      type: object
      description: The metadata of a page.
      properties:
        number:
          description: The page number.
          type: integer
          format: int32
          example: 99
        size:
          description: The number of items in a single page.
          type: integer
          format: int32
          example: 99
        totalElements:
          description: Total number of elements in the result set.
          type: integer
          format: int64
          example: 99
        totalPages:
          description: Total number of pages in the result set.
          type: integer
          format: int32
          example: 99
        hasNext:
          description: Returns if there is a next page.
          type: boolean
          example: true
        hasPrevious:
          description: Returns if there is a previous page.
          type: boolean
          example: true
      required:
        - number
        - size
        - totalElements
        - totalPages
        - hasNext
        - hasPrevious
    LeaderboardEntry:
      type: object
      description: A single entry in a leaderboard representing a model's performance.
      properties:
        id:
          type: string
          description: Unique identifier for this leaderboard entry
          example: entry_123
        modelId:
          type: string
          description: Identifier for the model
          example: model_456
        modelName:
          type: string
          description: Display name of the model
          example: GPT-4o
        license:
          type: string
          description: License type of the model
          example: MIT
        btScore:
          type: number
          format: double
          description: Primary scoring metric (higher is better)
          example: 0.925
        voteCount:
          type: integer
          description: Number of votes/evaluations
          example: 1250
        rank:
          type: integer
          description: Current rank position (1-based)
          example: 1
        createdAt:
          type: string
          format: date-time
          description: When this entry was created
          example: '2025-08-16T10:30:00Z'
      required:
        - id
        - modelId
        - modelName
        - license
        - btScore
        - voteCount
        - rank
        - createdAt
    LeaderboardEntryPage:
      type: object
      description: A page of leaderboard entries.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            updatedAt:
              type: string
              format: date-time
              description: When this leaderboard was last updated
              example: '2025-08-16T14:30:00Z'
            snapshotId:
              type: string
              description: Identifier for this snapshot/timepoint
              example: snapshot_2025-08-16_14-30
            entries:
              description: A list of leaderboard entries.
              type: array
              items:
                $ref: '#/components/schemas/LeaderboardEntry'
          required:
            - updatedAt
            - snapshotId
            - entries
    LeaderboardHistorySort:
      type: string
      description: The field to sort historical entries by.
      enum:
        - created_at
        - bt_score
        - rank
      default: created_at
      example: created_at
    LeaderboardModelHistoryQuery:
      type: object
      description: A query for retrieving historical leaderboard data for a model.
      properties:
        pageNumber:
          description: The page number.
          type: integer
          format: int32
          default: 0
          minimum: 0
          example: 0
        pageSize:
          description: The number of items in a single page.
          type: integer
          format: int32
          default: 100
          minimum: 1
          maximum: 1000
          example: 50
        sort:
          $ref: '#/components/schemas/LeaderboardHistorySort'
        direction:
          $ref: '#/components/schemas/SortDirection'
        fromDate:
          description: Include only entries created on or after this date.
          type: string
          format: date
          nullable: true
          example: '2025-08-01'
        toDate:
          description: Include only entries created on or before this date.
          type: string
          format: date
          nullable: true
          example: '2025-08-16'
    HistoricalLeaderboardEntry:
      type: object
      description: A historical entry representing a model's performance at a specific point in time.
      properties:
        snapshotId:
          type: string
          description: Identifier for the snapshot/timepoint
          example: snapshot_2025-08-15_10-00
        btScore:
          type: number
          format: double
          description: Primary scoring metric at this point in time
          example: 0.915
        voteCount:
          type: integer
          description: Number of votes/evaluations at this point in time
          example: 1180
        rank:
          type: integer
          description: Rank position at this point in time (1-based)
          example: 2
        createdAt:
          type: string
          format: date-time
          description: When this snapshot was created
          example: '2025-08-15T10:00:00Z'
      required:
        - snapshotId
        - btScore
        - voteCount
        - rank
        - createdAt
    LeaderboardModelHistoryPage:
      type: object
      description: A page of historical leaderboard entries for a specific model.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            modelId:
              type: string
              description: Identifier for the model
              example: model_456
            modelName:
              type: string
              description: Display name of the model
              example: GPT-4o
            history:
              description: A list of historical leaderboard entries.
              type: array
              items:
                $ref: '#/components/schemas/HistoricalLeaderboardEntry'
          required:
            - modelId
            - modelName
            - history
    LeaderboardSnapshotSort:
      type: string
      description: The field to sort snapshots by.
      enum:
        - created_at
      default: created_at
      example: created_at
    LeaderboardSnapshotQuery:
      type: object
      description: A query for retrieving leaderboard snapshots.
      properties:
        pageNumber:
          description: The page number.
          type: integer
          format: int32
          default: 0
          minimum: 0
          example: 0
        pageSize:
          description: The number of items in a single page.
          type: integer
          format: int32
          default: 100
          minimum: 1
          maximum: 1000
          example: 20
        sort:
          $ref: '#/components/schemas/LeaderboardSnapshotSort'
        direction:
          $ref: '#/components/schemas/SortDirection'
    LeaderboardSnapshot:
      type: object
      description: A snapshot representing the state of a leaderboard at a specific point in time.
      properties:
        id:
          type: string
          description: Unique identifier for this snapshot
          example: snapshot_2025-08-16_14-30
        createdAt:
          type: string
          format: date-time
          description: When this snapshot was created
          example: '2025-08-16T14:30:00Z'
        entryCount:
          type: integer
          description: Number of models in this snapshot
          example: 50
        description:
          type: string
          nullable: true
          description: Optional description of this snapshot
          example: Weekly evaluation run
      required:
        - id
        - createdAt
        - entryCount
    LeaderboardSnapshotPage:
      type: object
      description: A page of leaderboard snapshots.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            snapshots:
              description: A list of leaderboard snapshots.
              type: array
              items:
                $ref: '#/components/schemas/LeaderboardSnapshot'
          required:
            - snapshots
    ModelSort:
      type: string
      description: The field to sort models by.
      enum:
        - name
        - created_at
        - updated_at
        - slug
        - license
        - active
      default: name
      example: created_at
    ModelSearchQuery:
      type: object
      description: A model search query with pagination and filtering options.
      properties:
        pageNumber:
          description: The page number.
          type: integer
          format: int32
          default: 0
          minimum: 0
          example: 0
        pageSize:
          description: The number of items in a single page.
          type: integer
          format: int32
          default: 25
          minimum: 1
          maximum: 100
          example: 25
        sort:
          $ref: '#/components/schemas/ModelSort'
        direction:
          $ref: '#/components/schemas/SortDirection'
        search:
          description: Search by model name or slug (case-insensitive partial match).
          type: string
          nullable: true
          example: vision
        active:
          description: Filter by active status (true returns only active models; false only inactive; omit for all).
          type: boolean
          nullable: true
          example: true
      required: []
    Model:
      type: object
      description: A model entity.
      properties:
        id:
          type: string
          description: Unique identifier (UUID) of the model.
          example: 5f6c2d84-5c1a-4b2e-b3d7-0c2a1f9e8a6f
        slug:
          type: string
          description: URL-friendly unique slug for the model.
          example: my-awesome-model
        name:
          type: string
          description: Human-readable name of the model.
          example: My Awesome Model
        license:
          type: string
          nullable: true
          description: License under which the model is released.
          example: Apache-2.0
        active:
          type: boolean
          description: Whether the model is active/visible.
          example: true
        createdAt:
          type: string
          format: date-time
          description: When the model was created.
          example: '2025-09-15T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: When the model was last updated.
          example: '2025-09-20T08:30:00Z'
      required:
        - id
        - slug
        - name
        - active
        - createdAt
        - updatedAt
    ModelPage:
      type: object
      description: A page of models.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            models:
              type: array
              description: A list of models.
              items:
                $ref: '#/components/schemas/Model'
          required:
            - models
  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    InternalServerError:
      description: The request cannot be fulfilled due to an unexpected server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    NotFound:
      description: The requested resource was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
  parameters:
    leaderboardId:
      name: leaderboardId
      description: The unique identifier of a leaderboard
      in: path
      required: true
      schema:
        type: string
        example: open-source
    leaderboardSearchQuery:
      name: leaderboardSearchQuery
      description: The search query used to find and filter leaderboard entries.
      in: query
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/LeaderboardSearchQuery'
    modelId:
      name: modelId
      description: The unique identifier of a model
      in: path
      required: true
      schema:
        type: string
        example: model_456
    leaderboardModelHistoryQuery:
      name: leaderboardModelHistoryQuery
      description: The query used to filter and paginate historical model performance data.
      in: query
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/LeaderboardModelHistoryQuery'
    leaderboardSnapshotQuery:
      name: leaderboardSnapshotQuery
      description: The query used to filter and paginate leaderboard snapshots.
      in: query
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/LeaderboardSnapshotQuery'
    modelSearchQuery:
      name: modelSearchQuery
      description: The search query used to find and filter models.
      in: query
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/ModelSearchQuery'
