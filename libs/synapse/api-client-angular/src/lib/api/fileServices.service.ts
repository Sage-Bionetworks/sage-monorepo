/**
 * Synapse REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { ListWrapperOfUploadDestinationLocation } from '../model/listWrapperOfUploadDestinationLocation';
// @ts-ignore
import { OrgSagebionetworksRepoModelAsynchAsyncJobId } from '../model/orgSagebionetworksRepoModelAsynchAsyncJobId';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileAddFileToDownloadListRequest } from '../model/orgSagebionetworksRepoModelFileAddFileToDownloadListRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileAddFileToDownloadListResponse } from '../model/orgSagebionetworksRepoModelFileAddFileToDownloadListResponse';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileAddPartResponse } from '../model/orgSagebionetworksRepoModelFileAddPartResponse';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileBatchFileHandleCopyRequest } from '../model/orgSagebionetworksRepoModelFileBatchFileHandleCopyRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileBatchFileHandleCopyResult } from '../model/orgSagebionetworksRepoModelFileBatchFileHandleCopyResult';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileBatchFileRequest } from '../model/orgSagebionetworksRepoModelFileBatchFileRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileBatchFileResult } from '../model/orgSagebionetworksRepoModelFileBatchFileResult';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest } from '../model/orgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileBatchPresignedUploadUrlResponse } from '../model/orgSagebionetworksRepoModelFileBatchPresignedUploadUrlResponse';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileBulkFileDownloadRequest } from '../model/orgSagebionetworksRepoModelFileBulkFileDownloadRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileBulkFileDownloadResponse } from '../model/orgSagebionetworksRepoModelFileBulkFileDownloadResponse';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileDownloadList } from '../model/orgSagebionetworksRepoModelFileDownloadList';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileDownloadOrder } from '../model/orgSagebionetworksRepoModelFileDownloadOrder';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileDownloadOrderSummaryRequest } from '../model/orgSagebionetworksRepoModelFileDownloadOrderSummaryRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileDownloadOrderSummaryResponse } from '../model/orgSagebionetworksRepoModelFileDownloadOrderSummaryResponse';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileExternalFileHandleInterface } from '../model/orgSagebionetworksRepoModelFileExternalFileHandleInterface';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileFileHandle } from '../model/orgSagebionetworksRepoModelFileFileHandle';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileFileHandleAssociateType } from '../model/orgSagebionetworksRepoModelFileFileHandleAssociateType';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileFileHandleAssociationList } from '../model/orgSagebionetworksRepoModelFileFileHandleAssociationList';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileFileHandleRestoreRequest } from '../model/orgSagebionetworksRepoModelFileFileHandleRestoreRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileFileHandleRestoreResponse } from '../model/orgSagebionetworksRepoModelFileFileHandleRestoreResponse';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileGoogleCloudFileHandle } from '../model/orgSagebionetworksRepoModelFileGoogleCloudFileHandle';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileMultipartRequest } from '../model/orgSagebionetworksRepoModelFileMultipartRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileMultipartUploadStatus } from '../model/orgSagebionetworksRepoModelFileMultipartUploadStatus';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileS3FileHandle } from '../model/orgSagebionetworksRepoModelFileS3FileHandle';
// @ts-ignore
import { OrgSagebionetworksRepoModelFileUploadDestination } from '../model/orgSagebionetworksRepoModelFileUploadDestination';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
  providedIn: 'root',
})
export class FileServicesService {
  protected basePath = 'https://repo-prod.prod.sagebase.org';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration: Configuration,
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (Array.isArray(basePath) && basePath.length > 0) {
        basePath = basePath[0];
      }

      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  // @ts-ignore
  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)),
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}[${k}]` : k,
            )),
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteFileV1DownloadList(
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any>;
  public deleteFileV1DownloadList(
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public deleteFileV1DownloadList(
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public deleteFileV1DownloadList(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/download/list`;
    return this.httpClient.delete<any>(`${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param handleId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteFileV1FileHandleHandleId(
    handleId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any>;
  public deleteFileV1FileHandleHandleId(
    handleId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public deleteFileV1FileHandleHandleId(
    handleId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public deleteFileV1FileHandleHandleId(
    handleId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any> {
    if (handleId === null || handleId === undefined) {
      throw new Error(
        'Required parameter handleId was null or undefined when calling deleteFileV1FileHandleHandleId.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/fileHandle/${this.configuration.encodeParam({ name: 'handleId', value: handleId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.delete<any>(`${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param handleId The ID of the FileHandle whose preview should be cleared.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteFileV1FileHandleHandleIdFilepreview(
    handleId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any>;
  public deleteFileV1FileHandleHandleIdFilepreview(
    handleId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public deleteFileV1FileHandleHandleIdFilepreview(
    handleId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public deleteFileV1FileHandleHandleIdFilepreview(
    handleId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any> {
    if (handleId === null || handleId === undefined) {
      throw new Error(
        'Required parameter handleId was null or undefined when calling deleteFileV1FileHandleHandleIdFilepreview.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/fileHandle/${this.configuration.encodeParam({ name: 'handleId', value: handleId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/filepreview`;
    return this.httpClient.delete<any>(`${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFileV1DownloadList(
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileDownloadList>;
  public getFileV1DownloadList(
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileDownloadList>>;
  public getFileV1DownloadList(
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileDownloadList>>;
  public getFileV1DownloadList(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/download/list`;
    return this.httpClient.get<OrgSagebionetworksRepoModelFileDownloadList>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param asyncToken
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFileV1DownloadListAddAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileAddFileToDownloadListResponse>;
  public getFileV1DownloadListAddAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileAddFileToDownloadListResponse>>;
  public getFileV1DownloadListAddAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileAddFileToDownloadListResponse>>;
  public getFileV1DownloadListAddAsyncGetAsyncToken(
    asyncToken: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (asyncToken === null || asyncToken === undefined) {
      throw new Error(
        'Required parameter asyncToken was null or undefined when calling getFileV1DownloadListAddAsyncGetAsyncToken.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/download/list/add/async/get/${this.configuration.encodeParam({ name: 'asyncToken', value: asyncToken, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.get<OrgSagebionetworksRepoModelFileAddFileToDownloadListResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orderId The ID of the download order to fetch.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFileV1DownloadOrderOrderId(
    orderId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileDownloadOrder>;
  public getFileV1DownloadOrderOrderId(
    orderId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileDownloadOrder>>;
  public getFileV1DownloadOrderOrderId(
    orderId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileDownloadOrder>>;
  public getFileV1DownloadOrderOrderId(
    orderId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (orderId === null || orderId === undefined) {
      throw new Error(
        'Required parameter orderId was null or undefined when calling getFileV1DownloadOrderOrderId.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/download/order/${this.configuration.encodeParam({ name: 'orderId', value: orderId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.get<OrgSagebionetworksRepoModelFileDownloadOrder>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFileV1EntityIdUploadDestination(
    id: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileUploadDestination>;
  public getFileV1EntityIdUploadDestination(
    id: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileUploadDestination>>;
  public getFileV1EntityIdUploadDestination(
    id: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileUploadDestination>>;
  public getFileV1EntityIdUploadDestination(
    id: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getFileV1EntityIdUploadDestination.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/uploadDestination`;
    return this.httpClient.get<OrgSagebionetworksRepoModelFileUploadDestination>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFileV1EntityIdUploadDestinationLocations(
    id: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<ListWrapperOfUploadDestinationLocation>;
  public getFileV1EntityIdUploadDestinationLocations(
    id: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<ListWrapperOfUploadDestinationLocation>>;
  public getFileV1EntityIdUploadDestinationLocations(
    id: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<ListWrapperOfUploadDestinationLocation>>;
  public getFileV1EntityIdUploadDestinationLocations(
    id: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getFileV1EntityIdUploadDestinationLocations.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/uploadDestinationLocations`;
    return this.httpClient.get<ListWrapperOfUploadDestinationLocation>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id
   * @param storageLocationId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFileV1EntityIdUploadDestinationStorageLocationId(
    id: string,
    storageLocationId: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileUploadDestination>;
  public getFileV1EntityIdUploadDestinationStorageLocationId(
    id: string,
    storageLocationId: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileUploadDestination>>;
  public getFileV1EntityIdUploadDestinationStorageLocationId(
    id: string,
    storageLocationId: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileUploadDestination>>;
  public getFileV1EntityIdUploadDestinationStorageLocationId(
    id: string,
    storageLocationId: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getFileV1EntityIdUploadDestinationStorageLocationId.',
      );
    }
    if (storageLocationId === null || storageLocationId === undefined) {
      throw new Error(
        'Required parameter storageLocationId was null or undefined when calling getFileV1EntityIdUploadDestinationStorageLocationId.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/uploadDestination/${this.configuration.encodeParam({ name: 'storageLocationId', value: storageLocationId, in: 'path', style: 'simple', explode: false, dataType: 'number', dataFormat: undefined })}`;
    return this.httpClient.get<OrgSagebionetworksRepoModelFileUploadDestination>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param asyncToken
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFileV1FileBulkAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileBulkFileDownloadResponse>;
  public getFileV1FileBulkAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileBulkFileDownloadResponse>>;
  public getFileV1FileBulkAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileBulkFileDownloadResponse>>;
  public getFileV1FileBulkAsyncGetAsyncToken(
    asyncToken: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (asyncToken === null || asyncToken === undefined) {
      throw new Error(
        'Required parameter asyncToken was null or undefined when calling getFileV1FileBulkAsyncGetAsyncToken.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/file/bulk/async/get/${this.configuration.encodeParam({ name: 'asyncToken', value: asyncToken, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.get<OrgSagebionetworksRepoModelFileBulkFileDownloadResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param handleId The ID of the FileHandle to fetch.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFileV1FileHandleHandleId(
    handleId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileFileHandle>;
  public getFileV1FileHandleHandleId(
    handleId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileFileHandle>>;
  public getFileV1FileHandleHandleId(
    handleId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileFileHandle>>;
  public getFileV1FileHandleHandleId(
    handleId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (handleId === null || handleId === undefined) {
      throw new Error(
        'Required parameter handleId was null or undefined when calling getFileV1FileHandleHandleId.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/fileHandle/${this.configuration.encodeParam({ name: 'handleId', value: handleId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.get<OrgSagebionetworksRepoModelFileFileHandle>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param handleId
   * @param redirect When set to false, the URL will be returned as text/plain             instead of redirecting.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFileV1FileHandleHandleIdUrl(
    handleId: string,
    redirect?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<any>;
  public getFileV1FileHandleHandleIdUrl(
    handleId: string,
    redirect?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public getFileV1FileHandleHandleIdUrl(
    handleId: string,
    redirect?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public getFileV1FileHandleHandleIdUrl(
    handleId: string,
    redirect?: boolean,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<any> {
    if (handleId === null || handleId === undefined) {
      throw new Error(
        'Required parameter handleId was null or undefined when calling getFileV1FileHandleHandleIdUrl.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (redirect !== undefined && redirect !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>redirect,
        'redirect',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/fileHandle/${this.configuration.encodeParam({ name: 'handleId', value: handleId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/url`;
    return this.httpClient.get<any>(`${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param asyncToken
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFileV1FileHandleRestoreAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileFileHandleRestoreResponse>;
  public getFileV1FileHandleRestoreAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileFileHandleRestoreResponse>>;
  public getFileV1FileHandleRestoreAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileFileHandleRestoreResponse>>;
  public getFileV1FileHandleRestoreAsyncGetAsyncToken(
    asyncToken: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (asyncToken === null || asyncToken === undefined) {
      throw new Error(
        'Required parameter asyncToken was null or undefined when calling getFileV1FileHandleRestoreAsyncGetAsyncToken.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/fileHandle/restore/async/get/${this.configuration.encodeParam({ name: 'asyncToken', value: asyncToken, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.get<OrgSagebionetworksRepoModelFileFileHandleRestoreResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id the ID of the file handle to be downloaded
   * @param fileAssociateType the type of object with which the file is associated
   * @param fileAssociateId the ID fo the object with which the file is associated
   * @param redirect When set to false, the URL will be returned as text/plain             instead of redirecting.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFileV1FileId(
    id: string,
    fileAssociateType: OrgSagebionetworksRepoModelFileFileHandleAssociateType,
    fileAssociateId: string,
    redirect?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<any>;
  public getFileV1FileId(
    id: string,
    fileAssociateType: OrgSagebionetworksRepoModelFileFileHandleAssociateType,
    fileAssociateId: string,
    redirect?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public getFileV1FileId(
    id: string,
    fileAssociateType: OrgSagebionetworksRepoModelFileFileHandleAssociateType,
    fileAssociateId: string,
    redirect?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public getFileV1FileId(
    id: string,
    fileAssociateType: OrgSagebionetworksRepoModelFileFileHandleAssociateType,
    fileAssociateId: string,
    redirect?: boolean,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getFileV1FileId.');
    }
    if (fileAssociateType === null || fileAssociateType === undefined) {
      throw new Error(
        'Required parameter fileAssociateType was null or undefined when calling getFileV1FileId.',
      );
    }
    if (fileAssociateId === null || fileAssociateId === undefined) {
      throw new Error(
        'Required parameter fileAssociateId was null or undefined when calling getFileV1FileId.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (redirect !== undefined && redirect !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>redirect,
        'redirect',
      );
    }
    if (fileAssociateType !== undefined && fileAssociateType !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fileAssociateType,
        'fileAssociateType',
      );
    }
    if (fileAssociateId !== undefined && fileAssociateId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fileAssociateId,
        'fileAssociateId',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/file/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.get<any>(`${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param orgSagebionetworksRepoModelFileFileHandleAssociationList
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1DownloadListAdd(
    orgSagebionetworksRepoModelFileFileHandleAssociationList: OrgSagebionetworksRepoModelFileFileHandleAssociationList,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileDownloadList>;
  public postFileV1DownloadListAdd(
    orgSagebionetworksRepoModelFileFileHandleAssociationList: OrgSagebionetworksRepoModelFileFileHandleAssociationList,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileDownloadList>>;
  public postFileV1DownloadListAdd(
    orgSagebionetworksRepoModelFileFileHandleAssociationList: OrgSagebionetworksRepoModelFileFileHandleAssociationList,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileDownloadList>>;
  public postFileV1DownloadListAdd(
    orgSagebionetworksRepoModelFileFileHandleAssociationList: OrgSagebionetworksRepoModelFileFileHandleAssociationList,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelFileFileHandleAssociationList === null ||
      orgSagebionetworksRepoModelFileFileHandleAssociationList === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelFileFileHandleAssociationList was null or undefined when calling postFileV1DownloadListAdd.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/download/list/add`;
    return this.httpClient.post<OrgSagebionetworksRepoModelFileDownloadList>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelFileFileHandleAssociationList,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelFileAddFileToDownloadListRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1DownloadListAddAsyncStart(
    orgSagebionetworksRepoModelFileAddFileToDownloadListRequest: OrgSagebionetworksRepoModelFileAddFileToDownloadListRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelAsynchAsyncJobId>;
  public postFileV1DownloadListAddAsyncStart(
    orgSagebionetworksRepoModelFileAddFileToDownloadListRequest: OrgSagebionetworksRepoModelFileAddFileToDownloadListRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postFileV1DownloadListAddAsyncStart(
    orgSagebionetworksRepoModelFileAddFileToDownloadListRequest: OrgSagebionetworksRepoModelFileAddFileToDownloadListRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postFileV1DownloadListAddAsyncStart(
    orgSagebionetworksRepoModelFileAddFileToDownloadListRequest: OrgSagebionetworksRepoModelFileAddFileToDownloadListRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelFileAddFileToDownloadListRequest === null ||
      orgSagebionetworksRepoModelFileAddFileToDownloadListRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelFileAddFileToDownloadListRequest was null or undefined when calling postFileV1DownloadListAddAsyncStart.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/download/list/add/async/start`;
    return this.httpClient.post<OrgSagebionetworksRepoModelAsynchAsyncJobId>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelFileAddFileToDownloadListRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelFileFileHandleAssociationList
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1DownloadListRemove(
    orgSagebionetworksRepoModelFileFileHandleAssociationList: OrgSagebionetworksRepoModelFileFileHandleAssociationList,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileDownloadList>;
  public postFileV1DownloadListRemove(
    orgSagebionetworksRepoModelFileFileHandleAssociationList: OrgSagebionetworksRepoModelFileFileHandleAssociationList,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileDownloadList>>;
  public postFileV1DownloadListRemove(
    orgSagebionetworksRepoModelFileFileHandleAssociationList: OrgSagebionetworksRepoModelFileFileHandleAssociationList,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileDownloadList>>;
  public postFileV1DownloadListRemove(
    orgSagebionetworksRepoModelFileFileHandleAssociationList: OrgSagebionetworksRepoModelFileFileHandleAssociationList,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelFileFileHandleAssociationList === null ||
      orgSagebionetworksRepoModelFileFileHandleAssociationList === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelFileFileHandleAssociationList was null or undefined when calling postFileV1DownloadListRemove.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/download/list/remove`;
    return this.httpClient.post<OrgSagebionetworksRepoModelFileDownloadList>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelFileFileHandleAssociationList,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param zipFileName The name to given to the resulting zip file.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1DownloadOrder(
    zipFileName: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileDownloadOrder>;
  public postFileV1DownloadOrder(
    zipFileName: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileDownloadOrder>>;
  public postFileV1DownloadOrder(
    zipFileName: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileDownloadOrder>>;
  public postFileV1DownloadOrder(
    zipFileName: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (zipFileName === null || zipFileName === undefined) {
      throw new Error(
        'Required parameter zipFileName was null or undefined when calling postFileV1DownloadOrder.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (zipFileName !== undefined && zipFileName !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>zipFileName,
        'zipFileName',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/download/order`;
    return this.httpClient.post<OrgSagebionetworksRepoModelFileDownloadOrder>(
      `${this.configuration.basePath}${localVarPath}`,
      null,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelFileDownloadOrderSummaryRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1DownloadOrderHistory(
    orgSagebionetworksRepoModelFileDownloadOrderSummaryRequest: OrgSagebionetworksRepoModelFileDownloadOrderSummaryRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileDownloadOrderSummaryResponse>;
  public postFileV1DownloadOrderHistory(
    orgSagebionetworksRepoModelFileDownloadOrderSummaryRequest: OrgSagebionetworksRepoModelFileDownloadOrderSummaryRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileDownloadOrderSummaryResponse>>;
  public postFileV1DownloadOrderHistory(
    orgSagebionetworksRepoModelFileDownloadOrderSummaryRequest: OrgSagebionetworksRepoModelFileDownloadOrderSummaryRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileDownloadOrderSummaryResponse>>;
  public postFileV1DownloadOrderHistory(
    orgSagebionetworksRepoModelFileDownloadOrderSummaryRequest: OrgSagebionetworksRepoModelFileDownloadOrderSummaryRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelFileDownloadOrderSummaryRequest === null ||
      orgSagebionetworksRepoModelFileDownloadOrderSummaryRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelFileDownloadOrderSummaryRequest was null or undefined when calling postFileV1DownloadOrderHistory.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/download/order/history`;
    return this.httpClient.post<OrgSagebionetworksRepoModelFileDownloadOrderSummaryResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelFileDownloadOrderSummaryRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelFileExternalFileHandleInterface
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1ExternalFileHandle(
    orgSagebionetworksRepoModelFileExternalFileHandleInterface: OrgSagebionetworksRepoModelFileExternalFileHandleInterface,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileExternalFileHandleInterface>;
  public postFileV1ExternalFileHandle(
    orgSagebionetworksRepoModelFileExternalFileHandleInterface: OrgSagebionetworksRepoModelFileExternalFileHandleInterface,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileExternalFileHandleInterface>>;
  public postFileV1ExternalFileHandle(
    orgSagebionetworksRepoModelFileExternalFileHandleInterface: OrgSagebionetworksRepoModelFileExternalFileHandleInterface,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileExternalFileHandleInterface>>;
  public postFileV1ExternalFileHandle(
    orgSagebionetworksRepoModelFileExternalFileHandleInterface: OrgSagebionetworksRepoModelFileExternalFileHandleInterface,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelFileExternalFileHandleInterface === null ||
      orgSagebionetworksRepoModelFileExternalFileHandleInterface === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelFileExternalFileHandleInterface was null or undefined when calling postFileV1ExternalFileHandle.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/externalFileHandle`;
    return this.httpClient.post<OrgSagebionetworksRepoModelFileExternalFileHandleInterface>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelFileExternalFileHandleInterface,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelFileGoogleCloudFileHandle
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1ExternalFileHandleGoogleCloud(
    orgSagebionetworksRepoModelFileGoogleCloudFileHandle: OrgSagebionetworksRepoModelFileGoogleCloudFileHandle,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileGoogleCloudFileHandle>;
  public postFileV1ExternalFileHandleGoogleCloud(
    orgSagebionetworksRepoModelFileGoogleCloudFileHandle: OrgSagebionetworksRepoModelFileGoogleCloudFileHandle,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileGoogleCloudFileHandle>>;
  public postFileV1ExternalFileHandleGoogleCloud(
    orgSagebionetworksRepoModelFileGoogleCloudFileHandle: OrgSagebionetworksRepoModelFileGoogleCloudFileHandle,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileGoogleCloudFileHandle>>;
  public postFileV1ExternalFileHandleGoogleCloud(
    orgSagebionetworksRepoModelFileGoogleCloudFileHandle: OrgSagebionetworksRepoModelFileGoogleCloudFileHandle,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelFileGoogleCloudFileHandle === null ||
      orgSagebionetworksRepoModelFileGoogleCloudFileHandle === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelFileGoogleCloudFileHandle was null or undefined when calling postFileV1ExternalFileHandleGoogleCloud.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/externalFileHandle/googleCloud`;
    return this.httpClient.post<OrgSagebionetworksRepoModelFileGoogleCloudFileHandle>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelFileGoogleCloudFileHandle,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelFileS3FileHandle
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1ExternalFileHandleS3(
    orgSagebionetworksRepoModelFileS3FileHandle: OrgSagebionetworksRepoModelFileS3FileHandle,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileS3FileHandle>;
  public postFileV1ExternalFileHandleS3(
    orgSagebionetworksRepoModelFileS3FileHandle: OrgSagebionetworksRepoModelFileS3FileHandle,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileS3FileHandle>>;
  public postFileV1ExternalFileHandleS3(
    orgSagebionetworksRepoModelFileS3FileHandle: OrgSagebionetworksRepoModelFileS3FileHandle,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileS3FileHandle>>;
  public postFileV1ExternalFileHandleS3(
    orgSagebionetworksRepoModelFileS3FileHandle: OrgSagebionetworksRepoModelFileS3FileHandle,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelFileS3FileHandle === null ||
      orgSagebionetworksRepoModelFileS3FileHandle === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelFileS3FileHandle was null or undefined when calling postFileV1ExternalFileHandleS3.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/externalFileHandle/s3`;
    return this.httpClient.post<OrgSagebionetworksRepoModelFileS3FileHandle>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelFileS3FileHandle,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelFileBulkFileDownloadRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1FileBulkAsyncStart(
    orgSagebionetworksRepoModelFileBulkFileDownloadRequest: OrgSagebionetworksRepoModelFileBulkFileDownloadRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelAsynchAsyncJobId>;
  public postFileV1FileBulkAsyncStart(
    orgSagebionetworksRepoModelFileBulkFileDownloadRequest: OrgSagebionetworksRepoModelFileBulkFileDownloadRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postFileV1FileBulkAsyncStart(
    orgSagebionetworksRepoModelFileBulkFileDownloadRequest: OrgSagebionetworksRepoModelFileBulkFileDownloadRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postFileV1FileBulkAsyncStart(
    orgSagebionetworksRepoModelFileBulkFileDownloadRequest: OrgSagebionetworksRepoModelFileBulkFileDownloadRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelFileBulkFileDownloadRequest === null ||
      orgSagebionetworksRepoModelFileBulkFileDownloadRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelFileBulkFileDownloadRequest was null or undefined when calling postFileV1FileBulkAsyncStart.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/file/bulk/async/start`;
    return this.httpClient.post<OrgSagebionetworksRepoModelAsynchAsyncJobId>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelFileBulkFileDownloadRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelFileBatchFileRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1FileHandleBatch(
    orgSagebionetworksRepoModelFileBatchFileRequest: OrgSagebionetworksRepoModelFileBatchFileRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileBatchFileResult>;
  public postFileV1FileHandleBatch(
    orgSagebionetworksRepoModelFileBatchFileRequest: OrgSagebionetworksRepoModelFileBatchFileRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileBatchFileResult>>;
  public postFileV1FileHandleBatch(
    orgSagebionetworksRepoModelFileBatchFileRequest: OrgSagebionetworksRepoModelFileBatchFileRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileBatchFileResult>>;
  public postFileV1FileHandleBatch(
    orgSagebionetworksRepoModelFileBatchFileRequest: OrgSagebionetworksRepoModelFileBatchFileRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelFileBatchFileRequest === null ||
      orgSagebionetworksRepoModelFileBatchFileRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelFileBatchFileRequest was null or undefined when calling postFileV1FileHandleBatch.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/fileHandle/batch`;
    return this.httpClient.post<OrgSagebionetworksRepoModelFileBatchFileResult>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelFileBatchFileRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param handleIdToCopyFrom the file handle it from which to duplicate the data
   * @param orgSagebionetworksRepoModelFileS3FileHandle
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1FileHandleHandleIdToCopyFromCopy(
    handleIdToCopyFrom: string,
    orgSagebionetworksRepoModelFileS3FileHandle: OrgSagebionetworksRepoModelFileS3FileHandle,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileS3FileHandle>;
  public postFileV1FileHandleHandleIdToCopyFromCopy(
    handleIdToCopyFrom: string,
    orgSagebionetworksRepoModelFileS3FileHandle: OrgSagebionetworksRepoModelFileS3FileHandle,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileS3FileHandle>>;
  public postFileV1FileHandleHandleIdToCopyFromCopy(
    handleIdToCopyFrom: string,
    orgSagebionetworksRepoModelFileS3FileHandle: OrgSagebionetworksRepoModelFileS3FileHandle,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileS3FileHandle>>;
  public postFileV1FileHandleHandleIdToCopyFromCopy(
    handleIdToCopyFrom: string,
    orgSagebionetworksRepoModelFileS3FileHandle: OrgSagebionetworksRepoModelFileS3FileHandle,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (handleIdToCopyFrom === null || handleIdToCopyFrom === undefined) {
      throw new Error(
        'Required parameter handleIdToCopyFrom was null or undefined when calling postFileV1FileHandleHandleIdToCopyFromCopy.',
      );
    }
    if (
      orgSagebionetworksRepoModelFileS3FileHandle === null ||
      orgSagebionetworksRepoModelFileS3FileHandle === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelFileS3FileHandle was null or undefined when calling postFileV1FileHandleHandleIdToCopyFromCopy.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/fileHandle/${this.configuration.encodeParam({ name: 'handleIdToCopyFrom', value: handleIdToCopyFrom, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/copy`;
    return this.httpClient.post<OrgSagebionetworksRepoModelFileS3FileHandle>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelFileS3FileHandle,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelFileFileHandleRestoreRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1FileHandleRestoreAsyncStart(
    orgSagebionetworksRepoModelFileFileHandleRestoreRequest: OrgSagebionetworksRepoModelFileFileHandleRestoreRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelAsynchAsyncJobId>;
  public postFileV1FileHandleRestoreAsyncStart(
    orgSagebionetworksRepoModelFileFileHandleRestoreRequest: OrgSagebionetworksRepoModelFileFileHandleRestoreRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postFileV1FileHandleRestoreAsyncStart(
    orgSagebionetworksRepoModelFileFileHandleRestoreRequest: OrgSagebionetworksRepoModelFileFileHandleRestoreRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postFileV1FileHandleRestoreAsyncStart(
    orgSagebionetworksRepoModelFileFileHandleRestoreRequest: OrgSagebionetworksRepoModelFileFileHandleRestoreRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelFileFileHandleRestoreRequest === null ||
      orgSagebionetworksRepoModelFileFileHandleRestoreRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelFileFileHandleRestoreRequest was null or undefined when calling postFileV1FileHandleRestoreAsyncStart.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/fileHandle/restore/async/start`;
    return this.httpClient.post<OrgSagebionetworksRepoModelAsynchAsyncJobId>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelFileFileHandleRestoreRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelFileMultipartRequest
   * @param forceRestart Optional parameter. When \&#39;forceRestart&#x3D;true\&#39; is included, any             upload state for the given file will be cleared and a new             upload will be started.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1FileMultipart(
    orgSagebionetworksRepoModelFileMultipartRequest: OrgSagebionetworksRepoModelFileMultipartRequest,
    forceRestart?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileMultipartUploadStatus>;
  public postFileV1FileMultipart(
    orgSagebionetworksRepoModelFileMultipartRequest: OrgSagebionetworksRepoModelFileMultipartRequest,
    forceRestart?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileMultipartUploadStatus>>;
  public postFileV1FileMultipart(
    orgSagebionetworksRepoModelFileMultipartRequest: OrgSagebionetworksRepoModelFileMultipartRequest,
    forceRestart?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileMultipartUploadStatus>>;
  public postFileV1FileMultipart(
    orgSagebionetworksRepoModelFileMultipartRequest: OrgSagebionetworksRepoModelFileMultipartRequest,
    forceRestart?: boolean,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelFileMultipartRequest === null ||
      orgSagebionetworksRepoModelFileMultipartRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelFileMultipartRequest was null or undefined when calling postFileV1FileMultipart.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (forceRestart !== undefined && forceRestart !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>forceRestart,
        'forceRestart',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/file/multipart`;
    return this.httpClient.post<OrgSagebionetworksRepoModelFileMultipartUploadStatus>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelFileMultipartRequest,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param uploadId The unique identifier of the file upload.
   * @param orgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1FileMultipartUploadIdPresignedUrlBatch(
    uploadId: string,
    orgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest: OrgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileBatchPresignedUploadUrlResponse>;
  public postFileV1FileMultipartUploadIdPresignedUrlBatch(
    uploadId: string,
    orgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest: OrgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileBatchPresignedUploadUrlResponse>>;
  public postFileV1FileMultipartUploadIdPresignedUrlBatch(
    uploadId: string,
    orgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest: OrgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileBatchPresignedUploadUrlResponse>>;
  public postFileV1FileMultipartUploadIdPresignedUrlBatch(
    uploadId: string,
    orgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest: OrgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (uploadId === null || uploadId === undefined) {
      throw new Error(
        'Required parameter uploadId was null or undefined when calling postFileV1FileMultipartUploadIdPresignedUrlBatch.',
      );
    }
    if (
      orgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest === null ||
      orgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest was null or undefined when calling postFileV1FileMultipartUploadIdPresignedUrlBatch.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/file/multipart/${this.configuration.encodeParam({ name: 'uploadId', value: uploadId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/presigned/url/batch`;
    return this.httpClient.post<OrgSagebionetworksRepoModelFileBatchPresignedUploadUrlResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelFileBatchPresignedUploadUrlRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelFileBatchFileHandleCopyRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFileV1FilehandlesCopy(
    orgSagebionetworksRepoModelFileBatchFileHandleCopyRequest: OrgSagebionetworksRepoModelFileBatchFileHandleCopyRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileBatchFileHandleCopyResult>;
  public postFileV1FilehandlesCopy(
    orgSagebionetworksRepoModelFileBatchFileHandleCopyRequest: OrgSagebionetworksRepoModelFileBatchFileHandleCopyRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileBatchFileHandleCopyResult>>;
  public postFileV1FilehandlesCopy(
    orgSagebionetworksRepoModelFileBatchFileHandleCopyRequest: OrgSagebionetworksRepoModelFileBatchFileHandleCopyRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileBatchFileHandleCopyResult>>;
  public postFileV1FilehandlesCopy(
    orgSagebionetworksRepoModelFileBatchFileHandleCopyRequest: OrgSagebionetworksRepoModelFileBatchFileHandleCopyRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelFileBatchFileHandleCopyRequest === null ||
      orgSagebionetworksRepoModelFileBatchFileHandleCopyRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelFileBatchFileHandleCopyRequest was null or undefined when calling postFileV1FilehandlesCopy.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/filehandles/copy`;
    return this.httpClient.post<OrgSagebionetworksRepoModelFileBatchFileHandleCopyResult>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelFileBatchFileHandleCopyRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param uploadId The unique identifier of the file upload.
   * @param partNumber The part number to add. Must be a number between 1 and 10,000.
   * @param partMD5Hex The MD5 of the uploaded part represented as a hexadecimal             string. If the provided MD5 does not match the MD5 of the             uploaded part, the add will fail.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public putFileV1FileMultipartUploadIdAddPartNumber(
    uploadId: string,
    partNumber: number,
    partMD5Hex: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileAddPartResponse>;
  public putFileV1FileMultipartUploadIdAddPartNumber(
    uploadId: string,
    partNumber: number,
    partMD5Hex: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileAddPartResponse>>;
  public putFileV1FileMultipartUploadIdAddPartNumber(
    uploadId: string,
    partNumber: number,
    partMD5Hex: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileAddPartResponse>>;
  public putFileV1FileMultipartUploadIdAddPartNumber(
    uploadId: string,
    partNumber: number,
    partMD5Hex: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (uploadId === null || uploadId === undefined) {
      throw new Error(
        'Required parameter uploadId was null or undefined when calling putFileV1FileMultipartUploadIdAddPartNumber.',
      );
    }
    if (partNumber === null || partNumber === undefined) {
      throw new Error(
        'Required parameter partNumber was null or undefined when calling putFileV1FileMultipartUploadIdAddPartNumber.',
      );
    }
    if (partMD5Hex === null || partMD5Hex === undefined) {
      throw new Error(
        'Required parameter partMD5Hex was null or undefined when calling putFileV1FileMultipartUploadIdAddPartNumber.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (partMD5Hex !== undefined && partMD5Hex !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>partMD5Hex,
        'partMD5Hex',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/file/multipart/${this.configuration.encodeParam({ name: 'uploadId', value: uploadId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/add/${this.configuration.encodeParam({ name: 'partNumber', value: partNumber, in: 'path', style: 'simple', explode: false, dataType: 'number', dataFormat: undefined })}`;
    return this.httpClient.put<OrgSagebionetworksRepoModelFileAddPartResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      null,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param uploadId The unique identifier of the file upload.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public putFileV1FileMultipartUploadIdComplete(
    uploadId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelFileMultipartUploadStatus>;
  public putFileV1FileMultipartUploadIdComplete(
    uploadId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileMultipartUploadStatus>>;
  public putFileV1FileMultipartUploadIdComplete(
    uploadId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileMultipartUploadStatus>>;
  public putFileV1FileMultipartUploadIdComplete(
    uploadId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (uploadId === null || uploadId === undefined) {
      throw new Error(
        'Required parameter uploadId was null or undefined when calling putFileV1FileMultipartUploadIdComplete.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/file/v1/file/multipart/${this.configuration.encodeParam({ name: 'uploadId', value: uploadId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/complete`;
    return this.httpClient.put<OrgSagebionetworksRepoModelFileMultipartUploadStatus>(
      `${this.configuration.basePath}${localVarPath}`,
      null,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }
}
