/**
 * Synapse REST API
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { OrgSagebionetworksRepoModelFileFileHandleResults } from '../model/org-sagebionetworks-repo-model-file-file-handle-results';
// @ts-ignore
import { OrgSagebionetworksRepoModelV2WikiV2WikiOrderHint } from '../model/org-sagebionetworks-repo-model-v2-wiki-v2-wiki-order-hint';
// @ts-ignore
import { OrgSagebionetworksRepoModelV2WikiV2WikiPage } from '../model/org-sagebionetworks-repo-model-v2-wiki-v2-wiki-page';
// @ts-ignore
import { PaginatedResultsOfV2WikiHeader } from '../model/paginated-results-of-v2-wiki-header';
// @ts-ignore
import { PaginatedResultsOfV2WikiHistorySnapshot } from '../model/paginated-results-of-v2-wiki-history-snapshot';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
  providedIn: 'root',
})
export class WikiPageServices2Service {
  protected basePath = 'https://repo-prod.prod.sagebase.org';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration: Configuration,
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
      if (firstBasePath != undefined) {
        basePath = firstBasePath;
      }

      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  // @ts-ignore
  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)),
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}[${k}]` : k,
            )),
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * @param ownerId The ID of the owning Access Requirement.
   * @param wikiId The ID of the WikiPage to delete.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteRepoV1AccessRequirementOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public deleteRepoV1AccessRequirementOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public deleteRepoV1AccessRequirementOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public deleteRepoV1AccessRequirementOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling deleteRepoV1AccessRequirementOwnerIdWiki2WikiId.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling deleteRepoV1AccessRequirementOwnerIdWiki2WikiId.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/access_requirement/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param ownerId The ID of the owning Entity.
   * @param wikiId The ID of the WikiPage to delete.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteRepoV1EntityOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public deleteRepoV1EntityOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public deleteRepoV1EntityOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public deleteRepoV1EntityOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling deleteRepoV1EntityOwnerIdWiki2WikiId.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling deleteRepoV1EntityOwnerIdWiki2WikiId.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param ownerId The ID of the owning Evaluations.
   * @param wikiId The ID of the WikiPage to delete.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteRepoV1EvaluationOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public deleteRepoV1EvaluationOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public deleteRepoV1EvaluationOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public deleteRepoV1EvaluationOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling deleteRepoV1EvaluationOwnerIdWiki2WikiId.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling deleteRepoV1EvaluationOwnerIdWiki2WikiId.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/evaluation/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param ownerId The ID of the owning AccessRequirement.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1AccessRequirementOwnerIdWiki2(
    ownerId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public getRepoV1AccessRequirementOwnerIdWiki2(
    ownerId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public getRepoV1AccessRequirementOwnerIdWiki2(
    ownerId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public getRepoV1AccessRequirementOwnerIdWiki2(
    ownerId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/access_requirement/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Access Requirement.
   * @param wikiId The ID of the WikiPage to get.
   * @param wikiVersion
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1AccessRequirementOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiId.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiId.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/access_requirement/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Access Requirement
   * @param wikiId The ID of the WikiPage
   * @param fileName The name of the file to get. The file names can be found in             the FileHandles from the ,&lt;a href&#x3D;\&quot;${GET.entity.ownerId.wiki.wikiId.attachmenthandles}\&quot;&gt;,GET             /accessRequirement/{ownerId}/wiki/{wikiId}/attachmenthandles,&lt;/a&gt;, method.
   * @param redirect When set to false, the URL will be returned as text/plain             instead of redirecting.
   * @param wikiVersion
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachment(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachment(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachment(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachment(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachment.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachment.',
      );
    }
    if (fileName === null || fileName === undefined) {
      throw new Error(
        'Required parameter fileName was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachment.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (fileName !== undefined && fileName !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fileName,
        'fileName',
      );
    }
    if (redirect !== undefined && redirect !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>redirect,
        'redirect',
      );
    }
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/access_requirement/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/attachment`;
    return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param ownerId The ID of the owning Access Requirement.
   * @param wikiId The ID of the WikiPage.
   * @param wikiVersion
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachmenthandles(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelFileFileHandleResults>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachmenthandles(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileFileHandleResults>>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachmenthandles(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileFileHandleResults>>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachmenthandles(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachmenthandles.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachmenthandles.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/access_requirement/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/attachmenthandles`;
    return this.httpClient.request<OrgSagebionetworksRepoModelFileFileHandleResults>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Access Requirement
   * @param wikiId The ID of the WikiPage
   * @param fileName The name of the file to get. The file names can be found in             the FileHandles from the ,&lt;a href&#x3D;\&quot;${GET.entity.ownerId.wiki.wikiId.attachmenthandles}\&quot;&gt;,GET             /accessRequirement/{ownerId}/wiki/{wikiId}/attachmenthandles,&lt;/a&gt;, method.
   * @param redirect When set to false, the URL will be returned as text/plain             instead of redirecting.
   * @param wikiVersion
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachmentpreview(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachmentpreview(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachmentpreview(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachmentpreview(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachmentpreview.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachmentpreview.',
      );
    }
    if (fileName === null || fileName === undefined) {
      throw new Error(
        'Required parameter fileName was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiIdAttachmentpreview.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (fileName !== undefined && fileName !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fileName,
        'fileName',
      );
    }
    if (redirect !== undefined && redirect !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>redirect,
        'redirect',
      );
    }
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/access_requirement/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/attachmentpreview`;
    return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param ownerId
   * @param wikiId
   * @param redirect
   * @param wikiVersion
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdMarkdown(
    ownerId: string,
    wikiId: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdMarkdown(
    ownerId: string,
    wikiId: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdMarkdown(
    ownerId: string,
    wikiId: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdMarkdown(
    ownerId: string,
    wikiId: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiIdMarkdown.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiIdMarkdown.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (redirect !== undefined && redirect !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>redirect,
        'redirect',
      );
    }
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/access_requirement/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/markdown`;
    return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param offset The index of the pagination offset. For a page size of 10, the             first page would be at offset &#x3D; 0, and the second page would             be at offset &#x3D; 10.
   * @param limit Limits the size of the page returned. For example, a page size             of 10 require limit &#x3D; 10.
   * @param wikiId The ID of the WikiPage.
   * @param ownerId The ID of the owning Access Requirement.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdWikihistory(
    offset: number,
    limit: number,
    wikiId: string,
    ownerId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<PaginatedResultsOfV2WikiHistorySnapshot>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdWikihistory(
    offset: number,
    limit: number,
    wikiId: string,
    ownerId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<PaginatedResultsOfV2WikiHistorySnapshot>>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdWikihistory(
    offset: number,
    limit: number,
    wikiId: string,
    ownerId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<PaginatedResultsOfV2WikiHistorySnapshot>>;
  public getRepoV1AccessRequirementOwnerIdWiki2WikiIdWikihistory(
    offset: number,
    limit: number,
    wikiId: string,
    ownerId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (offset === null || offset === undefined) {
      throw new Error(
        'Required parameter offset was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiIdWikihistory.',
      );
    }
    if (limit === null || limit === undefined) {
      throw new Error(
        'Required parameter limit was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiIdWikihistory.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiIdWikihistory.',
      );
    }
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1AccessRequirementOwnerIdWiki2WikiIdWikihistory.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (offset !== undefined && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>offset,
        'offset',
      );
    }
    if (limit !== undefined && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>limit, 'limit');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/access_requirement/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wikihistory`;
    return this.httpClient.request<PaginatedResultsOfV2WikiHistorySnapshot>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Access Requirement.
   * @param offset The index of the pagination offset. For a page size of 10, the             first page would be at offset &#x3D; 0, and the second page would             be at offset &#x3D; 10.
   * @param limit Limits the size of the page returned. For example, a page size             of 10 require limit &#x3D; 10.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1AccessRequirementOwnerIdWikiheadertree2(
    ownerId: string,
    offset?: number,
    limit?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<PaginatedResultsOfV2WikiHeader>;
  public getRepoV1AccessRequirementOwnerIdWikiheadertree2(
    ownerId: string,
    offset?: number,
    limit?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<PaginatedResultsOfV2WikiHeader>>;
  public getRepoV1AccessRequirementOwnerIdWikiheadertree2(
    ownerId: string,
    offset?: number,
    limit?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<PaginatedResultsOfV2WikiHeader>>;
  public getRepoV1AccessRequirementOwnerIdWikiheadertree2(
    ownerId: string,
    offset?: number,
    limit?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1AccessRequirementOwnerIdWikiheadertree2.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (offset !== undefined && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>offset,
        'offset',
      );
    }
    if (limit !== undefined && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>limit, 'limit');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/access_requirement/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wikiheadertree2`;
    return this.httpClient.request<PaginatedResultsOfV2WikiHeader>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Entity.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityOwnerIdWiki2(
    ownerId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public getRepoV1EntityOwnerIdWiki2(
    ownerId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public getRepoV1EntityOwnerIdWiki2(
    ownerId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public getRepoV1EntityOwnerIdWiki2(
    ownerId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EntityOwnerIdWiki2.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Entity.
   * @param wikiId The ID of the WikiPage to get.
   * @param wikiVersion When included returns a specific version of a wiki.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public getRepoV1EntityOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public getRepoV1EntityOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public getRepoV1EntityOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiId.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiId.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Entity
   * @param wikiId The ID of the WikiPage
   * @param fileName The name of the file to get. The file names can be found in             the FileHandles from the ,&lt;a href&#x3D;\&quot;${GET.entity.ownerId.wiki.wikiId.attachmenthandles}\&quot;&gt;,GET             /entity/{ownerId}/wiki/{wikiId}/attachmenthandles,&lt;/a&gt;, method.
   * @param redirect When set to false, the URL will be returned as text/plain             instead of redirecting.
   * @param wikiVersion
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityOwnerIdWiki2WikiIdAttachment(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public getRepoV1EntityOwnerIdWiki2WikiIdAttachment(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public getRepoV1EntityOwnerIdWiki2WikiIdAttachment(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public getRepoV1EntityOwnerIdWiki2WikiIdAttachment(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiIdAttachment.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiIdAttachment.',
      );
    }
    if (fileName === null || fileName === undefined) {
      throw new Error(
        'Required parameter fileName was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiIdAttachment.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (fileName !== undefined && fileName !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fileName,
        'fileName',
      );
    }
    if (redirect !== undefined && redirect !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>redirect,
        'redirect',
      );
    }
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/attachment`;
    return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param ownerId The ID of the owning Entity.
   * @param wikiId The ID of the WikiPage.
   * @param wikiVersion
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityOwnerIdWiki2WikiIdAttachmenthandles(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelFileFileHandleResults>;
  public getRepoV1EntityOwnerIdWiki2WikiIdAttachmenthandles(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileFileHandleResults>>;
  public getRepoV1EntityOwnerIdWiki2WikiIdAttachmenthandles(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileFileHandleResults>>;
  public getRepoV1EntityOwnerIdWiki2WikiIdAttachmenthandles(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiIdAttachmenthandles.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiIdAttachmenthandles.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/attachmenthandles`;
    return this.httpClient.request<OrgSagebionetworksRepoModelFileFileHandleResults>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Entity
   * @param wikiId The ID of the WikiPage
   * @param fileName The name of the file to get. The file names can be found in             the FileHandles from the ,&lt;a href&#x3D;\&quot;${GET.entity.ownerId.wiki.wikiId.attachmenthandles}\&quot;&gt;,GET             /entity/{ownerId}/wiki/{wikiId}/attachmenthandles,&lt;/a&gt;, method.
   * @param redirect When set to false, the URL will be returned as text/plain             instead of redirecting.
   * @param wikiVersion
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityOwnerIdWiki2WikiIdAttachmentpreview(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public getRepoV1EntityOwnerIdWiki2WikiIdAttachmentpreview(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public getRepoV1EntityOwnerIdWiki2WikiIdAttachmentpreview(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public getRepoV1EntityOwnerIdWiki2WikiIdAttachmentpreview(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiIdAttachmentpreview.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiIdAttachmentpreview.',
      );
    }
    if (fileName === null || fileName === undefined) {
      throw new Error(
        'Required parameter fileName was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiIdAttachmentpreview.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (fileName !== undefined && fileName !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fileName,
        'fileName',
      );
    }
    if (redirect !== undefined && redirect !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>redirect,
        'redirect',
      );
    }
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/attachmentpreview`;
    return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param ownerId
   * @param wikiId
   * @param redirect
   * @param wikiVersion
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityOwnerIdWiki2WikiIdMarkdown(
    ownerId: string,
    wikiId: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public getRepoV1EntityOwnerIdWiki2WikiIdMarkdown(
    ownerId: string,
    wikiId: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public getRepoV1EntityOwnerIdWiki2WikiIdMarkdown(
    ownerId: string,
    wikiId: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public getRepoV1EntityOwnerIdWiki2WikiIdMarkdown(
    ownerId: string,
    wikiId: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiIdMarkdown.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiIdMarkdown.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (redirect !== undefined && redirect !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>redirect,
        'redirect',
      );
    }
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/markdown`;
    return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param offset The index of the pagination offset. For a page size of 10, the             first page would be at offset &#x3D; 0, and the second page would             be at offset &#x3D; 10.
   * @param limit Limits the size of the page returned. For example, a page size             of 10 require limit &#x3D; 10. Limit must be 50 or less.
   * @param wikiId The ID of the WikiPage.
   * @param ownerId The ID of the owning Entity.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityOwnerIdWiki2WikiIdWikihistory(
    offset: number,
    limit: number,
    wikiId: string,
    ownerId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<PaginatedResultsOfV2WikiHistorySnapshot>;
  public getRepoV1EntityOwnerIdWiki2WikiIdWikihistory(
    offset: number,
    limit: number,
    wikiId: string,
    ownerId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<PaginatedResultsOfV2WikiHistorySnapshot>>;
  public getRepoV1EntityOwnerIdWiki2WikiIdWikihistory(
    offset: number,
    limit: number,
    wikiId: string,
    ownerId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<PaginatedResultsOfV2WikiHistorySnapshot>>;
  public getRepoV1EntityOwnerIdWiki2WikiIdWikihistory(
    offset: number,
    limit: number,
    wikiId: string,
    ownerId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (offset === null || offset === undefined) {
      throw new Error(
        'Required parameter offset was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiIdWikihistory.',
      );
    }
    if (limit === null || limit === undefined) {
      throw new Error(
        'Required parameter limit was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiIdWikihistory.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiIdWikihistory.',
      );
    }
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EntityOwnerIdWiki2WikiIdWikihistory.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (offset !== undefined && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>offset,
        'offset',
      );
    }
    if (limit !== undefined && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>limit, 'limit');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wikihistory`;
    return this.httpClient.request<PaginatedResultsOfV2WikiHistorySnapshot>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Entity.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityOwnerIdWiki2orderhint(
    ownerId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiOrderHint>;
  public getRepoV1EntityOwnerIdWiki2orderhint(
    ownerId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiOrderHint>>;
  public getRepoV1EntityOwnerIdWiki2orderhint(
    ownerId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiOrderHint>>;
  public getRepoV1EntityOwnerIdWiki2orderhint(
    ownerId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EntityOwnerIdWiki2orderhint.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2orderhint`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiOrderHint>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Entity.
   * @param offset The index of the pagination offset. For a page size of 10, the             first page would be at offset &#x3D; 0, and the second page would             be at offset &#x3D; 10.
   * @param limit Limits the size of the page returned. For example, a page size             of 10 require limit &#x3D; 10. Limit must be 50 or less.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityOwnerIdWikiheadertree2(
    ownerId: string,
    offset?: number,
    limit?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<PaginatedResultsOfV2WikiHeader>;
  public getRepoV1EntityOwnerIdWikiheadertree2(
    ownerId: string,
    offset?: number,
    limit?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<PaginatedResultsOfV2WikiHeader>>;
  public getRepoV1EntityOwnerIdWikiheadertree2(
    ownerId: string,
    offset?: number,
    limit?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<PaginatedResultsOfV2WikiHeader>>;
  public getRepoV1EntityOwnerIdWikiheadertree2(
    ownerId: string,
    offset?: number,
    limit?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EntityOwnerIdWikiheadertree2.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (offset !== undefined && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>offset,
        'offset',
      );
    }
    if (limit !== undefined && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>limit, 'limit');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wikiheadertree2`;
    return this.httpClient.request<PaginatedResultsOfV2WikiHeader>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Evaluation.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EvaluationOwnerIdWiki2(
    ownerId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public getRepoV1EvaluationOwnerIdWiki2(
    ownerId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public getRepoV1EvaluationOwnerIdWiki2(
    ownerId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public getRepoV1EvaluationOwnerIdWiki2(
    ownerId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/evaluation/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Evaluation.
   * @param wikiId The ID of the WikiPage to get.
   * @param wikiVersion
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EvaluationOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public getRepoV1EvaluationOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public getRepoV1EvaluationOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public getRepoV1EvaluationOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiId.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiId.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/evaluation/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Evaluation
   * @param wikiId The ID of the WikiPage
   * @param fileName The name of the file to get. The file names can be found in             the FileHandles from the ,&lt;a href&#x3D;\&quot;${GET.evaluation.ownerId.wiki.wikiId.attachmenthandles}\&quot;&gt;,GET /evaluation/{ownerId}/wiki/{wikiId}/attachmenthandles,&lt;/a&gt;,             method.
   * @param redirect When set to false, the URL will be returned as text/plain             instead of redirecting.
   * @param wikiVersion
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EvaluationOwnerIdWiki2WikiIdAttachment(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdAttachment(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdAttachment(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdAttachment(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiIdAttachment.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiIdAttachment.',
      );
    }
    if (fileName === null || fileName === undefined) {
      throw new Error(
        'Required parameter fileName was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiIdAttachment.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (fileName !== undefined && fileName !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fileName,
        'fileName',
      );
    }
    if (redirect !== undefined && redirect !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>redirect,
        'redirect',
      );
    }
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/evaluation/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/attachment`;
    return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param ownerId The ID of the owning Evaluation.
   * @param wikiId The ID of the WikiPage.
   * @param wikiVersion
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EvaluationOwnerIdWiki2WikiIdAttachmenthandles(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelFileFileHandleResults>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdAttachmenthandles(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelFileFileHandleResults>>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdAttachmenthandles(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelFileFileHandleResults>>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdAttachmenthandles(
    ownerId: string,
    wikiId: string,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiIdAttachmenthandles.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiIdAttachmenthandles.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/evaluation/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/attachmenthandles`;
    return this.httpClient.request<OrgSagebionetworksRepoModelFileFileHandleResults>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Evaluation
   * @param wikiId The ID of the WikiPage
   * @param fileName The name of the file to get. The file names can be found in             the FileHandles from the ,&lt;a href&#x3D;\&quot;${GET.evaluation.ownerId.wiki.wikiId.attachmenthandles}\&quot;&gt;,GET /evaluation/{ownerId}/wiki/{wikiId}/attachmenthandles,&lt;/a&gt;,             method.
   * @param redirect When set to false, the URL will be returned as text/plain             instead of redirecting.
   * @param wikiVersion
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EvaluationOwnerIdWiki2WikiIdAttachmentpreview(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdAttachmentpreview(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdAttachmentpreview(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdAttachmentpreview(
    ownerId: string,
    wikiId: string,
    fileName: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiIdAttachmentpreview.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiIdAttachmentpreview.',
      );
    }
    if (fileName === null || fileName === undefined) {
      throw new Error(
        'Required parameter fileName was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiIdAttachmentpreview.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (fileName !== undefined && fileName !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fileName,
        'fileName',
      );
    }
    if (redirect !== undefined && redirect !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>redirect,
        'redirect',
      );
    }
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/evaluation/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/attachmentpreview`;
    return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param ownerId
   * @param wikiId
   * @param redirect
   * @param wikiVersion
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EvaluationOwnerIdWiki2WikiIdMarkdown(
    ownerId: string,
    wikiId: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdMarkdown(
    ownerId: string,
    wikiId: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpResponse<any>>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdMarkdown(
    ownerId: string,
    wikiId: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<HttpEvent<any>>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdMarkdown(
    ownerId: string,
    wikiId: string,
    redirect?: boolean,
    wikiVersion?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext; transferCache?: boolean },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiIdMarkdown.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiIdMarkdown.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (redirect !== undefined && redirect !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>redirect,
        'redirect',
      );
    }
    if (wikiVersion !== undefined && wikiVersion !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>wikiVersion,
        'wikiVersion',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/evaluation/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/markdown`;
    return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param offset The index of the pagination offset. For a page size of 10, the             first page would be at offset &#x3D; 0, and the second page would             be at offset &#x3D; 10.
   * @param limit Limits the size of the page returned. For example, a page size             of 10 require limit &#x3D; 10.
   * @param wikiId The ID of the WikiPage.
   * @param ownerId The ID of the owning Entity.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EvaluationOwnerIdWiki2WikiIdWikihistory(
    offset: number,
    limit: number,
    wikiId: string,
    ownerId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<PaginatedResultsOfV2WikiHistorySnapshot>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdWikihistory(
    offset: number,
    limit: number,
    wikiId: string,
    ownerId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<PaginatedResultsOfV2WikiHistorySnapshot>>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdWikihistory(
    offset: number,
    limit: number,
    wikiId: string,
    ownerId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<PaginatedResultsOfV2WikiHistorySnapshot>>;
  public getRepoV1EvaluationOwnerIdWiki2WikiIdWikihistory(
    offset: number,
    limit: number,
    wikiId: string,
    ownerId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (offset === null || offset === undefined) {
      throw new Error(
        'Required parameter offset was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiIdWikihistory.',
      );
    }
    if (limit === null || limit === undefined) {
      throw new Error(
        'Required parameter limit was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiIdWikihistory.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiIdWikihistory.',
      );
    }
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EvaluationOwnerIdWiki2WikiIdWikihistory.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (offset !== undefined && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>offset,
        'offset',
      );
    }
    if (limit !== undefined && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>limit, 'limit');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/evaluation/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wikihistory`;
    return this.httpClient.request<PaginatedResultsOfV2WikiHistorySnapshot>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Evaluation.
   * @param offset The index of the pagination offset. For a page size of 10, the             first page would be at offset &#x3D; 0, and the second page would             be at offset &#x3D; 10.
   * @param limit Limits the size of the page returned. For example, a page size             of 10 require limit &#x3D; 10.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EvaluationOwnerIdWikiheadertree2(
    ownerId: string,
    offset?: number,
    limit?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<PaginatedResultsOfV2WikiHeader>;
  public getRepoV1EvaluationOwnerIdWikiheadertree2(
    ownerId: string,
    offset?: number,
    limit?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<PaginatedResultsOfV2WikiHeader>>;
  public getRepoV1EvaluationOwnerIdWikiheadertree2(
    ownerId: string,
    offset?: number,
    limit?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<PaginatedResultsOfV2WikiHeader>>;
  public getRepoV1EvaluationOwnerIdWikiheadertree2(
    ownerId: string,
    offset?: number,
    limit?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling getRepoV1EvaluationOwnerIdWikiheadertree2.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (offset !== undefined && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>offset,
        'offset',
      );
    }
    if (limit !== undefined && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>limit, 'limit');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/evaluation/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wikiheadertree2`;
    return this.httpClient.request<PaginatedResultsOfV2WikiHeader>(
      'get',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owner AccessRequirement.
   * @param orgSagebionetworksRepoModelV2WikiV2WikiPage
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1AccessRequirementOwnerIdWiki2(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public postRepoV1AccessRequirementOwnerIdWiki2(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public postRepoV1AccessRequirementOwnerIdWiki2(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public postRepoV1AccessRequirementOwnerIdWiki2(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling postRepoV1AccessRequirementOwnerIdWiki2.',
      );
    }
    if (
      orgSagebionetworksRepoModelV2WikiV2WikiPage === null ||
      orgSagebionetworksRepoModelV2WikiV2WikiPage === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelV2WikiV2WikiPage was null or undefined when calling postRepoV1AccessRequirementOwnerIdWiki2.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/access_requirement/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'post',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: orgSagebionetworksRepoModelV2WikiV2WikiPage,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owner Entity.
   * @param orgSagebionetworksRepoModelV2WikiV2WikiPage
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1EntityOwnerIdWiki2(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public postRepoV1EntityOwnerIdWiki2(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public postRepoV1EntityOwnerIdWiki2(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public postRepoV1EntityOwnerIdWiki2(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling postRepoV1EntityOwnerIdWiki2.',
      );
    }
    if (
      orgSagebionetworksRepoModelV2WikiV2WikiPage === null ||
      orgSagebionetworksRepoModelV2WikiV2WikiPage === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelV2WikiV2WikiPage was null or undefined when calling postRepoV1EntityOwnerIdWiki2.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'post',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: orgSagebionetworksRepoModelV2WikiV2WikiPage,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owner Evaluation.
   * @param orgSagebionetworksRepoModelV2WikiV2WikiPage
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1EvaluationOwnerIdWiki2(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public postRepoV1EvaluationOwnerIdWiki2(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public postRepoV1EvaluationOwnerIdWiki2(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public postRepoV1EvaluationOwnerIdWiki2(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling postRepoV1EvaluationOwnerIdWiki2.',
      );
    }
    if (
      orgSagebionetworksRepoModelV2WikiV2WikiPage === null ||
      orgSagebionetworksRepoModelV2WikiV2WikiPage === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelV2WikiV2WikiPage was null or undefined when calling postRepoV1EvaluationOwnerIdWiki2.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/evaluation/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'post',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: orgSagebionetworksRepoModelV2WikiV2WikiPage,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Access Requirement.
   * @param wikiId The ID of the WikiPage to update.
   * @param orgSagebionetworksRepoModelV2WikiV2WikiPage
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public putRepoV1AccessRequirementOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public putRepoV1AccessRequirementOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public putRepoV1AccessRequirementOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public putRepoV1AccessRequirementOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling putRepoV1AccessRequirementOwnerIdWiki2WikiId.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling putRepoV1AccessRequirementOwnerIdWiki2WikiId.',
      );
    }
    if (
      orgSagebionetworksRepoModelV2WikiV2WikiPage === null ||
      orgSagebionetworksRepoModelV2WikiV2WikiPage === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelV2WikiV2WikiPage was null or undefined when calling putRepoV1AccessRequirementOwnerIdWiki2WikiId.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/access_requirement/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'put',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: orgSagebionetworksRepoModelV2WikiV2WikiPage,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param wikiVersion
   * @param ownerId The ID of the owning Access Requirement.
   * @param wikiId The ID of the WikiPage to update.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public putRepoV1AccessRequirementOwnerIdWiki2WikiIdWikiVersion(
    wikiVersion: number,
    ownerId: string,
    wikiId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public putRepoV1AccessRequirementOwnerIdWiki2WikiIdWikiVersion(
    wikiVersion: number,
    ownerId: string,
    wikiId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public putRepoV1AccessRequirementOwnerIdWiki2WikiIdWikiVersion(
    wikiVersion: number,
    ownerId: string,
    wikiId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public putRepoV1AccessRequirementOwnerIdWiki2WikiIdWikiVersion(
    wikiVersion: number,
    ownerId: string,
    wikiId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (wikiVersion === null || wikiVersion === undefined) {
      throw new Error(
        'Required parameter wikiVersion was null or undefined when calling putRepoV1AccessRequirementOwnerIdWiki2WikiIdWikiVersion.',
      );
    }
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling putRepoV1AccessRequirementOwnerIdWiki2WikiIdWikiVersion.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling putRepoV1AccessRequirementOwnerIdWiki2WikiIdWikiVersion.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/access_requirement/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/${this.configuration.encodeParam({ name: 'wikiVersion', value: wikiVersion, in: 'path', style: 'simple', explode: false, dataType: 'number', dataFormat: undefined })}`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'put',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Entity.
   * @param wikiId The ID of the WikiPage to update.
   * @param orgSagebionetworksRepoModelV2WikiV2WikiPage
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public putRepoV1EntityOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public putRepoV1EntityOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public putRepoV1EntityOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public putRepoV1EntityOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling putRepoV1EntityOwnerIdWiki2WikiId.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling putRepoV1EntityOwnerIdWiki2WikiId.',
      );
    }
    if (
      orgSagebionetworksRepoModelV2WikiV2WikiPage === null ||
      orgSagebionetworksRepoModelV2WikiV2WikiPage === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelV2WikiV2WikiPage was null or undefined when calling putRepoV1EntityOwnerIdWiki2WikiId.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'put',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: orgSagebionetworksRepoModelV2WikiV2WikiPage,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param wikiVersion
   * @param ownerId The ID of the owning Entity.
   * @param wikiId The ID of the WikiPage to update.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public putRepoV1EntityOwnerIdWiki2WikiIdWikiVersion(
    wikiVersion: number,
    ownerId: string,
    wikiId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public putRepoV1EntityOwnerIdWiki2WikiIdWikiVersion(
    wikiVersion: number,
    ownerId: string,
    wikiId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public putRepoV1EntityOwnerIdWiki2WikiIdWikiVersion(
    wikiVersion: number,
    ownerId: string,
    wikiId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public putRepoV1EntityOwnerIdWiki2WikiIdWikiVersion(
    wikiVersion: number,
    ownerId: string,
    wikiId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (wikiVersion === null || wikiVersion === undefined) {
      throw new Error(
        'Required parameter wikiVersion was null or undefined when calling putRepoV1EntityOwnerIdWiki2WikiIdWikiVersion.',
      );
    }
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling putRepoV1EntityOwnerIdWiki2WikiIdWikiVersion.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling putRepoV1EntityOwnerIdWiki2WikiIdWikiVersion.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/${this.configuration.encodeParam({ name: 'wikiVersion', value: wikiVersion, in: 'path', style: 'simple', explode: false, dataType: 'number', dataFormat: undefined })}`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'put',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId
   * @param orgSagebionetworksRepoModelV2WikiV2WikiOrderHint
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public putRepoV1EntityOwnerIdWiki2orderhint(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiOrderHint: OrgSagebionetworksRepoModelV2WikiV2WikiOrderHint,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiOrderHint>;
  public putRepoV1EntityOwnerIdWiki2orderhint(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiOrderHint: OrgSagebionetworksRepoModelV2WikiV2WikiOrderHint,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiOrderHint>>;
  public putRepoV1EntityOwnerIdWiki2orderhint(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiOrderHint: OrgSagebionetworksRepoModelV2WikiV2WikiOrderHint,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiOrderHint>>;
  public putRepoV1EntityOwnerIdWiki2orderhint(
    ownerId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiOrderHint: OrgSagebionetworksRepoModelV2WikiV2WikiOrderHint,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling putRepoV1EntityOwnerIdWiki2orderhint.',
      );
    }
    if (
      orgSagebionetworksRepoModelV2WikiV2WikiOrderHint === null ||
      orgSagebionetworksRepoModelV2WikiV2WikiOrderHint === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelV2WikiV2WikiOrderHint was null or undefined when calling putRepoV1EntityOwnerIdWiki2orderhint.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2orderhint`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiOrderHint>(
      'put',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: orgSagebionetworksRepoModelV2WikiV2WikiOrderHint,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param ownerId The ID of the owning Evaluation.
   * @param wikiId The ID of the WikiPage to update.
   * @param orgSagebionetworksRepoModelV2WikiV2WikiPage
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public putRepoV1EvaluationOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public putRepoV1EvaluationOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public putRepoV1EvaluationOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public putRepoV1EvaluationOwnerIdWiki2WikiId(
    ownerId: string,
    wikiId: string,
    orgSagebionetworksRepoModelV2WikiV2WikiPage: OrgSagebionetworksRepoModelV2WikiV2WikiPage,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling putRepoV1EvaluationOwnerIdWiki2WikiId.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling putRepoV1EvaluationOwnerIdWiki2WikiId.',
      );
    }
    if (
      orgSagebionetworksRepoModelV2WikiV2WikiPage === null ||
      orgSagebionetworksRepoModelV2WikiV2WikiPage === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelV2WikiV2WikiPage was null or undefined when calling putRepoV1EvaluationOwnerIdWiki2WikiId.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/evaluation/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'put',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: orgSagebionetworksRepoModelV2WikiV2WikiPage,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param wikiVersion
   * @param ownerId The ID of the owning Entity.
   * @param wikiId The ID of the WikiPage to update.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public putRepoV1EvaluationOwnerIdWiki2WikiIdWikiVersion(
    wikiVersion: number,
    ownerId: string,
    wikiId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<OrgSagebionetworksRepoModelV2WikiV2WikiPage>;
  public putRepoV1EvaluationOwnerIdWiki2WikiIdWikiVersion(
    wikiVersion: number,
    ownerId: string,
    wikiId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public putRepoV1EvaluationOwnerIdWiki2WikiIdWikiVersion(
    wikiVersion: number,
    ownerId: string,
    wikiId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelV2WikiV2WikiPage>>;
  public putRepoV1EvaluationOwnerIdWiki2WikiIdWikiVersion(
    wikiVersion: number,
    ownerId: string,
    wikiId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (wikiVersion === null || wikiVersion === undefined) {
      throw new Error(
        'Required parameter wikiVersion was null or undefined when calling putRepoV1EvaluationOwnerIdWiki2WikiIdWikiVersion.',
      );
    }
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        'Required parameter ownerId was null or undefined when calling putRepoV1EvaluationOwnerIdWiki2WikiIdWikiVersion.',
      );
    }
    if (wikiId === null || wikiId === undefined) {
      throw new Error(
        'Required parameter wikiId was null or undefined when calling putRepoV1EvaluationOwnerIdWiki2WikiIdWikiVersion.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let localVarTransferCache: boolean | undefined = options && options.transferCache;
    if (localVarTransferCache === undefined) {
      localVarTransferCache = true;
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/evaluation/${this.configuration.encodeParam({ name: 'ownerId', value: ownerId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/wiki2/${this.configuration.encodeParam({ name: 'wikiId', value: wikiId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/${this.configuration.encodeParam({ name: 'wikiVersion', value: wikiVersion, in: 'path', style: 'simple', explode: false, dataType: 'number', dataFormat: undefined })}`;
    return this.httpClient.request<OrgSagebionetworksRepoModelV2WikiV2WikiPage>(
      'put',
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        transferCache: localVarTransferCache,
        reportProgress: reportProgress,
      },
    );
  }
}
