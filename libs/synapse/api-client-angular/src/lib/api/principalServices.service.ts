/**
 * Synapse REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { OrgSagebionetworksRepoModelAuthLoginResponse } from '../model/orgSagebionetworksRepoModelAuthLoginResponse';
// @ts-ignore
import { OrgSagebionetworksRepoModelAuthNewUser } from '../model/orgSagebionetworksRepoModelAuthNewUser';
// @ts-ignore
import { OrgSagebionetworksRepoModelAuthUsername } from '../model/orgSagebionetworksRepoModelAuthUsername';
// @ts-ignore
import { OrgSagebionetworksRepoModelPrincipalAccountSetupInfo } from '../model/orgSagebionetworksRepoModelPrincipalAccountSetupInfo';
// @ts-ignore
import { OrgSagebionetworksRepoModelPrincipalAliasCheckRequest } from '../model/orgSagebionetworksRepoModelPrincipalAliasCheckRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelPrincipalAliasCheckResponse } from '../model/orgSagebionetworksRepoModelPrincipalAliasCheckResponse';
// @ts-ignore
import { OrgSagebionetworksRepoModelPrincipalEmailValidationSignedToken } from '../model/orgSagebionetworksRepoModelPrincipalEmailValidationSignedToken';
// @ts-ignore
import { OrgSagebionetworksRepoModelPrincipalNotificationEmail } from '../model/orgSagebionetworksRepoModelPrincipalNotificationEmail';
// @ts-ignore
import { OrgSagebionetworksRepoModelPrincipalPrincipalAliasRequest } from '../model/orgSagebionetworksRepoModelPrincipalPrincipalAliasRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelPrincipalPrincipalAliasResponse } from '../model/orgSagebionetworksRepoModelPrincipalPrincipalAliasResponse';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
  providedIn: 'root',
})
export class PrincipalServicesService {
  protected basePath = 'https://repo-prod.prod.sagebase.org';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration: Configuration,
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (Array.isArray(basePath) && basePath.length > 0) {
        basePath = basePath[0];
      }

      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  // @ts-ignore
  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)),
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}[${k}]` : k,
            )),
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * @param email the email address to remove
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteRepoV1Email(
    email: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any>;
  public deleteRepoV1Email(
    email: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public deleteRepoV1Email(
    email: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public deleteRepoV1Email(
    email: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any> {
    if (email === null || email === undefined) {
      throw new Error(
        'Required parameter email was null or undefined when calling deleteRepoV1Email.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (email !== undefined && email !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>email, 'email');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/email`;
    return this.httpClient.delete<any>(`${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1NotificationEmail(
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelPrincipalNotificationEmail>;
  public getRepoV1NotificationEmail(
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelPrincipalNotificationEmail>>;
  public getRepoV1NotificationEmail(
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelPrincipalNotificationEmail>>;
  public getRepoV1NotificationEmail(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/notificationEmail`;
    return this.httpClient.get<OrgSagebionetworksRepoModelPrincipalNotificationEmail>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelPrincipalAccountSetupInfo
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1Account2(
    orgSagebionetworksRepoModelPrincipalAccountSetupInfo: OrgSagebionetworksRepoModelPrincipalAccountSetupInfo,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelAuthLoginResponse>;
  public postRepoV1Account2(
    orgSagebionetworksRepoModelPrincipalAccountSetupInfo: OrgSagebionetworksRepoModelPrincipalAccountSetupInfo,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelAuthLoginResponse>>;
  public postRepoV1Account2(
    orgSagebionetworksRepoModelPrincipalAccountSetupInfo: OrgSagebionetworksRepoModelPrincipalAccountSetupInfo,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelAuthLoginResponse>>;
  public postRepoV1Account2(
    orgSagebionetworksRepoModelPrincipalAccountSetupInfo: OrgSagebionetworksRepoModelPrincipalAccountSetupInfo,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelPrincipalAccountSetupInfo === null ||
      orgSagebionetworksRepoModelPrincipalAccountSetupInfo === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelPrincipalAccountSetupInfo was null or undefined when calling postRepoV1Account2.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/account2`;
    return this.httpClient.post<OrgSagebionetworksRepoModelAuthLoginResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelPrincipalAccountSetupInfo,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param portalEndpoint the beginning of the URL included in the email verification message. When concatenated with         a list of ampersand (,&amp;,) separated request parameters, must become a well formed URL. The concatenated         string must be included with the ,&lt;a href&#x3D;\&quot;${POST.account2}\&quot;&gt;,POST /account,&lt;/a&gt;, request.
   * @param orgSagebionetworksRepoModelAuthNewUser
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1AccountEmailValidation(
    portalEndpoint: string,
    orgSagebionetworksRepoModelAuthNewUser: OrgSagebionetworksRepoModelAuthNewUser,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any>;
  public postRepoV1AccountEmailValidation(
    portalEndpoint: string,
    orgSagebionetworksRepoModelAuthNewUser: OrgSagebionetworksRepoModelAuthNewUser,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public postRepoV1AccountEmailValidation(
    portalEndpoint: string,
    orgSagebionetworksRepoModelAuthNewUser: OrgSagebionetworksRepoModelAuthNewUser,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public postRepoV1AccountEmailValidation(
    portalEndpoint: string,
    orgSagebionetworksRepoModelAuthNewUser: OrgSagebionetworksRepoModelAuthNewUser,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any> {
    if (portalEndpoint === null || portalEndpoint === undefined) {
      throw new Error(
        'Required parameter portalEndpoint was null or undefined when calling postRepoV1AccountEmailValidation.',
      );
    }
    if (
      orgSagebionetworksRepoModelAuthNewUser === null ||
      orgSagebionetworksRepoModelAuthNewUser === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelAuthNewUser was null or undefined when calling postRepoV1AccountEmailValidation.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (portalEndpoint !== undefined && portalEndpoint !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>portalEndpoint,
        'portalEndpoint',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/account/emailValidation`;
    return this.httpClient.post<any>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelAuthNewUser,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id the ID of the user account to which the email address is to be added. Must match the ID of the user         making the request.
   * @param portalEndpoint the beginning of the URL included in the email verification message. When concatenated with         a list of ampersand (,&amp;,) separated request parameters, must become a well formed URL. The concatenated         string must be included with the ,&lt;a href&#x3D;\&quot;${POST.email}\&quot;&gt;,POST /email,&lt;/a&gt;, request.
   * @param orgSagebionetworksRepoModelAuthUsername
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1AccountIdEmailValidation(
    id: string,
    portalEndpoint: string,
    orgSagebionetworksRepoModelAuthUsername: OrgSagebionetworksRepoModelAuthUsername,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any>;
  public postRepoV1AccountIdEmailValidation(
    id: string,
    portalEndpoint: string,
    orgSagebionetworksRepoModelAuthUsername: OrgSagebionetworksRepoModelAuthUsername,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public postRepoV1AccountIdEmailValidation(
    id: string,
    portalEndpoint: string,
    orgSagebionetworksRepoModelAuthUsername: OrgSagebionetworksRepoModelAuthUsername,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public postRepoV1AccountIdEmailValidation(
    id: string,
    portalEndpoint: string,
    orgSagebionetworksRepoModelAuthUsername: OrgSagebionetworksRepoModelAuthUsername,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling postRepoV1AccountIdEmailValidation.',
      );
    }
    if (portalEndpoint === null || portalEndpoint === undefined) {
      throw new Error(
        'Required parameter portalEndpoint was null or undefined when calling postRepoV1AccountIdEmailValidation.',
      );
    }
    if (
      orgSagebionetworksRepoModelAuthUsername === null ||
      orgSagebionetworksRepoModelAuthUsername === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelAuthUsername was null or undefined when calling postRepoV1AccountIdEmailValidation.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (portalEndpoint !== undefined && portalEndpoint !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>portalEndpoint,
        'portalEndpoint',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/account/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/emailValidation`;
    return this.httpClient.post<any>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelAuthUsername,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelPrincipalEmailValidationSignedToken
   * @param setAsNotificationEmail if true then the newly added email address becomes the address  used by the system for sending messages to the user.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1Email(
    orgSagebionetworksRepoModelPrincipalEmailValidationSignedToken: OrgSagebionetworksRepoModelPrincipalEmailValidationSignedToken,
    setAsNotificationEmail?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any>;
  public postRepoV1Email(
    orgSagebionetworksRepoModelPrincipalEmailValidationSignedToken: OrgSagebionetworksRepoModelPrincipalEmailValidationSignedToken,
    setAsNotificationEmail?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public postRepoV1Email(
    orgSagebionetworksRepoModelPrincipalEmailValidationSignedToken: OrgSagebionetworksRepoModelPrincipalEmailValidationSignedToken,
    setAsNotificationEmail?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public postRepoV1Email(
    orgSagebionetworksRepoModelPrincipalEmailValidationSignedToken: OrgSagebionetworksRepoModelPrincipalEmailValidationSignedToken,
    setAsNotificationEmail?: boolean,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelPrincipalEmailValidationSignedToken === null ||
      orgSagebionetworksRepoModelPrincipalEmailValidationSignedToken === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelPrincipalEmailValidationSignedToken was null or undefined when calling postRepoV1Email.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (setAsNotificationEmail !== undefined && setAsNotificationEmail !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>setAsNotificationEmail,
        'setAsNotificationEmail',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/email`;
    return this.httpClient.post<any>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelPrincipalEmailValidationSignedToken,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelPrincipalPrincipalAliasRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1PrincipalAlias(
    orgSagebionetworksRepoModelPrincipalPrincipalAliasRequest: OrgSagebionetworksRepoModelPrincipalPrincipalAliasRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelPrincipalPrincipalAliasResponse>;
  public postRepoV1PrincipalAlias(
    orgSagebionetworksRepoModelPrincipalPrincipalAliasRequest: OrgSagebionetworksRepoModelPrincipalPrincipalAliasRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelPrincipalPrincipalAliasResponse>>;
  public postRepoV1PrincipalAlias(
    orgSagebionetworksRepoModelPrincipalPrincipalAliasRequest: OrgSagebionetworksRepoModelPrincipalPrincipalAliasRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelPrincipalPrincipalAliasResponse>>;
  public postRepoV1PrincipalAlias(
    orgSagebionetworksRepoModelPrincipalPrincipalAliasRequest: OrgSagebionetworksRepoModelPrincipalPrincipalAliasRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelPrincipalPrincipalAliasRequest === null ||
      orgSagebionetworksRepoModelPrincipalPrincipalAliasRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelPrincipalPrincipalAliasRequest was null or undefined when calling postRepoV1PrincipalAlias.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/principal/alias`;
    return this.httpClient.post<OrgSagebionetworksRepoModelPrincipalPrincipalAliasResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelPrincipalPrincipalAliasRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelPrincipalAliasCheckRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1PrincipalAvailable(
    orgSagebionetworksRepoModelPrincipalAliasCheckRequest: OrgSagebionetworksRepoModelPrincipalAliasCheckRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelPrincipalAliasCheckResponse>;
  public postRepoV1PrincipalAvailable(
    orgSagebionetworksRepoModelPrincipalAliasCheckRequest: OrgSagebionetworksRepoModelPrincipalAliasCheckRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelPrincipalAliasCheckResponse>>;
  public postRepoV1PrincipalAvailable(
    orgSagebionetworksRepoModelPrincipalAliasCheckRequest: OrgSagebionetworksRepoModelPrincipalAliasCheckRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelPrincipalAliasCheckResponse>>;
  public postRepoV1PrincipalAvailable(
    orgSagebionetworksRepoModelPrincipalAliasCheckRequest: OrgSagebionetworksRepoModelPrincipalAliasCheckRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelPrincipalAliasCheckRequest === null ||
      orgSagebionetworksRepoModelPrincipalAliasCheckRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelPrincipalAliasCheckRequest was null or undefined when calling postRepoV1PrincipalAvailable.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/principal/available`;
    return this.httpClient.post<OrgSagebionetworksRepoModelPrincipalAliasCheckResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelPrincipalAliasCheckRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelAuthUsername
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public putRepoV1NotificationEmail(
    orgSagebionetworksRepoModelAuthUsername: OrgSagebionetworksRepoModelAuthUsername,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any>;
  public putRepoV1NotificationEmail(
    orgSagebionetworksRepoModelAuthUsername: OrgSagebionetworksRepoModelAuthUsername,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public putRepoV1NotificationEmail(
    orgSagebionetworksRepoModelAuthUsername: OrgSagebionetworksRepoModelAuthUsername,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public putRepoV1NotificationEmail(
    orgSagebionetworksRepoModelAuthUsername: OrgSagebionetworksRepoModelAuthUsername,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelAuthUsername === null ||
      orgSagebionetworksRepoModelAuthUsername === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelAuthUsername was null or undefined when calling putRepoV1NotificationEmail.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/notificationEmail`;
    return this.httpClient.put<any>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelAuthUsername,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }
}
