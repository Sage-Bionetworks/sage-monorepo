/**
 * Synapse REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { ListWrapperOfColumnModel } from '../model/listWrapperOfColumnModel';
// @ts-ignore
import { OrgSagebionetworksRepoModelAsynchAsyncJobId } from '../model/orgSagebionetworksRepoModelAsynchAsyncJobId';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableColumnModel } from '../model/orgSagebionetworksRepoModelTableColumnModel';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableDownloadFromTableRequest } from '../model/orgSagebionetworksRepoModelTableDownloadFromTableRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableDownloadFromTableResult } from '../model/orgSagebionetworksRepoModelTableDownloadFromTableResult';
// @ts-ignore
import { OrgSagebionetworksRepoModelTablePaginatedColumnModels } from '../model/orgSagebionetworksRepoModelTablePaginatedColumnModels';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableQueryBundleRequest } from '../model/orgSagebionetworksRepoModelTableQueryBundleRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableQueryResultBundle } from '../model/orgSagebionetworksRepoModelTableQueryResultBundle';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableRowReferenceSet } from '../model/orgSagebionetworksRepoModelTableRowReferenceSet';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableSnapshotRequest } from '../model/orgSagebionetworksRepoModelTableSnapshotRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableSnapshotResponse } from '../model/orgSagebionetworksRepoModelTableSnapshotResponse';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableTableFileHandleResults } from '../model/orgSagebionetworksRepoModelTableTableFileHandleResults';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableTableUpdateTransactionRequest } from '../model/orgSagebionetworksRepoModelTableTableUpdateTransactionRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableTableUpdateTransactionResponse } from '../model/orgSagebionetworksRepoModelTableTableUpdateTransactionResponse';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableUploadToTablePreviewRequest } from '../model/orgSagebionetworksRepoModelTableUploadToTablePreviewRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableUploadToTablePreviewResult } from '../model/orgSagebionetworksRepoModelTableUploadToTablePreviewResult';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableUploadToTableRequest } from '../model/orgSagebionetworksRepoModelTableUploadToTableRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableUploadToTableResult } from '../model/orgSagebionetworksRepoModelTableUploadToTableResult';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableValidateDefiningSqlRequest } from '../model/orgSagebionetworksRepoModelTableValidateDefiningSqlRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableValidateDefiningSqlResponse } from '../model/orgSagebionetworksRepoModelTableValidateDefiningSqlResponse';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableViewColumnModelRequest } from '../model/orgSagebionetworksRepoModelTableViewColumnModelRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableViewColumnModelResponse } from '../model/orgSagebionetworksRepoModelTableViewColumnModelResponse';
// @ts-ignore
import { OrgSagebionetworksRepoModelTableViewEntityType } from '../model/orgSagebionetworksRepoModelTableViewEntityType';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
  providedIn: 'root',
})
export class TableServicesService {
  protected basePath = 'https://repo-prod.prod.sagebase.org';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration: Configuration,
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (Array.isArray(basePath) && basePath.length > 0) {
        basePath = basePath[0];
      }

      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  // @ts-ignore
  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)),
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}[${k}]` : k,
            )),
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * @param prefix When included, only columns with a name that starts with this             prefix will be returned.
   * @param limit Limits the size of the page returned. For example, a page size             of 10 require limit &#x3D; 10. The maximum Limit for this call is             100. The default Limit is 10;
   * @param offset The index of the pagination offset. For a page size of 10, the             first page would be at offset &#x3D; 0, and the second page would             be at offset &#x3D; 10.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1Column(
    prefix?: string,
    limit?: number,
    offset?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelTablePaginatedColumnModels>;
  public getRepoV1Column(
    prefix?: string,
    limit?: number,
    offset?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelTablePaginatedColumnModels>>;
  public getRepoV1Column(
    prefix?: string,
    limit?: number,
    offset?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelTablePaginatedColumnModels>>;
  public getRepoV1Column(
    prefix?: string,
    limit?: number,
    offset?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (prefix !== undefined && prefix !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>prefix,
        'prefix',
      );
    }
    if (limit !== undefined && limit !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters, <any>limit, 'limit');
    }
    if (offset !== undefined && offset !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>offset,
        'offset',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/column`;
    return this.httpClient.get<OrgSagebionetworksRepoModelTablePaginatedColumnModels>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param columnId The ID of the ColumnModel to get.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1ColumnColumnId(
    columnId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelTableColumnModel>;
  public getRepoV1ColumnColumnId(
    columnId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelTableColumnModel>>;
  public getRepoV1ColumnColumnId(
    columnId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelTableColumnModel>>;
  public getRepoV1ColumnColumnId(
    columnId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (columnId === null || columnId === undefined) {
      throw new Error(
        'Required parameter columnId was null or undefined when calling getRepoV1ColumnColumnId.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/column/${this.configuration.encodeParam({ name: 'columnId', value: columnId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.get<OrgSagebionetworksRepoModelTableColumnModel>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param viewEntityType The ,&lt;a href&#x3D;\&quot;${org.sagebionetworks.repo.model.table.ViewEntityType}\&quot;&gt;,entity                        type,&lt;/a&gt;, of the view, if omitted use entityview
   * @param viewTypeMask Bit mask representing the types to include in the view.                        Not required for a submission view. For an entity view                        following are the possible types: (type&#x3D;,&lt;mask_hex&gt;,):                        File&#x3D;0x01, Project&#x3D;0x02, Table&#x3D;0x04, Folder&#x3D;0x08,                        View&#x3D;0x10, Docker&#x3D;0x20, SubmissionView&#x3D;0x40, Dataset&#x3D;0x80,                         DatasetCollection&#x3D;0x100, MaterializedView&#x3D;0x200).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1ColumnTableviewDefaults(
    viewEntityType?: OrgSagebionetworksRepoModelTableViewEntityType,
    viewTypeMask?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<ListWrapperOfColumnModel>;
  public getRepoV1ColumnTableviewDefaults(
    viewEntityType?: OrgSagebionetworksRepoModelTableViewEntityType,
    viewTypeMask?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<ListWrapperOfColumnModel>>;
  public getRepoV1ColumnTableviewDefaults(
    viewEntityType?: OrgSagebionetworksRepoModelTableViewEntityType,
    viewTypeMask?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<ListWrapperOfColumnModel>>;
  public getRepoV1ColumnTableviewDefaults(
    viewEntityType?: OrgSagebionetworksRepoModelTableViewEntityType,
    viewTypeMask?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (viewEntityType !== undefined && viewEntityType !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>viewEntityType,
        'viewEntityType',
      );
    }
    if (viewTypeMask !== undefined && viewTypeMask !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>viewTypeMask,
        'viewTypeMask',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/column/tableview/defaults`;
    return this.httpClient.get<ListWrapperOfColumnModel>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param asyncToken
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1ColumnViewScopeAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelTableViewColumnModelResponse>;
  public getRepoV1ColumnViewScopeAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelTableViewColumnModelResponse>>;
  public getRepoV1ColumnViewScopeAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelTableViewColumnModelResponse>>;
  public getRepoV1ColumnViewScopeAsyncGetAsyncToken(
    asyncToken: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (asyncToken === null || asyncToken === undefined) {
      throw new Error(
        'Required parameter asyncToken was null or undefined when calling getRepoV1ColumnViewScopeAsyncGetAsyncToken.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/column/view/scope/async/get/${this.configuration.encodeParam({ name: 'asyncToken', value: asyncToken, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.get<OrgSagebionetworksRepoModelTableViewColumnModelResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id The ID of the TableEntity to get the ColumnModels for.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityIdColumn(
    id: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelTablePaginatedColumnModels>;
  public getRepoV1EntityIdColumn(
    id: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelTablePaginatedColumnModels>>;
  public getRepoV1EntityIdColumn(
    id: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelTablePaginatedColumnModels>>;
  public getRepoV1EntityIdColumn(
    id: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getRepoV1EntityIdColumn.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/column`;
    return this.httpClient.get<OrgSagebionetworksRepoModelTablePaginatedColumnModels>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id The ID of the FileEntity to get.
   * @param columnId
   * @param rowId
   * @param versionNumber
   * @param redirect When set to false, the URL will be returned as text/plain             instead of redirecting.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile(
    id: string,
    columnId: string,
    rowId: number,
    versionNumber: number,
    redirect?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<any>;
  public getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile(
    id: string,
    columnId: string,
    rowId: number,
    versionNumber: number,
    redirect?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile(
    id: string,
    columnId: string,
    rowId: number,
    versionNumber: number,
    redirect?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile(
    id: string,
    columnId: string,
    rowId: number,
    versionNumber: number,
    redirect?: boolean,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile.',
      );
    }
    if (columnId === null || columnId === undefined) {
      throw new Error(
        'Required parameter columnId was null or undefined when calling getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile.',
      );
    }
    if (rowId === null || rowId === undefined) {
      throw new Error(
        'Required parameter rowId was null or undefined when calling getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile.',
      );
    }
    if (versionNumber === null || versionNumber === undefined) {
      throw new Error(
        'Required parameter versionNumber was null or undefined when calling getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFile.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (redirect !== undefined && redirect !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>redirect,
        'redirect',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/table/column/${this.configuration.encodeParam({ name: 'columnId', value: columnId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/row/${this.configuration.encodeParam({ name: 'rowId', value: rowId, in: 'path', style: 'simple', explode: false, dataType: 'number', dataFormat: undefined })}/version/${this.configuration.encodeParam({ name: 'versionNumber', value: versionNumber, in: 'path', style: 'simple', explode: false, dataType: 'number', dataFormat: undefined })}/file`;
    return this.httpClient.get<any>(`${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param id The ID of the FileEntity to get.
   * @param columnId
   * @param rowId
   * @param versionNumber
   * @param redirect When set to false, the URL will be returned as text/plain             instead of redirecting.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview(
    id: string,
    columnId: string,
    rowId: number,
    versionNumber: number,
    redirect?: boolean,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<any>;
  public getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview(
    id: string,
    columnId: string,
    rowId: number,
    versionNumber: number,
    redirect?: boolean,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview(
    id: string,
    columnId: string,
    rowId: number,
    versionNumber: number,
    redirect?: boolean,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview(
    id: string,
    columnId: string,
    rowId: number,
    versionNumber: number,
    redirect?: boolean,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'text/plain'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview.',
      );
    }
    if (columnId === null || columnId === undefined) {
      throw new Error(
        'Required parameter columnId was null or undefined when calling getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview.',
      );
    }
    if (rowId === null || rowId === undefined) {
      throw new Error(
        'Required parameter rowId was null or undefined when calling getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview.',
      );
    }
    if (versionNumber === null || versionNumber === undefined) {
      throw new Error(
        'Required parameter versionNumber was null or undefined when calling getRepoV1EntityIdTableColumnColumnIdRowRowIdVersionVersionNumberFilepreview.',
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (redirect !== undefined && redirect !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>redirect,
        'redirect',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['text/plain'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/table/column/${this.configuration.encodeParam({ name: 'columnId', value: columnId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/row/${this.configuration.encodeParam({ name: 'rowId', value: rowId, in: 'path', style: 'simple', explode: false, dataType: 'number', dataFormat: undefined })}/version/${this.configuration.encodeParam({ name: 'versionNumber', value: versionNumber, in: 'path', style: 'simple', explode: false, dataType: 'number', dataFormat: undefined })}/filepreview`;
    return this.httpClient.get<any>(`${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param id The ID of the TableEntity.
   * @param asyncToken
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelTableDownloadFromTableResult>;
  public getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelTableDownloadFromTableResult>>;
  public getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelTableDownloadFromTableResult>>;
  public getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken.',
      );
    }
    if (asyncToken === null || asyncToken === undefined) {
      throw new Error(
        'Required parameter asyncToken was null or undefined when calling getRepoV1EntityIdTableDownloadCsvAsyncGetAsyncToken.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/table/download/csv/async/get/${this.configuration.encodeParam({ name: 'asyncToken', value: asyncToken, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.get<OrgSagebionetworksRepoModelTableDownloadFromTableResult>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id The ID of the TableEntity.
   * @param asyncToken
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityIdTableQueryAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelTableQueryResultBundle>;
  public getRepoV1EntityIdTableQueryAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelTableQueryResultBundle>>;
  public getRepoV1EntityIdTableQueryAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelTableQueryResultBundle>>;
  public getRepoV1EntityIdTableQueryAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getRepoV1EntityIdTableQueryAsyncGetAsyncToken.',
      );
    }
    if (asyncToken === null || asyncToken === undefined) {
      throw new Error(
        'Required parameter asyncToken was null or undefined when calling getRepoV1EntityIdTableQueryAsyncGetAsyncToken.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/table/query/async/get/${this.configuration.encodeParam({ name: 'asyncToken', value: asyncToken, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.get<OrgSagebionetworksRepoModelTableQueryResultBundle>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id The ID of the table entity.
   * @param asyncToken The token returned when the job was started.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityIdTableTransactionAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelTableTableUpdateTransactionResponse>;
  public getRepoV1EntityIdTableTransactionAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelTableTableUpdateTransactionResponse>>;
  public getRepoV1EntityIdTableTransactionAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelTableTableUpdateTransactionResponse>>;
  public getRepoV1EntityIdTableTransactionAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getRepoV1EntityIdTableTransactionAsyncGetAsyncToken.',
      );
    }
    if (asyncToken === null || asyncToken === undefined) {
      throw new Error(
        'Required parameter asyncToken was null or undefined when calling getRepoV1EntityIdTableTransactionAsyncGetAsyncToken.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/table/transaction/async/get/${this.configuration.encodeParam({ name: 'asyncToken', value: asyncToken, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.get<OrgSagebionetworksRepoModelTableTableUpdateTransactionResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id The ID of the TableEntity.
   * @param asyncToken
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelTableUploadToTableResult>;
  public getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelTableUploadToTableResult>>;
  public getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelTableUploadToTableResult>>;
  public getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken(
    id: string,
    asyncToken: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken.',
      );
    }
    if (asyncToken === null || asyncToken === undefined) {
      throw new Error(
        'Required parameter asyncToken was null or undefined when calling getRepoV1EntityIdTableUploadCsvAsyncGetAsyncToken.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/table/upload/csv/async/get/${this.configuration.encodeParam({ name: 'asyncToken', value: asyncToken, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.get<OrgSagebionetworksRepoModelTableUploadToTableResult>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param asyncToken
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelTableUploadToTablePreviewResult>;
  public getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelTableUploadToTablePreviewResult>>;
  public getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken(
    asyncToken: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelTableUploadToTablePreviewResult>>;
  public getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken(
    asyncToken: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (asyncToken === null || asyncToken === undefined) {
      throw new Error(
        'Required parameter asyncToken was null or undefined when calling getRepoV1TableUploadCsvPreviewAsyncGetAsyncToken.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/table/upload/csv/preview/async/get/${this.configuration.encodeParam({ name: 'asyncToken', value: asyncToken, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.get<OrgSagebionetworksRepoModelTableUploadToTablePreviewResult>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelTableColumnModel
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1Column(
    orgSagebionetworksRepoModelTableColumnModel: OrgSagebionetworksRepoModelTableColumnModel,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelTableColumnModel>;
  public postRepoV1Column(
    orgSagebionetworksRepoModelTableColumnModel: OrgSagebionetworksRepoModelTableColumnModel,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelTableColumnModel>>;
  public postRepoV1Column(
    orgSagebionetworksRepoModelTableColumnModel: OrgSagebionetworksRepoModelTableColumnModel,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelTableColumnModel>>;
  public postRepoV1Column(
    orgSagebionetworksRepoModelTableColumnModel: OrgSagebionetworksRepoModelTableColumnModel,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelTableColumnModel === null ||
      orgSagebionetworksRepoModelTableColumnModel === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelTableColumnModel was null or undefined when calling postRepoV1Column.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/column`;
    return this.httpClient.post<OrgSagebionetworksRepoModelTableColumnModel>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelTableColumnModel,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param listWrapperOfColumnModel
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1ColumnBatch(
    listWrapperOfColumnModel: ListWrapperOfColumnModel,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<ListWrapperOfColumnModel>;
  public postRepoV1ColumnBatch(
    listWrapperOfColumnModel: ListWrapperOfColumnModel,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<ListWrapperOfColumnModel>>;
  public postRepoV1ColumnBatch(
    listWrapperOfColumnModel: ListWrapperOfColumnModel,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<ListWrapperOfColumnModel>>;
  public postRepoV1ColumnBatch(
    listWrapperOfColumnModel: ListWrapperOfColumnModel,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (listWrapperOfColumnModel === null || listWrapperOfColumnModel === undefined) {
      throw new Error(
        'Required parameter listWrapperOfColumnModel was null or undefined when calling postRepoV1ColumnBatch.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/column/batch`;
    return this.httpClient.post<ListWrapperOfColumnModel>(
      `${this.configuration.basePath}${localVarPath}`,
      listWrapperOfColumnModel,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelTableViewColumnModelRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1ColumnViewScopeAsyncStart(
    orgSagebionetworksRepoModelTableViewColumnModelRequest: OrgSagebionetworksRepoModelTableViewColumnModelRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelAsynchAsyncJobId>;
  public postRepoV1ColumnViewScopeAsyncStart(
    orgSagebionetworksRepoModelTableViewColumnModelRequest: OrgSagebionetworksRepoModelTableViewColumnModelRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postRepoV1ColumnViewScopeAsyncStart(
    orgSagebionetworksRepoModelTableViewColumnModelRequest: OrgSagebionetworksRepoModelTableViewColumnModelRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postRepoV1ColumnViewScopeAsyncStart(
    orgSagebionetworksRepoModelTableViewColumnModelRequest: OrgSagebionetworksRepoModelTableViewColumnModelRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelTableViewColumnModelRequest === null ||
      orgSagebionetworksRepoModelTableViewColumnModelRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelTableViewColumnModelRequest was null or undefined when calling postRepoV1ColumnViewScopeAsyncStart.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/column/view/scope/async/start`;
    return this.httpClient.post<OrgSagebionetworksRepoModelAsynchAsyncJobId>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelTableViewColumnModelRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id The ID of the TableEntity.
   * @param orgSagebionetworksRepoModelTableDownloadFromTableRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1EntityIdTableDownloadCsvAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableDownloadFromTableRequest: OrgSagebionetworksRepoModelTableDownloadFromTableRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelAsynchAsyncJobId>;
  public postRepoV1EntityIdTableDownloadCsvAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableDownloadFromTableRequest: OrgSagebionetworksRepoModelTableDownloadFromTableRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postRepoV1EntityIdTableDownloadCsvAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableDownloadFromTableRequest: OrgSagebionetworksRepoModelTableDownloadFromTableRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postRepoV1EntityIdTableDownloadCsvAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableDownloadFromTableRequest: OrgSagebionetworksRepoModelTableDownloadFromTableRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling postRepoV1EntityIdTableDownloadCsvAsyncStart.',
      );
    }
    if (
      orgSagebionetworksRepoModelTableDownloadFromTableRequest === null ||
      orgSagebionetworksRepoModelTableDownloadFromTableRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelTableDownloadFromTableRequest was null or undefined when calling postRepoV1EntityIdTableDownloadCsvAsyncStart.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/table/download/csv/async/start`;
    return this.httpClient.post<OrgSagebionetworksRepoModelAsynchAsyncJobId>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelTableDownloadFromTableRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id The ID of the TableEntity to append rows to.
   * @param orgSagebionetworksRepoModelTableRowReferenceSet
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1EntityIdTableFilehandles(
    id: string,
    orgSagebionetworksRepoModelTableRowReferenceSet: OrgSagebionetworksRepoModelTableRowReferenceSet,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelTableTableFileHandleResults>;
  public postRepoV1EntityIdTableFilehandles(
    id: string,
    orgSagebionetworksRepoModelTableRowReferenceSet: OrgSagebionetworksRepoModelTableRowReferenceSet,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelTableTableFileHandleResults>>;
  public postRepoV1EntityIdTableFilehandles(
    id: string,
    orgSagebionetworksRepoModelTableRowReferenceSet: OrgSagebionetworksRepoModelTableRowReferenceSet,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelTableTableFileHandleResults>>;
  public postRepoV1EntityIdTableFilehandles(
    id: string,
    orgSagebionetworksRepoModelTableRowReferenceSet: OrgSagebionetworksRepoModelTableRowReferenceSet,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling postRepoV1EntityIdTableFilehandles.',
      );
    }
    if (
      orgSagebionetworksRepoModelTableRowReferenceSet === null ||
      orgSagebionetworksRepoModelTableRowReferenceSet === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelTableRowReferenceSet was null or undefined when calling postRepoV1EntityIdTableFilehandles.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/table/filehandles`;
    return this.httpClient.post<OrgSagebionetworksRepoModelTableTableFileHandleResults>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelTableRowReferenceSet,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id The ID of the TableEntity.
   * @param orgSagebionetworksRepoModelTableQueryBundleRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1EntityIdTableQueryAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableQueryBundleRequest: OrgSagebionetworksRepoModelTableQueryBundleRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelAsynchAsyncJobId>;
  public postRepoV1EntityIdTableQueryAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableQueryBundleRequest: OrgSagebionetworksRepoModelTableQueryBundleRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postRepoV1EntityIdTableQueryAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableQueryBundleRequest: OrgSagebionetworksRepoModelTableQueryBundleRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postRepoV1EntityIdTableQueryAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableQueryBundleRequest: OrgSagebionetworksRepoModelTableQueryBundleRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling postRepoV1EntityIdTableQueryAsyncStart.',
      );
    }
    if (
      orgSagebionetworksRepoModelTableQueryBundleRequest === null ||
      orgSagebionetworksRepoModelTableQueryBundleRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelTableQueryBundleRequest was null or undefined when calling postRepoV1EntityIdTableQueryAsyncStart.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/table/query/async/start`;
    return this.httpClient.post<OrgSagebionetworksRepoModelAsynchAsyncJobId>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelTableQueryBundleRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id
   * @param orgSagebionetworksRepoModelTableSnapshotRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1EntityIdTableSnapshot(
    id: string,
    orgSagebionetworksRepoModelTableSnapshotRequest: OrgSagebionetworksRepoModelTableSnapshotRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelTableSnapshotResponse>;
  public postRepoV1EntityIdTableSnapshot(
    id: string,
    orgSagebionetworksRepoModelTableSnapshotRequest: OrgSagebionetworksRepoModelTableSnapshotRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelTableSnapshotResponse>>;
  public postRepoV1EntityIdTableSnapshot(
    id: string,
    orgSagebionetworksRepoModelTableSnapshotRequest: OrgSagebionetworksRepoModelTableSnapshotRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelTableSnapshotResponse>>;
  public postRepoV1EntityIdTableSnapshot(
    id: string,
    orgSagebionetworksRepoModelTableSnapshotRequest: OrgSagebionetworksRepoModelTableSnapshotRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling postRepoV1EntityIdTableSnapshot.',
      );
    }
    if (
      orgSagebionetworksRepoModelTableSnapshotRequest === null ||
      orgSagebionetworksRepoModelTableSnapshotRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelTableSnapshotRequest was null or undefined when calling postRepoV1EntityIdTableSnapshot.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/table/snapshot`;
    return this.httpClient.post<OrgSagebionetworksRepoModelTableSnapshotResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelTableSnapshotRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id The ID of the TableEntity to update.
   * @param orgSagebionetworksRepoModelTableTableUpdateTransactionRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1EntityIdTableTransactionAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableTableUpdateTransactionRequest: OrgSagebionetworksRepoModelTableTableUpdateTransactionRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelAsynchAsyncJobId>;
  public postRepoV1EntityIdTableTransactionAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableTableUpdateTransactionRequest: OrgSagebionetworksRepoModelTableTableUpdateTransactionRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postRepoV1EntityIdTableTransactionAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableTableUpdateTransactionRequest: OrgSagebionetworksRepoModelTableTableUpdateTransactionRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postRepoV1EntityIdTableTransactionAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableTableUpdateTransactionRequest: OrgSagebionetworksRepoModelTableTableUpdateTransactionRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling postRepoV1EntityIdTableTransactionAsyncStart.',
      );
    }
    if (
      orgSagebionetworksRepoModelTableTableUpdateTransactionRequest === null ||
      orgSagebionetworksRepoModelTableTableUpdateTransactionRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelTableTableUpdateTransactionRequest was null or undefined when calling postRepoV1EntityIdTableTransactionAsyncStart.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/table/transaction/async/start`;
    return this.httpClient.post<OrgSagebionetworksRepoModelAsynchAsyncJobId>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelTableTableUpdateTransactionRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param id The ID of the TableEntity.
   * @param orgSagebionetworksRepoModelTableUploadToTableRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1EntityIdTableUploadCsvAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableUploadToTableRequest: OrgSagebionetworksRepoModelTableUploadToTableRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelAsynchAsyncJobId>;
  public postRepoV1EntityIdTableUploadCsvAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableUploadToTableRequest: OrgSagebionetworksRepoModelTableUploadToTableRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postRepoV1EntityIdTableUploadCsvAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableUploadToTableRequest: OrgSagebionetworksRepoModelTableUploadToTableRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postRepoV1EntityIdTableUploadCsvAsyncStart(
    id: string,
    orgSagebionetworksRepoModelTableUploadToTableRequest: OrgSagebionetworksRepoModelTableUploadToTableRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling postRepoV1EntityIdTableUploadCsvAsyncStart.',
      );
    }
    if (
      orgSagebionetworksRepoModelTableUploadToTableRequest === null ||
      orgSagebionetworksRepoModelTableUploadToTableRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelTableUploadToTableRequest was null or undefined when calling postRepoV1EntityIdTableUploadCsvAsyncStart.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/entity/${this.configuration.encodeParam({ name: 'id', value: id, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/table/upload/csv/async/start`;
    return this.httpClient.post<OrgSagebionetworksRepoModelAsynchAsyncJobId>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelTableUploadToTableRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelTableUploadToTablePreviewRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1TableUploadCsvPreviewAsyncStart(
    orgSagebionetworksRepoModelTableUploadToTablePreviewRequest: OrgSagebionetworksRepoModelTableUploadToTablePreviewRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelAsynchAsyncJobId>;
  public postRepoV1TableUploadCsvPreviewAsyncStart(
    orgSagebionetworksRepoModelTableUploadToTablePreviewRequest: OrgSagebionetworksRepoModelTableUploadToTablePreviewRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postRepoV1TableUploadCsvPreviewAsyncStart(
    orgSagebionetworksRepoModelTableUploadToTablePreviewRequest: OrgSagebionetworksRepoModelTableUploadToTablePreviewRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelAsynchAsyncJobId>>;
  public postRepoV1TableUploadCsvPreviewAsyncStart(
    orgSagebionetworksRepoModelTableUploadToTablePreviewRequest: OrgSagebionetworksRepoModelTableUploadToTablePreviewRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelTableUploadToTablePreviewRequest === null ||
      orgSagebionetworksRepoModelTableUploadToTablePreviewRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelTableUploadToTablePreviewRequest was null or undefined when calling postRepoV1TableUploadCsvPreviewAsyncStart.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/table/upload/csv/preview/async/start`;
    return this.httpClient.post<OrgSagebionetworksRepoModelAsynchAsyncJobId>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelTableUploadToTablePreviewRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelTableValidateDefiningSqlRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1ValidateDefiningSql(
    orgSagebionetworksRepoModelTableValidateDefiningSqlRequest: OrgSagebionetworksRepoModelTableValidateDefiningSqlRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelTableValidateDefiningSqlResponse>;
  public postRepoV1ValidateDefiningSql(
    orgSagebionetworksRepoModelTableValidateDefiningSqlRequest: OrgSagebionetworksRepoModelTableValidateDefiningSqlRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelTableValidateDefiningSqlResponse>>;
  public postRepoV1ValidateDefiningSql(
    orgSagebionetworksRepoModelTableValidateDefiningSqlRequest: OrgSagebionetworksRepoModelTableValidateDefiningSqlRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelTableValidateDefiningSqlResponse>>;
  public postRepoV1ValidateDefiningSql(
    orgSagebionetworksRepoModelTableValidateDefiningSqlRequest: OrgSagebionetworksRepoModelTableValidateDefiningSqlRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelTableValidateDefiningSqlRequest === null ||
      orgSagebionetworksRepoModelTableValidateDefiningSqlRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelTableValidateDefiningSqlRequest was null or undefined when calling postRepoV1ValidateDefiningSql.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/validateDefiningSql`;
    return this.httpClient.post<OrgSagebionetworksRepoModelTableValidateDefiningSqlResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelTableValidateDefiningSqlRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }
}
