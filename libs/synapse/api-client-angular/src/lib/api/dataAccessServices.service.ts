/**
 * Synapse REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { OrgSagebionetworksRepoModelDataaccessAccessRequirementStatus } from '../model/orgSagebionetworksRepoModelDataaccessAccessRequirementStatus';
// @ts-ignore
import { OrgSagebionetworksRepoModelDataaccessCreateSubmissionRequest } from '../model/orgSagebionetworksRepoModelDataaccessCreateSubmissionRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelDataaccessOpenSubmissionPage } from '../model/orgSagebionetworksRepoModelDataaccessOpenSubmissionPage';
// @ts-ignore
import { OrgSagebionetworksRepoModelDataaccessRequestInterface } from '../model/orgSagebionetworksRepoModelDataaccessRequestInterface';
// @ts-ignore
import { OrgSagebionetworksRepoModelDataaccessResearchProject } from '../model/orgSagebionetworksRepoModelDataaccessResearchProject';
// @ts-ignore
import { OrgSagebionetworksRepoModelDataaccessSubmission } from '../model/orgSagebionetworksRepoModelDataaccessSubmission';
// @ts-ignore
import { OrgSagebionetworksRepoModelDataaccessSubmissionInfoPage } from '../model/orgSagebionetworksRepoModelDataaccessSubmissionInfoPage';
// @ts-ignore
import { OrgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest } from '../model/orgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelDataaccessSubmissionPage } from '../model/orgSagebionetworksRepoModelDataaccessSubmissionPage';
// @ts-ignore
import { OrgSagebionetworksRepoModelDataaccessSubmissionPageRequest } from '../model/orgSagebionetworksRepoModelDataaccessSubmissionPageRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelDataaccessSubmissionSearchRequest } from '../model/orgSagebionetworksRepoModelDataaccessSubmissionSearchRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelDataaccessSubmissionSearchResponse } from '../model/orgSagebionetworksRepoModelDataaccessSubmissionSearchResponse';
// @ts-ignore
import { OrgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest } from '../model/orgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelDataaccessSubmissionStatus } from '../model/orgSagebionetworksRepoModelDataaccessSubmissionStatus';
// @ts-ignore
import { OrgSagebionetworksRepoModelRestrictionInformationBatchRequest } from '../model/orgSagebionetworksRepoModelRestrictionInformationBatchRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelRestrictionInformationBatchResponse } from '../model/orgSagebionetworksRepoModelRestrictionInformationBatchResponse';
// @ts-ignore
import { OrgSagebionetworksRepoModelRestrictionInformationRequest } from '../model/orgSagebionetworksRepoModelRestrictionInformationRequest';
// @ts-ignore
import { OrgSagebionetworksRepoModelRestrictionInformationResponse } from '../model/orgSagebionetworksRepoModelRestrictionInformationResponse';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
  providedIn: 'root',
})
export class DataAccessServicesService {
  protected basePath = 'https://repo-prod.prod.sagebase.org';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration: Configuration,
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (Array.isArray(basePath) && basePath.length > 0) {
        basePath = basePath[0];
      }

      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  // @ts-ignore
  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)),
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}[${k}]` : k,
            )),
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * @param submissionId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteRepoV1DataAccessSubmissionSubmissionId(
    submissionId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any>;
  public deleteRepoV1DataAccessSubmissionSubmissionId(
    submissionId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpResponse<any>>;
  public deleteRepoV1DataAccessSubmissionSubmissionId(
    submissionId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<HttpEvent<any>>;
  public deleteRepoV1DataAccessSubmissionSubmissionId(
    submissionId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext },
  ): Observable<any> {
    if (submissionId === null || submissionId === undefined) {
      throw new Error(
        'Required parameter submissionId was null or undefined when calling deleteRepoV1DataAccessSubmissionSubmissionId.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/dataAccessSubmission/${this.configuration.encodeParam({ name: 'submissionId', value: submissionId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.delete<any>(`${this.configuration.basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      withCredentials: this.configuration.withCredentials,
      headers: localVarHeaders,
      observe: observe,
      reportProgress: reportProgress,
    });
  }

  /**
   * @param requirementId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1AccessRequirementRequirementIdDataAccessRequestForUpdate(
    requirementId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelDataaccessRequestInterface>;
  public getRepoV1AccessRequirementRequirementIdDataAccessRequestForUpdate(
    requirementId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelDataaccessRequestInterface>>;
  public getRepoV1AccessRequirementRequirementIdDataAccessRequestForUpdate(
    requirementId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelDataaccessRequestInterface>>;
  public getRepoV1AccessRequirementRequirementIdDataAccessRequestForUpdate(
    requirementId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (requirementId === null || requirementId === undefined) {
      throw new Error(
        'Required parameter requirementId was null or undefined when calling getRepoV1AccessRequirementRequirementIdDataAccessRequestForUpdate.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/accessRequirement/${this.configuration.encodeParam({ name: 'requirementId', value: requirementId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/dataAccessRequestForUpdate`;
    return this.httpClient.get<OrgSagebionetworksRepoModelDataaccessRequestInterface>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param requirementId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1AccessRequirementRequirementIdResearchProjectForUpdate(
    requirementId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelDataaccessResearchProject>;
  public getRepoV1AccessRequirementRequirementIdResearchProjectForUpdate(
    requirementId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelDataaccessResearchProject>>;
  public getRepoV1AccessRequirementRequirementIdResearchProjectForUpdate(
    requirementId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelDataaccessResearchProject>>;
  public getRepoV1AccessRequirementRequirementIdResearchProjectForUpdate(
    requirementId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (requirementId === null || requirementId === undefined) {
      throw new Error(
        'Required parameter requirementId was null or undefined when calling getRepoV1AccessRequirementRequirementIdResearchProjectForUpdate.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/accessRequirement/${this.configuration.encodeParam({ name: 'requirementId', value: requirementId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/researchProjectForUpdate`;
    return this.httpClient.get<OrgSagebionetworksRepoModelDataaccessResearchProject>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param requirementId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1AccessRequirementRequirementIdStatus(
    requirementId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelDataaccessAccessRequirementStatus>;
  public getRepoV1AccessRequirementRequirementIdStatus(
    requirementId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelDataaccessAccessRequirementStatus>>;
  public getRepoV1AccessRequirementRequirementIdStatus(
    requirementId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelDataaccessAccessRequirementStatus>>;
  public getRepoV1AccessRequirementRequirementIdStatus(
    requirementId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (requirementId === null || requirementId === undefined) {
      throw new Error(
        'Required parameter requirementId was null or undefined when calling getRepoV1AccessRequirementRequirementIdStatus.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/accessRequirement/${this.configuration.encodeParam({ name: 'requirementId', value: requirementId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/status`;
    return this.httpClient.get<OrgSagebionetworksRepoModelDataaccessAccessRequirementStatus>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param nextPageToken
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1DataAccessSubmissionOpenSubmissions(
    nextPageToken?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelDataaccessOpenSubmissionPage>;
  public getRepoV1DataAccessSubmissionOpenSubmissions(
    nextPageToken?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelDataaccessOpenSubmissionPage>>;
  public getRepoV1DataAccessSubmissionOpenSubmissions(
    nextPageToken?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelDataaccessOpenSubmissionPage>>;
  public getRepoV1DataAccessSubmissionOpenSubmissions(
    nextPageToken?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (nextPageToken !== undefined && nextPageToken !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>nextPageToken,
        'nextPageToken',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/dataAccessSubmission/openSubmissions`;
    return this.httpClient.get<OrgSagebionetworksRepoModelDataaccessOpenSubmissionPage>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param submissionId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRepoV1DataAccessSubmissionSubmissionId(
    submissionId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelDataaccessSubmission>;
  public getRepoV1DataAccessSubmissionSubmissionId(
    submissionId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelDataaccessSubmission>>;
  public getRepoV1DataAccessSubmissionSubmissionId(
    submissionId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelDataaccessSubmission>>;
  public getRepoV1DataAccessSubmissionSubmissionId(
    submissionId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (submissionId === null || submissionId === undefined) {
      throw new Error(
        'Required parameter submissionId was null or undefined when calling getRepoV1DataAccessSubmissionSubmissionId.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/dataAccessSubmission/${this.configuration.encodeParam({ name: 'submissionId', value: submissionId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.get<OrgSagebionetworksRepoModelDataaccessSubmission>(
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param requirementId
   * @param orgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1AccessRequirementRequirementIdApprovedSubmissionInfo(
    requirementId: string,
    orgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest: OrgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelDataaccessSubmissionInfoPage>;
  public postRepoV1AccessRequirementRequirementIdApprovedSubmissionInfo(
    requirementId: string,
    orgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest: OrgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelDataaccessSubmissionInfoPage>>;
  public postRepoV1AccessRequirementRequirementIdApprovedSubmissionInfo(
    requirementId: string,
    orgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest: OrgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelDataaccessSubmissionInfoPage>>;
  public postRepoV1AccessRequirementRequirementIdApprovedSubmissionInfo(
    requirementId: string,
    orgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest: OrgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (requirementId === null || requirementId === undefined) {
      throw new Error(
        'Required parameter requirementId was null or undefined when calling postRepoV1AccessRequirementRequirementIdApprovedSubmissionInfo.',
      );
    }
    if (
      orgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest === null ||
      orgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest was null or undefined when calling postRepoV1AccessRequirementRequirementIdApprovedSubmissionInfo.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/accessRequirement/${this.configuration.encodeParam({ name: 'requirementId', value: requirementId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/approvedSubmissionInfo`;
    return this.httpClient.post<OrgSagebionetworksRepoModelDataaccessSubmissionInfoPage>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelDataaccessSubmissionInfoPageRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param requirementId
   * @param orgSagebionetworksRepoModelDataaccessSubmissionPageRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1AccessRequirementRequirementIdSubmissions(
    requirementId: string,
    orgSagebionetworksRepoModelDataaccessSubmissionPageRequest: OrgSagebionetworksRepoModelDataaccessSubmissionPageRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelDataaccessSubmissionPage>;
  public postRepoV1AccessRequirementRequirementIdSubmissions(
    requirementId: string,
    orgSagebionetworksRepoModelDataaccessSubmissionPageRequest: OrgSagebionetworksRepoModelDataaccessSubmissionPageRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelDataaccessSubmissionPage>>;
  public postRepoV1AccessRequirementRequirementIdSubmissions(
    requirementId: string,
    orgSagebionetworksRepoModelDataaccessSubmissionPageRequest: OrgSagebionetworksRepoModelDataaccessSubmissionPageRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelDataaccessSubmissionPage>>;
  public postRepoV1AccessRequirementRequirementIdSubmissions(
    requirementId: string,
    orgSagebionetworksRepoModelDataaccessSubmissionPageRequest: OrgSagebionetworksRepoModelDataaccessSubmissionPageRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (requirementId === null || requirementId === undefined) {
      throw new Error(
        'Required parameter requirementId was null or undefined when calling postRepoV1AccessRequirementRequirementIdSubmissions.',
      );
    }
    if (
      orgSagebionetworksRepoModelDataaccessSubmissionPageRequest === null ||
      orgSagebionetworksRepoModelDataaccessSubmissionPageRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelDataaccessSubmissionPageRequest was null or undefined when calling postRepoV1AccessRequirementRequirementIdSubmissions.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/accessRequirement/${this.configuration.encodeParam({ name: 'requirementId', value: requirementId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/submissions`;
    return this.httpClient.post<OrgSagebionetworksRepoModelDataaccessSubmissionPage>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelDataaccessSubmissionPageRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelDataaccessRequestInterface
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1DataAccessRequest(
    orgSagebionetworksRepoModelDataaccessRequestInterface: OrgSagebionetworksRepoModelDataaccessRequestInterface,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelDataaccessRequestInterface>;
  public postRepoV1DataAccessRequest(
    orgSagebionetworksRepoModelDataaccessRequestInterface: OrgSagebionetworksRepoModelDataaccessRequestInterface,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelDataaccessRequestInterface>>;
  public postRepoV1DataAccessRequest(
    orgSagebionetworksRepoModelDataaccessRequestInterface: OrgSagebionetworksRepoModelDataaccessRequestInterface,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelDataaccessRequestInterface>>;
  public postRepoV1DataAccessRequest(
    orgSagebionetworksRepoModelDataaccessRequestInterface: OrgSagebionetworksRepoModelDataaccessRequestInterface,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelDataaccessRequestInterface === null ||
      orgSagebionetworksRepoModelDataaccessRequestInterface === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelDataaccessRequestInterface was null or undefined when calling postRepoV1DataAccessRequest.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/dataAccessRequest`;
    return this.httpClient.post<OrgSagebionetworksRepoModelDataaccessRequestInterface>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelDataaccessRequestInterface,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param requestId - The ID of the request object.
   * @param orgSagebionetworksRepoModelDataaccessCreateSubmissionRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1DataAccessRequestRequestIdSubmission(
    requestId: string,
    orgSagebionetworksRepoModelDataaccessCreateSubmissionRequest: OrgSagebionetworksRepoModelDataaccessCreateSubmissionRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelDataaccessSubmissionStatus>;
  public postRepoV1DataAccessRequestRequestIdSubmission(
    requestId: string,
    orgSagebionetworksRepoModelDataaccessCreateSubmissionRequest: OrgSagebionetworksRepoModelDataaccessCreateSubmissionRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelDataaccessSubmissionStatus>>;
  public postRepoV1DataAccessRequestRequestIdSubmission(
    requestId: string,
    orgSagebionetworksRepoModelDataaccessCreateSubmissionRequest: OrgSagebionetworksRepoModelDataaccessCreateSubmissionRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelDataaccessSubmissionStatus>>;
  public postRepoV1DataAccessRequestRequestIdSubmission(
    requestId: string,
    orgSagebionetworksRepoModelDataaccessCreateSubmissionRequest: OrgSagebionetworksRepoModelDataaccessCreateSubmissionRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (requestId === null || requestId === undefined) {
      throw new Error(
        'Required parameter requestId was null or undefined when calling postRepoV1DataAccessRequestRequestIdSubmission.',
      );
    }
    if (
      orgSagebionetworksRepoModelDataaccessCreateSubmissionRequest === null ||
      orgSagebionetworksRepoModelDataaccessCreateSubmissionRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelDataaccessCreateSubmissionRequest was null or undefined when calling postRepoV1DataAccessRequestRequestIdSubmission.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/dataAccessRequest/${this.configuration.encodeParam({ name: 'requestId', value: requestId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/submission`;
    return this.httpClient.post<OrgSagebionetworksRepoModelDataaccessSubmissionStatus>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelDataaccessCreateSubmissionRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelDataaccessSubmissionSearchRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1DataAccessSubmissionSearch(
    orgSagebionetworksRepoModelDataaccessSubmissionSearchRequest: OrgSagebionetworksRepoModelDataaccessSubmissionSearchRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelDataaccessSubmissionSearchResponse>;
  public postRepoV1DataAccessSubmissionSearch(
    orgSagebionetworksRepoModelDataaccessSubmissionSearchRequest: OrgSagebionetworksRepoModelDataaccessSubmissionSearchRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelDataaccessSubmissionSearchResponse>>;
  public postRepoV1DataAccessSubmissionSearch(
    orgSagebionetworksRepoModelDataaccessSubmissionSearchRequest: OrgSagebionetworksRepoModelDataaccessSubmissionSearchRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelDataaccessSubmissionSearchResponse>>;
  public postRepoV1DataAccessSubmissionSearch(
    orgSagebionetworksRepoModelDataaccessSubmissionSearchRequest: OrgSagebionetworksRepoModelDataaccessSubmissionSearchRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelDataaccessSubmissionSearchRequest === null ||
      orgSagebionetworksRepoModelDataaccessSubmissionSearchRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelDataaccessSubmissionSearchRequest was null or undefined when calling postRepoV1DataAccessSubmissionSearch.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/dataAccessSubmission/search`;
    return this.httpClient.post<OrgSagebionetworksRepoModelDataaccessSubmissionSearchResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelDataaccessSubmissionSearchRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelDataaccessResearchProject
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1ResearchProject(
    orgSagebionetworksRepoModelDataaccessResearchProject: OrgSagebionetworksRepoModelDataaccessResearchProject,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelDataaccessResearchProject>;
  public postRepoV1ResearchProject(
    orgSagebionetworksRepoModelDataaccessResearchProject: OrgSagebionetworksRepoModelDataaccessResearchProject,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelDataaccessResearchProject>>;
  public postRepoV1ResearchProject(
    orgSagebionetworksRepoModelDataaccessResearchProject: OrgSagebionetworksRepoModelDataaccessResearchProject,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelDataaccessResearchProject>>;
  public postRepoV1ResearchProject(
    orgSagebionetworksRepoModelDataaccessResearchProject: OrgSagebionetworksRepoModelDataaccessResearchProject,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelDataaccessResearchProject === null ||
      orgSagebionetworksRepoModelDataaccessResearchProject === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelDataaccessResearchProject was null or undefined when calling postRepoV1ResearchProject.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/researchProject`;
    return this.httpClient.post<OrgSagebionetworksRepoModelDataaccessResearchProject>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelDataaccessResearchProject,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelRestrictionInformationRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1RestrictionInformation(
    orgSagebionetworksRepoModelRestrictionInformationRequest: OrgSagebionetworksRepoModelRestrictionInformationRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelRestrictionInformationResponse>;
  public postRepoV1RestrictionInformation(
    orgSagebionetworksRepoModelRestrictionInformationRequest: OrgSagebionetworksRepoModelRestrictionInformationRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelRestrictionInformationResponse>>;
  public postRepoV1RestrictionInformation(
    orgSagebionetworksRepoModelRestrictionInformationRequest: OrgSagebionetworksRepoModelRestrictionInformationRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelRestrictionInformationResponse>>;
  public postRepoV1RestrictionInformation(
    orgSagebionetworksRepoModelRestrictionInformationRequest: OrgSagebionetworksRepoModelRestrictionInformationRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelRestrictionInformationRequest === null ||
      orgSagebionetworksRepoModelRestrictionInformationRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelRestrictionInformationRequest was null or undefined when calling postRepoV1RestrictionInformation.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/restrictionInformation`;
    return this.httpClient.post<OrgSagebionetworksRepoModelRestrictionInformationResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelRestrictionInformationRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param orgSagebionetworksRepoModelRestrictionInformationBatchRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postRepoV1RestrictionInformationBatch(
    orgSagebionetworksRepoModelRestrictionInformationBatchRequest: OrgSagebionetworksRepoModelRestrictionInformationBatchRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelRestrictionInformationBatchResponse>;
  public postRepoV1RestrictionInformationBatch(
    orgSagebionetworksRepoModelRestrictionInformationBatchRequest: OrgSagebionetworksRepoModelRestrictionInformationBatchRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelRestrictionInformationBatchResponse>>;
  public postRepoV1RestrictionInformationBatch(
    orgSagebionetworksRepoModelRestrictionInformationBatchRequest: OrgSagebionetworksRepoModelRestrictionInformationBatchRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelRestrictionInformationBatchResponse>>;
  public postRepoV1RestrictionInformationBatch(
    orgSagebionetworksRepoModelRestrictionInformationBatchRequest: OrgSagebionetworksRepoModelRestrictionInformationBatchRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (
      orgSagebionetworksRepoModelRestrictionInformationBatchRequest === null ||
      orgSagebionetworksRepoModelRestrictionInformationBatchRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelRestrictionInformationBatchRequest was null or undefined when calling postRepoV1RestrictionInformationBatch.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/restrictionInformation/batch`;
    return this.httpClient.post<OrgSagebionetworksRepoModelRestrictionInformationBatchResponse>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelRestrictionInformationBatchRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param submissionId
   * @param orgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public putRepoV1DataAccessSubmissionSubmissionId(
    submissionId: string,
    orgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest: OrgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelDataaccessSubmission>;
  public putRepoV1DataAccessSubmissionSubmissionId(
    submissionId: string,
    orgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest: OrgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelDataaccessSubmission>>;
  public putRepoV1DataAccessSubmissionSubmissionId(
    submissionId: string,
    orgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest: OrgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelDataaccessSubmission>>;
  public putRepoV1DataAccessSubmissionSubmissionId(
    submissionId: string,
    orgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest: OrgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (submissionId === null || submissionId === undefined) {
      throw new Error(
        'Required parameter submissionId was null or undefined when calling putRepoV1DataAccessSubmissionSubmissionId.',
      );
    }
    if (
      orgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest === null ||
      orgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest === undefined
    ) {
      throw new Error(
        'Required parameter orgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest was null or undefined when calling putRepoV1DataAccessSubmissionSubmissionId.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/dataAccessSubmission/${this.configuration.encodeParam({ name: 'submissionId', value: submissionId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}`;
    return this.httpClient.put<OrgSagebionetworksRepoModelDataaccessSubmission>(
      `${this.configuration.basePath}${localVarPath}`,
      orgSagebionetworksRepoModelDataaccessSubmissionStateChangeRequest,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * @param submissionId - The ID of the submission to cancel.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public putRepoV1DataAccessSubmissionSubmissionIdCancellation(
    submissionId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<OrgSagebionetworksRepoModelDataaccessSubmissionStatus>;
  public putRepoV1DataAccessSubmissionSubmissionIdCancellation(
    submissionId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpResponse<OrgSagebionetworksRepoModelDataaccessSubmissionStatus>>;
  public putRepoV1DataAccessSubmissionSubmissionIdCancellation(
    submissionId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<HttpEvent<OrgSagebionetworksRepoModelDataaccessSubmissionStatus>>;
  public putRepoV1DataAccessSubmissionSubmissionIdCancellation(
    submissionId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json'; context?: HttpContext },
  ): Observable<any> {
    if (submissionId === null || submissionId === undefined) {
      throw new Error(
        'Required parameter submissionId was null or undefined when calling putRepoV1DataAccessSubmissionSubmissionIdCancellation.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (bearerAuth) required
    localVarCredential = this.configuration.lookupCredential('bearerAuth');
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/repo/v1/dataAccessSubmission/${this.configuration.encodeParam({ name: 'submissionId', value: submissionId, in: 'path', style: 'simple', explode: false, dataType: 'string', dataFormat: undefined })}/cancellation`;
    return this.httpClient.put<OrgSagebionetworksRepoModelDataaccessSubmissionStatus>(
      `${this.configuration.basePath}${localVarPath}`,
      null,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }
}
