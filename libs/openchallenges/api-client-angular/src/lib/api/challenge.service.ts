/**
 * OpenChallenges REST API
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

// @ts-ignore
import { BasicError } from '../model/basicError';
// @ts-ignore
import { Challenge } from '../model/challenge';
// @ts-ignore
import { ChallengeJsonLd } from '../model/challengeJsonLd';
// @ts-ignore
import { ChallengeSearchQuery } from '../model/challengeSearchQuery';
// @ts-ignore
import { ChallengesPage } from '../model/challengesPage';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { BaseService } from '../api.base.service';

@Injectable({
  providedIn: 'root',
})
export class ChallengeService extends BaseService {
  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration?: Configuration,
  ) {
    super(basePath, configuration);
  }

  /**
   * Get a challenge
   * Returns the challenge specified
   * @param challengeId The unique identifier of the challenge.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getChallenge(
    challengeId: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/ld+json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<ChallengeJsonLd>;
  public getChallenge(
    challengeId: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<Challenge>;
  public getChallenge(
    challengeId: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/ld+json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<Challenge>>;
  public getChallenge(
    challengeId: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/ld+json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<Challenge>>;
  public getChallenge(
    challengeId: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/ld+json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    if (challengeId === null || challengeId === undefined) {
      throw new Error(
        'Required parameter challengeId was null or undefined when calling getChallenge.',
      );
    }

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept([
        'application/json',
        'application/ld+json',
        'application/problem+json',
      ]);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/challenges/${this.configuration.encodeParam({ name: 'challengeId', value: challengeId, in: 'path', style: 'simple', explode: false, dataType: 'number', dataFormat: 'int64' })}`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<Challenge>('get', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }

  /**
   * List challenges
   * List challenges
   * @param challengeSearchQuery The search query used to find challenges.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listChallenges(
    challengeSearchQuery?: ChallengeSearchQuery,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<ChallengesPage>;
  public listChallenges(
    challengeSearchQuery?: ChallengeSearchQuery,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpResponse<ChallengesPage>>;
  public listChallenges(
    challengeSearchQuery?: ChallengeSearchQuery,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<HttpEvent<ChallengesPage>>;
  public listChallenges(
    challengeSearchQuery?: ChallengeSearchQuery,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'application/json' | 'application/problem+json';
      context?: HttpContext;
      transferCache?: boolean;
    },
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    localVarQueryParameters = this.addToHttpParams(
      localVarQueryParameters,
      <any>challengeSearchQuery,
      'challengeSearchQuery',
    );

    let localVarHeaders = this.defaultHeaders;

    const localVarHttpHeaderAcceptSelected: string | undefined =
      options?.httpHeaderAccept ??
      this.configuration.selectHeaderAccept(['application/json', 'application/problem+json']);
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

    const localVarTransferCache: boolean = options?.transferCache ?? true;

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
        responseType_ = 'text';
      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
        responseType_ = 'json';
      } else {
        responseType_ = 'blob';
      }
    }

    let localVarPath = `/challenges`;
    const { basePath, withCredentials } = this.configuration;
    return this.httpClient.request<ChallengesPage>('get', `${basePath}${localVarPath}`, {
      context: localVarHttpContext,
      params: localVarQueryParameters,
      responseType: <any>responseType_,
      ...(withCredentials ? { withCredentials } : {}),
      headers: localVarHeaders,
      observe: observe,
      transferCache: localVarTransferCache,
      reportProgress: reportProgress,
    });
  }
}
