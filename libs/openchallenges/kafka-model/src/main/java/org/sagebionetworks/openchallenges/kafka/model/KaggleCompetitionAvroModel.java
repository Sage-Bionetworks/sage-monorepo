/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.sagebionetworks.openchallenges.kafka.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class KaggleCompetitionAvroModel
  extends org.apache.avro.specific.SpecificRecordBase
  implements org.apache.avro.specific.SpecificRecord {

  private static final long serialVersionUID = -3127420308691200792L;

  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
    .parse(
      "{\"type\":\"record\",\"name\":\"KaggleCompetitionAvroModel\",\"namespace\":\"org.sagebionetworks.openchallenges.kafka.model\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}"
    );

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<KaggleCompetitionAvroModel> ENCODER =
    new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<KaggleCompetitionAvroModel> DECODER =
    new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<KaggleCompetitionAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<KaggleCompetitionAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<KaggleCompetitionAvroModel> createDecoder(
    SchemaStore resolver
  ) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this KaggleCompetitionAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a KaggleCompetitionAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a KaggleCompetitionAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static KaggleCompetitionAvroModel fromByteBuffer(java.nio.ByteBuffer b)
    throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private java.lang.String title;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KaggleCompetitionAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param title The new value for title
   */
  public KaggleCompetitionAvroModel(java.lang.Long id, java.lang.String title) {
    this.id = id;
    this.title = title;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  @Override
  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return id;
      case 1:
        return title;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        id = (java.lang.Long) value$;
        break;
      case 1:
        title = value$ != null ? value$.toString() : null;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.String getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.String value) {
    this.title = value;
  }

  /**
   * Creates a new KaggleCompetitionAvroModel RecordBuilder.
   * @return A new KaggleCompetitionAvroModel RecordBuilder
   */
  public static org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel.Builder newBuilder() {
    return new org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel.Builder();
  }

  /**
   * Creates a new KaggleCompetitionAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KaggleCompetitionAvroModel RecordBuilder
   */
  public static org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel.Builder newBuilder(
    org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel.Builder other
  ) {
    if (other == null) {
      return new org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel.Builder();
    } else {
      return new org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel.Builder(
        other
      );
    }
  }

  /**
   * Creates a new KaggleCompetitionAvroModel RecordBuilder by copying an existing KaggleCompetitionAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new KaggleCompetitionAvroModel RecordBuilder
   */
  public static org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel.Builder newBuilder(
    org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel other
  ) {
    if (other == null) {
      return new org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel.Builder();
    } else {
      return new org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel.Builder(
        other
      );
    }
  }

  /**
   * RecordBuilder for KaggleCompetitionAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder
    extends org.apache.avro.specific.SpecificRecordBuilderBase<KaggleCompetitionAvroModel>
    implements org.apache.avro.data.RecordBuilder<KaggleCompetitionAvroModel> {

    private long id;
    private java.lang.String title;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(
      org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel.Builder other
    ) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing KaggleCompetitionAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(
      org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel other
    ) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Gets the value of the 'id' field.
     * @return The value.
     */
    public long getId() {
      return id;
    }

    /**
     * Sets the value of the 'id' field.
     * @param value The value of 'id'.
     * @return This builder.
     */
    public org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel.Builder setId(
      long value
    ) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'id' field has been set.
     * @return True if the 'id' field has been set, false otherwise.
     */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'id' field.
     * @return This builder.
     */
    public org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'title' field.
     * @return The value.
     */
    public java.lang.String getTitle() {
      return title;
    }

    /**
     * Sets the value of the 'title' field.
     * @param value The value of 'title'.
     * @return This builder.
     */
    public org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel.Builder setTitle(
      java.lang.String value
    ) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'title' field has been set.
     * @return True if the 'title' field has been set, false otherwise.
     */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'title' field.
     * @return This builder.
     */
    public org.sagebionetworks.openchallenges.kafka.model.KaggleCompetitionAvroModel.Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public KaggleCompetitionAvroModel build() {
      try {
        KaggleCompetitionAvroModel record = new KaggleCompetitionAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1]
          ? this.title
          : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<KaggleCompetitionAvroModel> WRITER$ =
    (org.apache.avro.io.DatumWriter<KaggleCompetitionAvroModel>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<KaggleCompetitionAvroModel> READER$ =
    (org.apache.avro.io.DatumReader<KaggleCompetitionAvroModel>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
    out.writeLong(this.id);

    out.writeString(this.title);
  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.title = in.readString();
    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.id = in.readLong();
            break;
          case 1:
            this.title = in.readString();
            break;
          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}
