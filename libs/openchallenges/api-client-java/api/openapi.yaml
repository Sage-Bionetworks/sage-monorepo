openapi: 3.0.3
info:
  contact:
    name: Support
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  description: 'Discover, explore, and contribute to open biomedical challenges.'
  license:
    name: Apache 2.0
    url: https://github.com/Sage-Bionetworks/sage-monorepo/blob/main/LICENSE.txt
  title: OpenChallenges API
  version: 1.0.0
  x-logo:
    url: https://openchallenges.io/img/unsafe/logo/OpenChallenges-logo.png
servers:
  - url: https://openchallenges.io/api/v1
tags:
  - description: Operations about authentication
    name: Authentication
    x-audience:
      - public
    x-displayName: Authentication
  - description: Operations about API key management
    name: API Key
    x-audience:
      - public
    x-displayName: API Key
  - description: Operations about challenges.
    name: Challenge
    x-audience:
      - public
    x-displayName: Challenge
  - description: Operations about challenge contributions.
    name: ChallengeContribution
    x-audience:
      - public
    x-displayName: ChallengeContribution
  - description: Operations about challenge analytics.
    name: ChallengeAnalytics
    x-audience:
      - public
    x-displayName: ChallengeAnalytics
  - description: Operations about challenge platforms.
    name: ChallengePlatform
    x-audience:
      - public
    x-displayName: ChallengePlatform
  - description: Operations about EDAM concepts.
    name: EdamConcept
    x-audience:
      - public
    x-displayName: EdamConcept
  - description: Operations about images
    name: Image
    x-audience:
      - public
    x-displayName: Image
  - description: Operations about organizations
    name: Organization
    x-audience:
      - public
    x-displayName: Organization
paths:
  /auth/login:
    post:
      description: Authenticate user and return JWT token
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: Login successful
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: User login
      tags:
        - Authentication
      x-audience:
        - public
      x-content-type: application/json
      x-accepts:
        - application/json
        - application/problem+json
  /auth/api-keys:
    get:
      description: Get all API keys for the authenticated user
      operationId: listApiKeys
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiKey'
                type: array
          description: List of API keys
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
        - apiBearerAuth: []
      summary: List API keys
      tags:
        - API Key
      x-audience:
        - public
      x-accepts:
        - application/json
        - application/problem+json
    post:
      description: Generate a new API key for the authenticated user
      operationId: createApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
          description: API key created successfully
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
        - apiBearerAuth: []
      summary: Create API key
      tags:
        - API Key
      x-audience:
        - public
      x-content-type: application/json
      x-accepts:
        - application/json
        - application/problem+json
  /auth/api-keys/{keyId}:
    delete:
      description: Revoke an API key
      operationId: deleteApiKey
      parameters:
        - description: The API key ID to delete
          explode: false
          in: path
          name: keyId
          required: true
          schema:
            format: uuid
            type: string
          style: simple
      responses:
        '204':
          description: API key deleted successfully
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
        - apiBearerAuth: []
      summary: Delete API key
      tags:
        - API Key
      x-audience:
        - public
      x-accepts:
        - application/problem+json
  /challenges:
    get:
      description: List challenges
      operationId: listChallenges
      parameters:
        - description: The search query used to find challenges.
          explode: true
          in: query
          name: challengeSearchQuery
          required: false
          schema:
            $ref: '#/components/schemas/ChallengeSearchQuery'
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengesPage'
          description: Success
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: List challenges
      tags:
        - Challenge
      x-audience:
        - public
      x-accepts:
        - application/json
        - application/problem+json
  /challenges/{challengeId}:
    delete:
      description: |
        Deletes a challenge by its unique ID. This action is irreversible.
      operationId: deleteChallengeById
      parameters:
        - description: The unique identifier of the challenge.
          explode: false
          in: path
          name: challengeId
          required: true
          schema:
            $ref: '#/components/schemas/ChallengeId'
          style: simple
      responses:
        '204':
          description: Deletion successful
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The user does not have the permission to perform this action
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
        - apiBearerAuth: []
      summary: Delete a challenge
      tags:
        - Challenge
      x-audience:
        - public
      x-accepts:
        - application/problem+json
    get:
      description: Returns the challenge specified
      operationId: getChallenge
      parameters:
        - description: The unique identifier of the challenge.
          explode: false
          in: path
          name: challengeId
          required: true
          schema:
            $ref: '#/components/schemas/ChallengeId'
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
          description: A challenge
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get a challenge
      tags:
        - Challenge
      x-audience:
        - public
      x-accepts:
        - application/json
        - application/problem+json
  /challenges/{challengeId}/json-ld:
    get:
      description: Returns the challenge specified in JSON-LD format
      operationId: getChallengeJsonLd
      parameters:
        - description: The unique identifier of the challenge.
          explode: false
          in: path
          name: challengeId
          required: true
          schema:
            $ref: '#/components/schemas/ChallengeId'
          style: simple
      responses:
        '200':
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ChallengeJsonLd'
          description: A challenge
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get a challenge in JSON-LD format
      tags:
        - Challenge
      x-audience:
        - public
      x-accepts:
        - application/ld+json
        - application/problem+json
  /challenges/{challengeId}/contributions:
    get:
      description: List challenge contributions
      operationId: listChallengeContributions
      parameters:
        - description: The unique identifier of the challenge.
          explode: false
          in: path
          name: challengeId
          required: true
          schema:
            $ref: '#/components/schemas/ChallengeId'
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeContributionsPage'
          description: Success
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: List challenge contributions
      tags:
        - ChallengeContribution
      x-audience:
        - public
      x-accepts:
        - application/json
        - application/problem+json
    post:
      description: |
        Creates a new contribution record associated with a challenge ID.
      operationId: createChallengeContribution
      parameters:
        - description: The unique identifier of the challenge.
          explode: false
          in: path
          name: challengeId
          required: true
          schema:
            $ref: '#/components/schemas/ChallengeId'
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeContributionCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeContribution'
          description: Contribution created successfully
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The user does not have the permission to perform this action
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        '409':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request conflicts with current state of the target resource
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
        - apiBearerAuth: []
      summary: Create a new contribution for a challenge
      tags:
        - ChallengeContribution
      x-audience:
        - public
      x-content-type: application/json
      x-accepts:
        - application/json
        - application/problem+json
  /challenges/{challengeId}/contributions/{organizationId}/role/{role}:
    delete:
      description: Delete a specific challenge contribution.
      operationId: deleteChallengeContribution
      parameters:
        - description: The unique identifier of the challenge.
          explode: false
          in: path
          name: challengeId
          required: true
          schema:
            $ref: '#/components/schemas/ChallengeId'
          style: simple
        - description: The unique identifier of the organization.
          explode: false
          in: path
          name: organizationId
          required: true
          schema:
            $ref: '#/components/schemas/OrganizationId'
          style: simple
        - description: A challenge contribution role.
          explode: false
          in: path
          name: role
          required: true
          schema:
            $ref: '#/components/schemas/ChallengeContributionRole'
          style: simple
      responses:
        '204':
          description: Contribution deleted successfully
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The user does not have the permission to perform this action
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
        - apiBearerAuth: []
      summary: Delete a specific challenge contribution
      tags:
        - ChallengeContribution
      x-audience:
        - public
      x-accepts:
        - application/problem+json
    get:
      description: |
        Retrieves a specific contribution record for a challenge, identified by its ID.
      operationId: getChallengeContribution
      parameters:
        - description: The unique identifier of the challenge.
          explode: false
          in: path
          name: challengeId
          required: true
          schema:
            $ref: '#/components/schemas/ChallengeId'
          style: simple
        - description: The unique identifier of the organization.
          explode: false
          in: path
          name: organizationId
          required: true
          schema:
            $ref: '#/components/schemas/OrganizationId'
          style: simple
        - description: A challenge contribution role.
          explode: false
          in: path
          name: role
          required: true
          schema:
            $ref: '#/components/schemas/ChallengeContributionRole'
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeContribution'
          description: Challenge contribution retrieved successfully
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get a specific challenge contribution
      tags:
        - ChallengeContribution
      x-audience:
        - public
      x-accepts:
        - application/json
        - application/problem+json
  /challenge-analytics/challenges-per-year:
    get:
      description: Returns the number of challenges tracked per year
      operationId: getChallengesPerYear
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengesPerYear'
          description: An object
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get the number of challenges tracked per year
      tags:
        - ChallengeAnalytics
      x-audience:
        - public
      x-accepts:
        - application/json
        - application/problem+json
  /challenge-platforms:
    get:
      description: List challenge platforms
      operationId: listChallengePlatforms
      parameters:
        - description: The search query used to find challenge platforms.
          explode: true
          in: query
          name: challengePlatformSearchQuery
          required: false
          schema:
            $ref: '#/components/schemas/ChallengePlatformSearchQuery'
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengePlatformsPage'
          description: Success
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: List challenge platforms
      tags:
        - ChallengePlatform
      x-audience:
        - public
      x-accepts:
        - application/json
        - application/problem+json
    post:
      description: Create a challenge platform with the specified ID
      operationId: createChallengePlatform
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengePlatformCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengePlatform'
          description: Success
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The user does not have the permission to perform this action
        '409':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request conflicts with current state of the target resource
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
        - apiBearerAuth: []
      summary: Create a challenge platform
      tags:
        - ChallengePlatform
      x-audience:
        - public
      x-content-type: application/json
      x-accepts:
        - application/json
        - application/problem+json
  /challenge-platforms/{challengePlatformId}:
    delete:
      description: |
        Deletes a challenge platform by its unique ID. This action is irreversible.
      operationId: deleteChallengePlatform
      parameters:
        - description: The unique identifier of the challenge platform.
          explode: false
          in: path
          name: challengePlatformId
          required: true
          schema:
            $ref: '#/components/schemas/ChallengePlatformId'
          style: simple
      responses:
        '204':
          description: Deletion successful
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The user does not have the permission to perform this action
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
        - apiBearerAuth: []
      summary: Delete a challenge platform
      tags:
        - ChallengePlatform
      x-audience:
        - public
      x-accepts:
        - application/problem+json
    get:
      description: Returns the challenge platform identified by its unique ID
      operationId: getChallengePlatform
      parameters:
        - description: The unique identifier of the challenge platform.
          explode: false
          in: path
          name: challengePlatformId
          required: true
          schema:
            $ref: '#/components/schemas/ChallengePlatformId'
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengePlatform'
          description: Success
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get a challenge platform
      tags:
        - ChallengePlatform
      x-audience:
        - public
      x-accepts:
        - application/json
        - application/problem+json
    put:
      description: |
        Updates an existing challenge platform.
      operationId: updateChallengePlatform
      parameters:
        - description: The unique identifier of the challenge platform.
          explode: false
          in: path
          name: challengePlatformId
          required: true
          schema:
            $ref: '#/components/schemas/ChallengePlatformId'
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengePlatformUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengePlatform'
          description: Challange platform updated successfully
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The user does not have the permission to perform this action
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        '409':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request conflicts with current state of the target resource
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
        - apiBearerAuth: []
      summary: Update an existing challenge platform
      tags:
        - ChallengePlatform
      x-audience:
        - public
      x-content-type: application/json
      x-accepts:
        - application/json
        - application/problem+json
  /edam-concepts:
    get:
      description: List EDAM concepts
      operationId: listEdamConcepts
      parameters:
        - description: The search query used to find EDAM concepts.
          explode: true
          in: query
          name: edamConceptSearchQuery
          required: false
          schema:
            $ref: '#/components/schemas/EdamConceptSearchQuery'
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdamConceptsPage'
          description: Success
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: List EDAM concepts
      tags:
        - EdamConcept
      x-audience:
        - public
      x-accepts:
        - application/json
        - application/problem+json
  /images:
    get:
      description: Returns the image specified.
      operationId: getImage
      parameters:
        - description: The query used to get an image.
          explode: true
          in: query
          name: imageQuery
          required: false
          schema:
            $ref: '#/components/schemas/ImageQuery'
          style: deepObject
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: An image
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get an image
      tags:
        - Image
      x-audience:
        - public
      x-accepts:
        - application/json
        - application/problem+json
  /organizations:
    get:
      description: List organizations
      operationId: listOrganizations
      parameters:
        - description: The search query used to find organizations.
          explode: true
          in: query
          name: organizationSearchQuery
          required: false
          schema:
            $ref: '#/components/schemas/OrganizationSearchQuery'
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsPage'
          description: Success
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: List organizations
      tags:
        - Organization
      x-audience:
        - public
      x-accepts:
        - application/json
        - application/problem+json
    post:
      description: Create an organization with the specified account name
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Organization created successfully
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The user does not have the permission to perform this action
        '409':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request conflicts with current state of the target resource
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
        - apiBearerAuth: []
      summary: Create an organization
      tags:
        - Organization
      x-audience:
        - public
      x-content-type: application/json
      x-accepts:
        - application/json
        - application/problem+json
  /organizations/{org}:
    delete:
      description: Deletes the organization specified by its login or ID.
      operationId: deleteOrganization
      parameters:
        - description: The id or login of the organization.
          examples:
            byString:
              value: dream
            byId:
              value: '1'
          explode: false
          in: path
          name: org
          required: true
          schema:
            maxLength: 64
            minLength: 1
            type: string
          style: simple
      responses:
        '204':
          description: Organization successfully deleted
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The user does not have the permission to perform this action
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
        - apiBearerAuth: []
      summary: Delete an organization
      tags:
        - Organization
      x-audience:
        - public
      x-accepts:
        - application/problem+json
    get:
      description: Returns the organization identified by its login or ID.
      operationId: getOrganization
      parameters:
        - description: The id or login of the organization.
          examples:
            byString:
              value: dream
            byId:
              value: '1'
          explode: false
          in: path
          name: org
          required: true
          schema:
            maxLength: 64
            minLength: 1
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Organization retrieved successfully
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get an organization
      tags:
        - Organization
      x-audience:
        - public
      x-accepts:
        - application/json
        - application/problem+json
    put:
      description: Updates an existing organization.
      operationId: updateOrganization
      parameters:
        - description: The id or login of the organization.
          examples:
            byString:
              value: dream
            byId:
              value: '1'
          explode: false
          in: path
          name: org
          required: true
          schema:
            maxLength: 64
            minLength: 1
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUpdateRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Organization updated successfully
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Invalid request
        '401':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: Unauthorized
        '403':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The user does not have the permission to perform this action
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The specified resource was not found
        '409':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request conflicts with current state of the target resource
        '500':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/BasicError'
          description: The request cannot be fulfilled due to an unexpected server
            error
      security:
        - apiBearerAuth: []
      summary: Update an existing organization
      tags:
        - Organization
      x-audience:
        - public
      x-content-type: application/json
      x-accepts:
        - application/json
        - application/problem+json
  /organizations/{org}/participations: {}
  /organizations/{org}/participations/{challengeId}/role/{role}: {}
components:
  parameters:
    challengeSearchQuery:
      description: The search query used to find challenges.
      explode: true
      in: query
      name: challengeSearchQuery
      required: false
      schema:
        $ref: '#/components/schemas/ChallengeSearchQuery'
      style: form
    challengeId:
      description: The unique identifier of the challenge.
      explode: false
      in: path
      name: challengeId
      required: true
      schema:
        $ref: '#/components/schemas/ChallengeId'
      style: simple
    organizationId:
      description: The unique identifier of the organization.
      explode: false
      in: path
      name: organizationId
      required: true
      schema:
        $ref: '#/components/schemas/OrganizationId'
      style: simple
    challengeContributionRole:
      description: A challenge contribution role.
      explode: false
      in: path
      name: role
      required: true
      schema:
        $ref: '#/components/schemas/ChallengeContributionRole'
      style: simple
    challengePlatformSearchQuery:
      description: The search query used to find challenge platforms.
      explode: true
      in: query
      name: challengePlatformSearchQuery
      required: false
      schema:
        $ref: '#/components/schemas/ChallengePlatformSearchQuery'
      style: form
    challengePlatformId:
      description: The unique identifier of the challenge platform.
      explode: false
      in: path
      name: challengePlatformId
      required: true
      schema:
        $ref: '#/components/schemas/ChallengePlatformId'
      style: simple
    edamConceptSearchQuery:
      description: The search query used to find EDAM concepts.
      explode: true
      in: query
      name: edamConceptSearchQuery
      required: false
      schema:
        $ref: '#/components/schemas/EdamConceptSearchQuery'
      style: form
    imageQuery:
      description: The query used to get an image.
      explode: true
      in: query
      name: imageQuery
      required: false
      schema:
        $ref: '#/components/schemas/ImageQuery'
      style: deepObject
    organizationSearchQuery:
      description: The search query used to find organizations.
      explode: true
      in: query
      name: organizationSearchQuery
      required: false
      schema:
        $ref: '#/components/schemas/OrganizationSearchQuery'
      style: form
    org:
      description: The id or login of the organization.
      examples:
        byString:
          value: dream
        byId:
          value: '1'
      explode: false
      in: path
      name: org
      required: true
      schema:
        maxLength: 64
        minLength: 1
        type: string
      style: simple
    challengeParticipationRole:
      description: A challenge participation role.
      explode: false
      in: path
      name: role
      required: true
      schema:
        $ref: '#/components/schemas/ChallengeParticipationRole'
      style: simple
  responses:
    Unauthorized:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: Unauthorized
    InternalServerError:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The request cannot be fulfilled due to an unexpected server error
    BadRequest:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: Invalid request
    NotFound:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The specified resource was not found
    Forbidden:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The user does not have the permission to perform this action
    Conflict:
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
      description: The request conflicts with current state of the target resource
  schemas:
    LoginRequest:
      example:
        password: changeme
        username: admin
      properties:
        username:
          description: Username or email
          example: admin
          type: string
        password:
          description: User password
          example: changeme
          format: password
          type: string
      required:
        - password
        - username
      type: object
    LoginResponse:
      example:
        role: admin
        apiKey: oc_prod_abcd1234567890abcdef1234567890abcdef1234
        userId: 123e4567-e89b-12d3-a456-426614174000
        username: admin
      properties:
        apiKey:
          description: API key for authentication
          example: oc_prod_abcd1234567890abcdef1234567890abcdef1234
          type: string
        userId:
          description: User ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        username:
          description: Username
          example: admin
          type: string
        role:
          description: User role
          enum:
            - admin
            - user
            - readonly
            - service
          example: admin
          type: string
      type: object
    BasicError:
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          description: A human readable documentation for the problem type
          type: string
        status:
          description: The HTTP status code
          type: integer
        detail:
          description: A human readable explanation specific to this occurrence of
            the problem
          type: string
        type:
          description: An absolute URI that identifies the problem type
          type: string
      required:
        - status
        - title
      type: object
      x-java-class-annotations:
        - '@lombok.AllArgsConstructor'
        - '@lombok.Builder'
    ApiKey:
      example:
        createdAt: 2024-01-15T10:30:00Z
        lastUsedAt: 2024-06-15T14:20:00Z
        prefix: oc_prod_
        name: Production API Key
        id: 123e4567-e89b-12d3-a456-426614174000
        expiresAt: 2025-01-15T10:30:00Z
      properties:
        id:
          description: API key ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        name:
          description: Human-readable name for the API key
          example: Production API Key
          type: string
        prefix:
          description: First 8 characters of the API key for identification
          example: oc_prod_
          type: string
        createdAt:
          description: When the API key was created
          example: 2024-01-15T10:30:00Z
          format: date-time
          type: string
        expiresAt:
          description: When the API key expires (null if no expiration)
          example: 2025-01-15T10:30:00Z
          format: date-time
          nullable: true
          type: string
        lastUsedAt:
          description: When the API key was last used (null if never used)
          example: 2024-06-15T14:20:00Z
          format: date-time
          nullable: true
          type: string
      type: object
    CreateApiKeyRequest:
      example:
        expiresIn: 365
        name: Production API Key
      properties:
        name:
          description: Human-readable name for the API key
          example: Production API Key
          maxLength: 100
          minLength: 1
          type: string
        expiresIn:
          description: "Number of days until the API key expires (optional, default\
            \ is no expiration)"
          example: 365
          maximum: 3650
          minimum: 1
          type: integer
      required:
        - name
      type: object
    CreateApiKeyResponse:
      example:
        createdAt: 2024-01-15T10:30:00Z
        prefix: oc_prod_
        name: Production API Key
        id: 123e4567-e89b-12d3-a456-426614174000
        key: oc_prod_abcd1234567890abcdef1234567890abcdef1234
        expiresAt: 2025-01-15T10:30:00Z
      properties:
        id:
          description: API key ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
          type: string
        key:
          description: The actual API key (only returned on creation)
          example: oc_prod_abcd1234567890abcdef1234567890abcdef1234
          type: string
        name:
          description: Human-readable name for the API key
          example: Production API Key
          type: string
        prefix:
          description: First 8 characters of the API key for identification
          example: oc_prod_
          type: string
        createdAt:
          description: When the API key was created
          example: 2024-01-15T10:30:00Z
          format: date-time
          type: string
        expiresAt:
          description: When the API key expires (null if no expiration)
          example: 2025-01-15T10:30:00Z
          format: date-time
          nullable: true
          type: string
      type: object
    ChallengeSort:
      default: relevance
      description: What to sort results by.
      enum:
        - created
        - random
        - relevance
        - starred
        - start_date
        - end_date
      type: string
    ChallengeDirection:
      description: The direction to sort the results by.
      enum:
        - asc
        - desc
      nullable: true
      type: string
    ChallengeIncentive:
      description: The incentive type of the challenge.
      enum:
        - monetary
        - publication
        - speaking_engagement
        - other
      example: publication
      type: string
    ChallengePlatformSlug:
      description: The slug of the challenge platform.
      example: example-challenge-platform
      maxLength: 30
      minLength: 3
      pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
      type: string
    OrganizationId:
      description: The unique identifier of an organization
      example: 1
      format: int64
      type: integer
    ChallengeStatus:
      description: The status of the challenge.
      enum:
        - upcoming
        - active
        - completed
      example: active
      type: string
    ChallengeSubmissionType:
      description: The submission type of the challenge.
      enum:
        - container_image
        - prediction_file
        - notebook
        - mlcube
        - other
      example: container_image
      type: string
    EdamConceptId:
      description: The unique identifier of the EDAM concept.
      example: 1
      format: int64
      type: integer
    ChallengeCategory:
      description: The category of the challenge.
      enum:
        - featured
        - benchmark
        - hackathon
        - starting_soon
        - ending_soon
        - recently_started
        - recently_ended
      example: featured
      type: string
    ChallengeSearchQuery:
      description: A challenge search query.
      properties:
        pageNumber:
          default: 0
          description: The page number.
          format: int32
          minimum: 0
          type: integer
        pageSize:
          default: 100
          description: The number of items in a single page.
          format: int32
          minimum: 1
          type: integer
        sort:
          $ref: '#/components/schemas/ChallengeSort'
        sortSeed:
          description: The seed that initializes the random sorter.
          format: int32
          maximum: 2147483647
          minimum: 0
          nullable: true
          type: integer
        direction:
          $ref: '#/components/schemas/ChallengeDirection'
        incentives:
          description: An array of challenge incentive types used to filter the results.
          items:
            $ref: '#/components/schemas/ChallengeIncentive'
          type: array
        minStartDate:
          description: Keep the challenges that start at this date or later.
          example: 2017-07-21
          format: date
          nullable: true
          type: string
        maxStartDate:
          description: Keep the challenges that start at this date or sooner.
          example: 2017-07-21
          format: date
          nullable: true
          type: string
        platforms:
          description: An array of challenge platform ids used to filter the results.
          items:
            $ref: '#/components/schemas/ChallengePlatformSlug'
          type: array
        organizations:
          description: An array of organization ids used to filter the results.
          items:
            $ref: '#/components/schemas/OrganizationId'
          type: array
        status:
          description: An array of challenge status used to filter the results.
          items:
            $ref: '#/components/schemas/ChallengeStatus'
          type: array
        submissionTypes:
          description: An array of challenge submission types used to filter the results.
          items:
            $ref: '#/components/schemas/ChallengeSubmissionType'
          type: array
        inputDataTypes:
          description: An array of EDAM concept ID used to filter the results.
          items:
            $ref: '#/components/schemas/EdamConceptId'
          type: array
        operations:
          description: An array of EDAM concept ID used to filter the results.
          items:
            $ref: '#/components/schemas/EdamConceptId'
          type: array
        categories:
          description: The array of challenge categories used to filter the results.
          items:
            $ref: '#/components/schemas/ChallengeCategory'
          type: array
        searchTerms:
          description: A string of search terms used to filter the results.
          example: dream challenge
          type: string
      type: object
    PageMetadata:
      description: The metadata of a page.
      properties:
        number:
          description: The page number.
          example: 99
          format: int32
          type: integer
        size:
          description: The number of items in a single page.
          example: 99
          format: int32
          type: integer
        totalElements:
          description: Total number of elements in the result set.
          example: 99
          format: int64
          type: integer
        totalPages:
          description: Total number of pages in the result set.
          example: 99
          format: int32
          type: integer
        hasNext:
          description: Returns if there is a next page.
          example: true
          type: boolean
        hasPrevious:
          description: Returns if there is a previous page.
          example: true
          type: boolean
      required:
        - hasNext
        - hasPrevious
        - number
        - size
        - totalElements
        - totalPages
      type: object
    ChallengeId:
      description: The unique identifier of the challenge.
      example: 1
      format: int64
      type: integer
    ChallengeSlug:
      description: The unique slug of the challenge.
      example: awesome-challenge
      maxLength: 255
      minLength: 3
      pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
      type: string
    ChallengeName:
      description: The name of the challenge.
      maxLength: 255
      minLength: 3
      type: string
    ChallengeHeadline:
      description: The headline of the challenge.
      example: Example challenge headline
      maxLength: 80
      minLength: 0
      nullable: true
      type: string
    ChallengeDescription:
      description: The description of the challenge.
      example: This is an example description of the challenge.
      maxLength: 1000
      minLength: 0
      type: string
    ChallengeDoi:
      description: The DOI of the challenge.
      example: https://doi.org/123/abc
      format: url
      maxLength: 120
      nullable: true
      type: string
    ChallengePlatformId:
      description: The unique identifier of a challenge platform.
      example: 1
      format: int64
      type: integer
    ChallengePlatformName:
      description: The display name of the challenge platform.
      example: Example Challenge Platform
      maxLength: 50
      minLength: 3
      type: string
    SimpleChallengePlatform:
      description: A simple challenge platform.
      example:
        name: Example Challenge Platform
        id: 1
        slug: example-challenge-platform
      nullable: true
      properties:
        id:
          description: The unique identifier of a challenge platform.
          example: 1
          format: int64
          type: integer
        slug:
          description: The slug of the challenge platform.
          example: example-challenge-platform
          maxLength: 30
          minLength: 3
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          type: string
        name:
          description: The display name of the challenge platform.
          example: Example Challenge Platform
          maxLength: 50
          minLength: 3
          type: string
      required:
        - id
        - name
        - slug
      type: object
    Url:
      description: A URL to the website or image.
      example: https://openchallenges.io
      format: url
      maxLength: 500
      nullable: true
      type: string
    EdamConcept:
      description: The EDAM concept.
      example:
        classId: http://edamontology.org/data_0850
        preferredLabel: Sequence set
        id: 1
      nullable: true
      properties:
        id:
          description: The unique identifier of the EDAM concept.
          example: 1
          format: int64
          type: integer
        classId:
          example: http://edamontology.org/data_0850
          maxLength: 60
          type: string
        preferredLabel:
          example: Sequence set
          maxLength: 80
          type: string
      required:
        - classId
        - id
        - preferredLabel
      type: object
    ChallengeStartDate:
      description: The start date of the challenge.
      example: 2017-07-21
      format: date
      nullable: true
      type: string
    ChallengeEndDate:
      description: The end date of the challenge.
      example: 2017-07-21
      format: date
      nullable: true
      type: string
    CreatedDateTime:
      description: Datetime when the object was added to the database.
      example: 2022-07-04T22:19:11Z
      format: date-time
      type: string
    UpdatedDateTime:
      description: Datetime when the object was last modified in the database.
      example: 2022-07-04T22:19:11Z
      format: date-time
      type: string
    Challenge:
      description: A challenge
      example:
        avatarUrl: https://openchallenges.io
        endDate: 2017-07-21
        description: This is an example description of the challenge.
        platform:
          name: Example Challenge Platform
          id: 1
          slug: example-challenge-platform
        starredCount: 100
        createdAt: 2022-07-04T22:19:11Z
        incentives:
          - publication
          - publication
        submissionTypes:
          - container_image
          - container_image
        websiteUrl: https://openchallenges.io
        name: name
        id: 1
        categories:
          - featured
          - featured
        headline: Example challenge headline
        operation:
          classId: http://edamontology.org/data_0850
          preferredLabel: Sequence set
          id: 1
        slug: awesome-challenge
        startDate: 2017-07-21
        doi: https://doi.org/123/abc
        status: active
        inputDataTypes:
          - classId: http://edamontology.org/data_0850
            preferredLabel: Sequence set
            id: 1
          - classId: http://edamontology.org/data_0850
            preferredLabel: Sequence set
            id: 1
        updatedAt: 2022-07-04T22:19:11Z
      properties:
        id:
          description: The unique identifier of the challenge.
          example: 1
          format: int64
          type: integer
        slug:
          description: The unique slug of the challenge.
          example: awesome-challenge
          maxLength: 255
          minLength: 3
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          type: string
        name:
          description: The name of the challenge.
          maxLength: 255
          minLength: 3
          type: string
        headline:
          description: The headline of the challenge.
          example: Example challenge headline
          maxLength: 80
          minLength: 0
          nullable: true
          type: string
        description:
          description: The description of the challenge.
          example: This is an example description of the challenge.
          maxLength: 1000
          minLength: 0
          type: string
        doi:
          description: The DOI of the challenge.
          example: https://doi.org/123/abc
          format: url
          maxLength: 120
          nullable: true
          type: string
        status:
          $ref: '#/components/schemas/ChallengeStatus'
        platform:
          $ref: '#/components/schemas/SimpleChallengePlatform'
        websiteUrl:
          description: A URL to the website or image.
          example: https://openchallenges.io
          format: url
          maxLength: 500
          nullable: true
          type: string
        avatarUrl:
          description: A URL to the website or image.
          example: https://openchallenges.io
          format: url
          maxLength: 500
          nullable: true
          type: string
        incentives:
          items:
            $ref: '#/components/schemas/ChallengeIncentive'
          type: array
        submissionTypes:
          items:
            $ref: '#/components/schemas/ChallengeSubmissionType'
          type: array
        inputDataTypes:
          items:
            $ref: '#/components/schemas/EdamConcept'
          type: array
        categories:
          items:
            $ref: '#/components/schemas/ChallengeCategory'
          type: array
        startDate:
          description: The start date of the challenge.
          example: 2017-07-21
          format: date
          nullable: true
          type: string
        endDate:
          description: The end date of the challenge.
          example: 2017-07-21
          format: date
          nullable: true
          type: string
        starredCount:
          default: 0
          description: The number of times the challenge has been starred by users.
          example: 100
          minimum: 0
          type: integer
        operation:
          $ref: '#/components/schemas/EdamConcept'
        createdAt:
          description: Datetime when the object was added to the database.
          example: 2022-07-04T22:19:11Z
          format: date-time
          type: string
        updatedAt:
          description: Datetime when the object was last modified in the database.
          example: 2022-07-04T22:19:11Z
          format: date-time
          type: string
      required:
        - categories
        - createdAt
        - description
        - id
        - incentives
        - name
        - slug
        - starredCount
        - status
        - submissionTypes
        - updatedAt
      type: object
    ChallengesPage:
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - properties:
            challenges:
              description: A list of challenges.
              items:
                $ref: '#/components/schemas/Challenge'
              type: array
          required:
            - challenges
          type: object
      description: A page of challenges.
      example:
        number: 99
        size: 99
        challenges:
          - avatarUrl: https://openchallenges.io
            endDate: 2017-07-21
            description: This is an example description of the challenge.
            platform:
              name: Example Challenge Platform
              id: 1
              slug: example-challenge-platform
            starredCount: 100
            createdAt: 2022-07-04T22:19:11Z
            incentives:
              - publication
              - publication
            submissionTypes:
              - container_image
              - container_image
            websiteUrl: https://openchallenges.io
            name: name
            id: 1
            categories:
              - featured
              - featured
            headline: Example challenge headline
            operation:
              classId: http://edamontology.org/data_0850
              preferredLabel: Sequence set
              id: 1
            slug: awesome-challenge
            startDate: 2017-07-21
            doi: https://doi.org/123/abc
            status: active
            inputDataTypes:
              - classId: http://edamontology.org/data_0850
                preferredLabel: Sequence set
                id: 1
              - classId: http://edamontology.org/data_0850
                preferredLabel: Sequence set
                id: 1
            updatedAt: 2022-07-04T22:19:11Z
          - avatarUrl: https://openchallenges.io
            endDate: 2017-07-21
            description: This is an example description of the challenge.
            platform:
              name: Example Challenge Platform
              id: 1
              slug: example-challenge-platform
            starredCount: 100
            createdAt: 2022-07-04T22:19:11Z
            incentives:
              - publication
              - publication
            submissionTypes:
              - container_image
              - container_image
            websiteUrl: https://openchallenges.io
            name: name
            id: 1
            categories:
              - featured
              - featured
            headline: Example challenge headline
            operation:
              classId: http://edamontology.org/data_0850
              preferredLabel: Sequence set
              id: 1
            slug: awesome-challenge
            startDate: 2017-07-21
            doi: https://doi.org/123/abc
            status: active
            inputDataTypes:
              - classId: http://edamontology.org/data_0850
                preferredLabel: Sequence set
                id: 1
              - classId: http://edamontology.org/data_0850
                preferredLabel: Sequence set
                id: 1
            updatedAt: 2022-07-04T22:19:11Z
        totalPages: 99
        hasPrevious: true
        hasNext: true
        totalElements: 99
      type: object
      x-java-class-annotations:
        - '@lombok.Builder'
    ChallengeJsonLd:
      allOf:
        - $ref: '#/components/schemas/Challenge'
        - properties:
            '@context':
              example: https://schema.org
              type: string
            '@id':
              example: https://openchallenges.io/api/v1/challenges/1
              type: string
            '@type':
              example: Challenge
              type: string
          required:
            - '@context'
            - '@id'
            - '@type'
          type: object
      description: A challenge
      type: object
    ChallengeContributionId:
      description: The unique identifier of a challenge contribution
      example: 1
      format: int64
      type: integer
    ChallengeContributionRole:
      description: The nature of a challenge contribution.
      enum:
        - challenge_organizer
        - data_contributor
        - sponsor
      example: challenge_organizer
      type: string
    ChallengeContribution:
      description: A challenge contribution.
      example:
        organizationId: 1
        challengeId: 1
        role: challenge_organizer
        id: 1
      properties:
        id:
          description: The unique identifier of a challenge contribution
          example: 1
          format: int64
          type: integer
        challengeId:
          description: The unique identifier of the challenge.
          example: 1
          format: int64
          type: integer
        organizationId:
          description: The unique identifier of an organization
          example: 1
          format: int64
          type: integer
        role:
          $ref: '#/components/schemas/ChallengeContributionRole'
      required:
        - challengeId
        - id
        - organizationId
        - role
      type: object
    ChallengeContributionsPage:
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - properties:
            challengeContributions:
              description: A list of challenge contributions.
              items:
                $ref: '#/components/schemas/ChallengeContribution'
              type: array
          required:
            - challengeContributions
          type: object
      description: A page of challenge challenge contributions.
      example:
        number: 99
        size: 99
        challengeContributions:
          - organizationId: 1
            challengeId: 1
            role: challenge_organizer
            id: 1
          - organizationId: 1
            challengeId: 1
            role: challenge_organizer
            id: 1
        totalPages: 99
        hasPrevious: true
        hasNext: true
        totalElements: 99
      type: object
      x-java-class-annotations:
        - '@lombok.Builder'
    ChallengeContributionCreateRequest:
      description: A challenge contribution to be created.
      example:
        organizationId: 1
        role: challenge_organizer
      properties:
        organizationId:
          description: The unique identifier of an organization
          example: 1
          format: int64
          type: integer
        role:
          $ref: '#/components/schemas/ChallengeContributionRole'
      required:
        - organizationId
        - role
      type: object
    ChallengesPerYear:
      description: An object
      example:
        undatedChallengeCount: 0
        challengeCounts:
          - 0
          - 0
        years:
          - years
          - years
      properties:
        years:
          items:
            type: string
          type: array
        challengeCounts:
          items:
            type: integer
          type: array
        undatedChallengeCount:
          default: 0
          example: 0
          minimum: 0
          type: integer
      required:
        - challengeCounts
        - undatedChallengeCount
        - years
      type: object
      x-java-class-annotations:
        - '@lombok.Builder'
    ChallengePlatformSort:
      default: relevance
      description: What to sort results by.
      enum:
        - name
        - relevance
      type: string
    ChallengePlatformDirection:
      description: The direction to sort the results by.
      enum:
        - asc
        - desc
      nullable: true
      type: string
    ChallengePlatformSearchQuery:
      description: A challenge platform search query.
      properties:
        pageNumber:
          default: 0
          description: The page number.
          format: int32
          minimum: 0
          type: integer
        pageSize:
          default: 100
          description: The number of items in a single page.
          format: int32
          minimum: 1
          type: integer
        sort:
          $ref: '#/components/schemas/ChallengePlatformSort'
        direction:
          $ref: '#/components/schemas/ChallengePlatformDirection'
        slugs:
          description: An array of challenge platform slugs used to filter the results.
          items:
            $ref: '#/components/schemas/ChallengePlatformSlug'
          type: array
        searchTerms:
          description: A string of search terms used to filter the results.
          example: synapse
          type: string
      type: object
    AvatarKey:
      description: The avatar key
      example: logo/dream.png
      type: string
    ChallengePlatform:
      description: A challenge platform
      example:
        avatarKey: logo/dream.png
        websiteUrl: https://openchallenges.io
        name: Example Challenge Platform
        id: 1
        slug: example-challenge-platform
      properties:
        id:
          description: The unique identifier of a challenge platform.
          example: 1
          format: int64
          type: integer
        slug:
          description: The slug of the challenge platform.
          example: example-challenge-platform
          maxLength: 30
          minLength: 3
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          type: string
        name:
          description: The display name of the challenge platform.
          example: Example Challenge Platform
          maxLength: 50
          minLength: 3
          type: string
        avatarKey:
          description: The avatar key
          example: logo/dream.png
          type: string
        websiteUrl:
          description: A URL to the website or image.
          example: https://openchallenges.io
          format: url
          maxLength: 500
          nullable: true
          type: string
      required:
        - avatarKey
        - id
        - name
        - slug
        - websiteUrl
      type: object
    ChallengePlatformsPage:
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - properties:
            challengePlatforms:
              description: A list of challenge platforms.
              items:
                $ref: '#/components/schemas/ChallengePlatform'
              type: array
          required:
            - challengePlatforms
          type: object
      description: A page of challenge platforms.
      example:
        number: 99
        size: 99
        challengePlatforms:
          - avatarKey: logo/dream.png
            websiteUrl: https://openchallenges.io
            name: Example Challenge Platform
            id: 1
            slug: example-challenge-platform
          - avatarKey: logo/dream.png
            websiteUrl: https://openchallenges.io
            name: Example Challenge Platform
            id: 1
            slug: example-challenge-platform
        totalPages: 99
        hasPrevious: true
        hasNext: true
        totalElements: 99
      type: object
      x-java-class-annotations:
        - '@lombok.Builder'
    ChallengePlatformCreateRequest:
      description: The information used to create a challenge platform
      example:
        avatarKey: logo/dream.png
        websiteUrl: https://openchallenges.io
        name: Example Challenge Platform
        slug: example-challenge-platform
      properties:
        slug:
          description: The slug of the challenge platform.
          example: example-challenge-platform
          maxLength: 30
          minLength: 3
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          type: string
        name:
          description: The display name of the challenge platform.
          example: Example Challenge Platform
          maxLength: 50
          minLength: 3
          type: string
        avatarKey:
          description: The avatar key
          example: logo/dream.png
          type: string
        websiteUrl:
          description: A URL to the website or image.
          example: https://openchallenges.io
          format: url
          maxLength: 500
          nullable: true
          type: string
      required:
        - avatarKey
        - name
        - slug
        - websiteUrl
      type: object
    ChallengePlatformUpdateRequest:
      description: A challenge platform update request.
      example:
        avatarKey: logo/dream.png
        websiteUrl: https://openchallenges.io
        name: Example Challenge Platform
        slug: example-challenge-platform
      properties:
        slug:
          description: The slug of the challenge platform.
          example: example-challenge-platform
          maxLength: 30
          minLength: 3
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          type: string
        name:
          description: The display name of the challenge platform.
          example: Example Challenge Platform
          maxLength: 50
          minLength: 3
          type: string
        avatarKey:
          description: The avatar key
          example: logo/dream.png
          type: string
        websiteUrl:
          description: A URL to the website or image.
          example: https://openchallenges.io
          format: url
          maxLength: 500
          nullable: true
          type: string
      required:
        - avatarKey
        - name
        - slug
        - websiteUrl
      type: object
    EdamConceptSort:
      default: relevance
      description: What to sort results by.
      enum:
        - preferred_label
        - relevance
      type: string
    EdamConceptDirection:
      description: The direction to sort the results by.
      enum:
        - asc
        - desc
      nullable: true
      type: string
    EdamSection:
      description: The EDAM section (sub-ontology).
      enum:
        - data
        - format
        - identifier
        - operation
        - topic
      example: data
      type: string
    EdamConceptSearchQuery:
      description: An EDAM concept search query.
      properties:
        pageNumber:
          default: 0
          description: The page number.
          format: int32
          minimum: 0
          type: integer
        pageSize:
          default: 100
          description: The number of items in a single page.
          format: int32
          minimum: 1
          type: integer
        sort:
          $ref: '#/components/schemas/EdamConceptSort'
        direction:
          $ref: '#/components/schemas/EdamConceptDirection'
        ids:
          description: An array of EDAM concept ids used to filter the results.
          items:
            $ref: '#/components/schemas/EdamConceptId'
          type: array
        searchTerms:
          description: A string of search terms used to filter the results.
          example: sequence image
          type: string
        sections:
          description: An array of EDAM sections (sub-ontologies) used to filter the
            results.
          items:
            $ref: '#/components/schemas/EdamSection'
          type: array
      type: object
    EdamConceptsPage:
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - properties:
            edamConcepts:
              description: A list of EDAM concepts.
              items:
                $ref: '#/components/schemas/EdamConcept'
              type: array
          required:
            - edamConcepts
          type: object
      description: A page of EDAM concepts.
      example:
        number: 99
        size: 99
        totalPages: 99
        hasPrevious: true
        hasNext: true
        edamConcepts:
          - classId: http://edamontology.org/data_0850
            preferredLabel: Sequence set
            id: 1
          - classId: http://edamontology.org/data_0850
            preferredLabel: Sequence set
            id: 1
        totalElements: 99
      type: object
      x-java-class-annotations:
        - '@lombok.Builder'
    ImageKey:
      description: The unique identifier of the image.
      example: logo/dream.png
      pattern: "^[a-zA-Z0-9\\/_-]+.[a-zA-Z0-9\\/_-]+"
      type: string
    ImageHeight:
      default: original
      description: The height of the image.
      enum:
        - original
        - 32px
        - 100px
        - 140px
        - 250px
        - 500px
      type: string
    ImageAspectRatio:
      default: original
      description: The aspect ratio of the image (the height of the image must be
        specified).
      enum:
        - original
        - 16_9
        - 1_1
        - 3_2
        - 2_3
      type: string
    ImageQuery:
      description: An image query.
      properties:
        objectKey:
          description: The unique identifier of the image.
          example: logo/dream.png
          pattern: "^[a-zA-Z0-9\\/_-]+.[a-zA-Z0-9\\/_-]+"
          type: string
        height:
          $ref: '#/components/schemas/ImageHeight'
        aspectRatio:
          $ref: '#/components/schemas/ImageAspectRatio'
      required:
        - objectKey
      type: object
    Image:
      description: An image
      example:
        url: http://example.com/an-image.png
      properties:
        url:
          example: http://example.com/an-image.png
          type: string
      required:
        - url
      type: object
      x-java-class-annotations:
        - '@lombok.Builder'
    OrganizationCategory:
      description: The category of the organization.
      enum:
        - featured
      example: featured
      type: string
    OrganizationSort:
      default: relevance
      description: What to sort results by.
      enum:
        - challenge_count
        - created
        - name
        - relevance
      type: string
    OrganizationDirection:
      description: The direction to sort the results by.
      enum:
        - asc
        - desc
      nullable: true
      type: string
    OrganizationSearchQuery:
      description: An organization search query.
      properties:
        pageNumber:
          default: 0
          description: The page number.
          format: int32
          minimum: 0
          type: integer
        pageSize:
          default: 100
          description: The number of items in a single page.
          format: int32
          minimum: 1
          type: integer
        categories:
          description: The array of organization categories used to filter the results.
          items:
            $ref: '#/components/schemas/OrganizationCategory'
          type: array
        challengeContributionRoles:
          description: An array of challenge contribution roles used to filter the
            results.
          items:
            $ref: '#/components/schemas/ChallengeContributionRole'
          type: array
        sort:
          $ref: '#/components/schemas/OrganizationSort'
        direction:
          $ref: '#/components/schemas/OrganizationDirection'
        ids:
          description: An array of organization ids used to filter the results.
          items:
            $ref: '#/components/schemas/OrganizationId'
          type: array
        searchTerms:
          description: A string of search terms used to filter the results.
          example: data provider
          type: string
      type: object
    OrganizationLogin:
      description: The unique login of an organization.
      example: example-org
      maxLength: 64
      minLength: 2
      pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
      type: string
    Organization:
      description: An organization
      example:
        createdAt: 2022-07-04T22:19:11Z
        avatarKey: logo/dream.png
        websiteUrl: https://openchallenges.io
        acronym: OC
        name: Example organization
        description: A description of the organization.
        id: 1
        challengeCount: 10
        login: example-org
        updatedAt: 2022-07-04T22:19:11Z
      properties:
        id:
          description: The unique identifier of an organization
          example: 1
          format: int64
          type: integer
        name:
          description: The name of the organization.
          example: Example organization
          type: string
        login:
          description: The unique login of an organization.
          example: example-org
          maxLength: 64
          minLength: 2
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          type: string
        description:
          description: A description of the organization.
          example: A description of the organization.
          nullable: true
          type: string
        avatarKey:
          example: logo/dream.png
          nullable: true
          type: string
        websiteUrl:
          description: A URL to the website or image.
          example: https://openchallenges.io
          format: url
          maxLength: 500
          nullable: true
          type: string
        challengeCount:
          default: 0
          description: The number of challenges involving this organization.
          example: 10
          minimum: 0
          type: integer
        acronym:
          description: An acronym of the organization.
          example: OC
          maxLength: 10
          nullable: true
          type: string
        createdAt:
          description: Datetime when the object was added to the database.
          example: 2022-07-04T22:19:11Z
          format: date-time
          type: string
        updatedAt:
          description: Datetime when the object was last modified in the database.
          example: 2022-07-04T22:19:11Z
          format: date-time
          type: string
      required:
        - challengeCount
        - createdAt
        - id
        - login
        - name
        - updatedAt
        - websiteUrl
      type: object
    OrganizationsPage:
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - properties:
            organizations:
              description: A list of organizations
              items:
                $ref: '#/components/schemas/Organization'
              type: array
          required:
            - organizations
          type: object
      description: A page of organizations
      example:
        number: 99
        size: 99
        totalPages: 99
        organizations:
          - createdAt: 2022-07-04T22:19:11Z
            avatarKey: logo/dream.png
            websiteUrl: https://openchallenges.io
            acronym: OC
            name: Example organization
            description: A description of the organization.
            id: 1
            challengeCount: 10
            login: example-org
            updatedAt: 2022-07-04T22:19:11Z
          - createdAt: 2022-07-04T22:19:11Z
            avatarKey: logo/dream.png
            websiteUrl: https://openchallenges.io
            acronym: OC
            name: Example organization
            description: A description of the organization.
            id: 1
            challengeCount: 10
            login: example-org
            updatedAt: 2022-07-04T22:19:11Z
        hasPrevious: true
        hasNext: true
        totalElements: 99
      type: object
      x-java-class-annotations:
        - '@lombok.Builder'
    OrganizationCreateRequest:
      description: The information required to create an org account
      example:
        avatarKey: logo/300.png
        websiteUrl: https://openchallenges.io
        acronym: OC
        name: Example organization
        description: A short description of the organization.
        login: example-org
      properties:
        login:
          description: The unique login of an organization.
          example: example-org
          maxLength: 64
          minLength: 2
          pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
          type: string
        name:
          example: Example organization
          type: string
        description:
          example: A short description of the organization.
          nullable: true
          type: string
        avatarKey:
          example: logo/300.png
          nullable: true
          type: string
        websiteUrl:
          description: A URL to the website or image.
          example: https://openchallenges.io
          format: url
          maxLength: 500
          nullable: true
          type: string
        acronym:
          description: An acronym of the organization.
          example: OC
          maxLength: 10
          nullable: true
          type: string
      required:
        - login
        - name
        - websiteUrl
      type: object
    OrganizationUpdateRequest:
      description: The information required to update an org account
      example:
        avatarKey: https://via.placeholder.com/300.png
        websiteUrl: https://openchallenges.io
        acronym: OC
        name: Example organization
        description: A short description of the organization.
      properties:
        name:
          example: Example organization
          type: string
        description:
          example: A short description of the organization.
          nullable: true
          type: string
        avatarKey:
          example: https://via.placeholder.com/300.png
          format: url
          nullable: true
          type: string
        websiteUrl:
          description: A URL to the website or image.
          example: https://openchallenges.io
          format: url
          maxLength: 500
          nullable: true
          type: string
        acronym:
          description: An acronym of the organization.
          example: OC
          maxLength: 10
          nullable: true
          type: string
      required:
        - acronym
        - avatarKey
        - description
        - name
        - websiteUrl
      type: object
    ChallengeParticipationRole:
      description: The nature of a challenge participation.
      enum:
        - challenge_organizer
        - data_contributor
        - sponsor
      example: challenge_organizer
      type: string
  securitySchemes:
    apiBearerAuth:
      bearerFormat: api_key
      description: API key obtained from /auth/login endpoint
      scheme: bearer
      type: http
x-tagGroups:
  - name: OpenChallenges Auth API
    tags:
      - Authentication
      - API Key
  - name: OpenChallenges Challenge API
    tags:
      - Challenge
      - ChallengeContribution
      - ChallengeAnalytics
      - ChallengePlatform
      - EdamConcept
  - name: OpenChallenges Image API
    tags:
      - Image
  - name: OpenChallenges Organization API
    tags:
      - Organization
