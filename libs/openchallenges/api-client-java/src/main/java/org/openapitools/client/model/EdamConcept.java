/*
 * OpenChallenges REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The EDAM concept.
 */
@JsonPropertyOrder({
  EdamConcept.JSON_PROPERTY_ID,
  EdamConcept.JSON_PROPERTY_CLASS_ID,
  EdamConcept.JSON_PROPERTY_PREFERRED_LABEL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class EdamConcept {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull
  private Long id;

  public static final String JSON_PROPERTY_CLASS_ID = "classId";
  @jakarta.annotation.Nonnull
  private String classId;

  public static final String JSON_PROPERTY_PREFERRED_LABEL = "preferredLabel";
  @jakarta.annotation.Nonnull
  private String preferredLabel;

  public EdamConcept() {
  }

  public EdamConcept id(@jakarta.annotation.Nonnull Long id) {
    
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the EDAM concept.
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull Long id) {
    this.id = id;
  }

  public EdamConcept classId(@jakarta.annotation.Nonnull String classId) {
    
    this.classId = classId;
    return this;
  }

  /**
   * Get classId
   * @return classId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLASS_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getClassId() {
    return classId;
  }


  @JsonProperty(JSON_PROPERTY_CLASS_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClassId(@jakarta.annotation.Nonnull String classId) {
    this.classId = classId;
  }

  public EdamConcept preferredLabel(@jakarta.annotation.Nonnull String preferredLabel) {
    
    this.preferredLabel = preferredLabel;
    return this;
  }

  /**
   * Get preferredLabel
   * @return preferredLabel
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PREFERRED_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPreferredLabel() {
    return preferredLabel;
  }


  @JsonProperty(JSON_PROPERTY_PREFERRED_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPreferredLabel(@jakarta.annotation.Nonnull String preferredLabel) {
    this.preferredLabel = preferredLabel;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EdamConcept edamConcept = (EdamConcept) o;
    return Objects.equals(this.id, edamConcept.id) &&
        Objects.equals(this.classId, edamConcept.classId) &&
        Objects.equals(this.preferredLabel, edamConcept.preferredLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, classId, preferredLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EdamConcept {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    classId: ").append(toIndentedString(classId)).append("\n");
    sb.append("    preferredLabel: ").append(toIndentedString(preferredLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

