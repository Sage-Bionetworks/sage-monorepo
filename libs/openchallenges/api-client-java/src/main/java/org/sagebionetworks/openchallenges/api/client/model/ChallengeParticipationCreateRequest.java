/*
 * OpenChallenges REST API
 * Discover, explore, and contribute to open biomedical challenges.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.sagebionetworks.openchallenges.api.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.Objects;
import org.sagebionetworks.openchallenges.api.client.model.ChallengeParticipationRole;

/**
 * A request to create a challenge participation for an organization, defined by a challenge ID and a role.
 */
@JsonPropertyOrder(
  {
    ChallengeParticipationCreateRequest.JSON_PROPERTY_CHALLENGE_ID,
    ChallengeParticipationCreateRequest.JSON_PROPERTY_ROLE,
  }
)
@jakarta.annotation.Generated(
  value = "org.openapitools.codegen.languages.JavaClientCodegen",
  comments = "Generator version: 7.13.0"
)
public class ChallengeParticipationCreateRequest {

  public static final String JSON_PROPERTY_CHALLENGE_ID = "challengeId";

  @jakarta.annotation.Nonnull
  private Long challengeId;

  public static final String JSON_PROPERTY_ROLE = "role";

  @jakarta.annotation.Nonnull
  private ChallengeParticipationRole role;

  public ChallengeParticipationCreateRequest() {}

  public ChallengeParticipationCreateRequest challengeId(
    @jakarta.annotation.Nonnull Long challengeId
  ) {
    this.challengeId = challengeId;
    return this;
  }

  /**
   * The unique identifier of the challenge.
   * @return challengeId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CHALLENGE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getChallengeId() {
    return challengeId;
  }

  @JsonProperty(JSON_PROPERTY_CHALLENGE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setChallengeId(@jakarta.annotation.Nonnull Long challengeId) {
    this.challengeId = challengeId;
  }

  public ChallengeParticipationCreateRequest role(
    @jakarta.annotation.Nonnull ChallengeParticipationRole role
  ) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public ChallengeParticipationRole getRole() {
    return role;
  }

  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRole(@jakarta.annotation.Nonnull ChallengeParticipationRole role) {
    this.role = role;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChallengeParticipationCreateRequest challengeParticipationCreateRequest =
      (ChallengeParticipationCreateRequest) o;
    return (
      Objects.equals(this.challengeId, challengeParticipationCreateRequest.challengeId) &&
      Objects.equals(this.role, challengeParticipationCreateRequest.role)
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(challengeId, role);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChallengeParticipationCreateRequest {\n");
    sb.append("    challengeId: ").append(toIndentedString(challengeId)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
