/*
 * OpenChallenges API
 * Discover, explore, and contribute to open biomedical challenges.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.sagebionetworks.openchallenges.api.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.NoSuchElementException;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.jackson.nullable.JsonNullable;
import org.sagebionetworks.openchallenges.api.client.model.ChallengeStatus;

/**
 * The information used to create a challenge
 */
@JsonPropertyOrder(
  {
    ChallengeCreateRequest.JSON_PROPERTY_NAME,
    ChallengeCreateRequest.JSON_PROPERTY_HEADLINE,
    ChallengeCreateRequest.JSON_PROPERTY_DESCRIPTION,
    ChallengeCreateRequest.JSON_PROPERTY_STATUS,
  }
)
@jakarta.annotation.Generated(
  value = "org.openapitools.codegen.languages.JavaClientCodegen",
  comments = "Generator version: 7.13.0"
)
public class ChallengeCreateRequest {

  public static final String JSON_PROPERTY_NAME = "name";

  @jakarta.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_HEADLINE = "headline";

  @jakarta.annotation.Nullable
  private JsonNullable<String> headline = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DESCRIPTION = "description";

  @jakarta.annotation.Nonnull
  private String description;

  public static final String JSON_PROPERTY_STATUS = "status";

  @jakarta.annotation.Nonnull
  private ChallengeStatus status;

  public ChallengeCreateRequest() {}

  public ChallengeCreateRequest name(@jakarta.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the challenge.
   * @return name
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getName() {
    return name;
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@jakarta.annotation.Nonnull String name) {
    this.name = name;
  }

  public ChallengeCreateRequest headline(@jakarta.annotation.Nullable String headline) {
    this.headline = JsonNullable.<String>of(headline);

    return this;
  }

  /**
   * The headline of the challenge.
   * @return headline
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getHeadline() {
    return headline.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_HEADLINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JsonNullable<String> getHeadline_JsonNullable() {
    return headline;
  }

  @JsonProperty(JSON_PROPERTY_HEADLINE)
  public void setHeadline_JsonNullable(JsonNullable<String> headline) {
    this.headline = headline;
  }

  public void setHeadline(@jakarta.annotation.Nullable String headline) {
    this.headline = JsonNullable.<String>of(headline);
  }

  public ChallengeCreateRequest description(@jakarta.annotation.Nonnull String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the challenge.
   * @return description
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getDescription() {
    return description;
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(@jakarta.annotation.Nonnull String description) {
    this.description = description;
  }

  public ChallengeCreateRequest status(@jakarta.annotation.Nonnull ChallengeStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public ChallengeStatus getStatus() {
    return status;
  }

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(@jakarta.annotation.Nonnull ChallengeStatus status) {
    this.status = status;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChallengeCreateRequest challengeCreateRequest = (ChallengeCreateRequest) o;
    return (
      Objects.equals(this.name, challengeCreateRequest.name) &&
      equalsNullable(this.headline, challengeCreateRequest.headline) &&
      Objects.equals(this.description, challengeCreateRequest.description) &&
      Objects.equals(this.status, challengeCreateRequest.status)
    );
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return (
      a == b ||
      (a != null &&
        b != null &&
        a.isPresent() &&
        b.isPresent() &&
        Objects.deepEquals(a.get(), b.get()))
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, hashCodeNullable(headline), description, status);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[] { a.get() }) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChallengeCreateRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    headline: ").append(toIndentedString(headline)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
