/*
 * OpenChallenges REST API
 * Discover, explore, and contribute to open biomedical challenges.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.sagebionetworks.openchallenges.api.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/**
 * ValidateApiKeyResponse
 */
@JsonPropertyOrder(
  {
    ValidateApiKeyResponse.JSON_PROPERTY_VALID,
    ValidateApiKeyResponse.JSON_PROPERTY_USER_ID,
    ValidateApiKeyResponse.JSON_PROPERTY_USERNAME,
    ValidateApiKeyResponse.JSON_PROPERTY_ROLE,
    ValidateApiKeyResponse.JSON_PROPERTY_SCOPES,
  }
)
@jakarta.annotation.Generated(
  value = "org.openapitools.codegen.languages.JavaClientCodegen",
  comments = "Generator version: 7.13.0"
)
public class ValidateApiKeyResponse {

  public static final String JSON_PROPERTY_VALID = "valid";

  @jakarta.annotation.Nullable
  private Boolean valid;

  public static final String JSON_PROPERTY_USER_ID = "userId";

  @jakarta.annotation.Nullable
  private UUID userId;

  public static final String JSON_PROPERTY_USERNAME = "username";

  @jakarta.annotation.Nullable
  private String username;

  /**
   * Role of the API key owner (only if valid)
   */
  public enum RoleEnum {
    ADMIN(String.valueOf("admin")),

    USER(String.valueOf("user")),

    READONLY(String.valueOf("readonly"));

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ROLE = "role";

  @jakarta.annotation.Nullable
  private RoleEnum role;

  public static final String JSON_PROPERTY_SCOPES = "scopes";

  @jakarta.annotation.Nullable
  private List<String> scopes = new ArrayList<>();

  public ValidateApiKeyResponse() {}

  public ValidateApiKeyResponse valid(@jakarta.annotation.Nullable Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Whether the API key is valid
   * @return valid
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getValid() {
    return valid;
  }

  @JsonProperty(JSON_PROPERTY_VALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValid(@jakarta.annotation.Nullable Boolean valid) {
    this.valid = valid;
  }

  public ValidateApiKeyResponse userId(@jakarta.annotation.Nullable UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * ID of the user who owns this API key (only if valid)
   * @return userId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getUserId() {
    return userId;
  }

  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(@jakarta.annotation.Nullable UUID userId) {
    this.userId = userId;
  }

  public ValidateApiKeyResponse username(@jakarta.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * Username of the API key owner (only if valid)
   * @return username
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUsername() {
    return username;
  }

  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsername(@jakarta.annotation.Nullable String username) {
    this.username = username;
  }

  public ValidateApiKeyResponse role(@jakarta.annotation.Nullable RoleEnum role) {
    this.role = role;
    return this;
  }

  /**
   * Role of the API key owner (only if valid)
   * @return role
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public RoleEnum getRole() {
    return role;
  }

  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRole(@jakarta.annotation.Nullable RoleEnum role) {
    this.role = role;
  }

  public ValidateApiKeyResponse scopes(@jakarta.annotation.Nullable List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public ValidateApiKeyResponse addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * Permissions granted to this API key (only if valid)
   * @return scopes
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getScopes() {
    return scopes;
  }

  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScopes(@jakarta.annotation.Nullable List<String> scopes) {
    this.scopes = scopes;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidateApiKeyResponse validateApiKeyResponse = (ValidateApiKeyResponse) o;
    return (
      Objects.equals(this.valid, validateApiKeyResponse.valid) &&
      Objects.equals(this.userId, validateApiKeyResponse.userId) &&
      Objects.equals(this.username, validateApiKeyResponse.username) &&
      Objects.equals(this.role, validateApiKeyResponse.role) &&
      Objects.equals(this.scopes, validateApiKeyResponse.scopes)
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(valid, userId, username, role, scopes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidateApiKeyResponse {\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
