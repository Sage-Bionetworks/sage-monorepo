/*
 * OpenChallenges API
 * Discover, explore, and contribute to open biomedical challenges.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.sagebionetworks.openchallenges.api.client.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import org.sagebionetworks.openchallenges.api.client.model.Organization;

/**
 * A page of organizations
 */
@JsonPropertyOrder(
  {
    OrganizationsPage.JSON_PROPERTY_NUMBER,
    OrganizationsPage.JSON_PROPERTY_SIZE,
    OrganizationsPage.JSON_PROPERTY_TOTAL_ELEMENTS,
    OrganizationsPage.JSON_PROPERTY_TOTAL_PAGES,
    OrganizationsPage.JSON_PROPERTY_HAS_NEXT,
    OrganizationsPage.JSON_PROPERTY_HAS_PREVIOUS,
    OrganizationsPage.JSON_PROPERTY_ORGANIZATIONS,
  }
)
@jakarta.annotation.Generated(
  value = "org.openapitools.codegen.languages.JavaClientCodegen",
  comments = "Generator version: 7.14.0"
)
public class OrganizationsPage {

  public static final String JSON_PROPERTY_NUMBER = "number";

  @jakarta.annotation.Nonnull
  private Integer number;

  public static final String JSON_PROPERTY_SIZE = "size";

  @jakarta.annotation.Nonnull
  private Integer size;

  public static final String JSON_PROPERTY_TOTAL_ELEMENTS = "totalElements";

  @jakarta.annotation.Nonnull
  private Long totalElements;

  public static final String JSON_PROPERTY_TOTAL_PAGES = "totalPages";

  @jakarta.annotation.Nonnull
  private Integer totalPages;

  public static final String JSON_PROPERTY_HAS_NEXT = "hasNext";

  @jakarta.annotation.Nonnull
  private Boolean hasNext;

  public static final String JSON_PROPERTY_HAS_PREVIOUS = "hasPrevious";

  @jakarta.annotation.Nonnull
  private Boolean hasPrevious;

  public static final String JSON_PROPERTY_ORGANIZATIONS = "organizations";

  @jakarta.annotation.Nonnull
  private List<Organization> organizations = new ArrayList<>();

  public OrganizationsPage() {}

  public OrganizationsPage number(@jakarta.annotation.Nonnull Integer number) {
    this.number = number;
    return this;
  }

  /**
   * The page number.
   * @return number
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getNumber() {
    return number;
  }

  @JsonProperty(JSON_PROPERTY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNumber(@jakarta.annotation.Nonnull Integer number) {
    this.number = number;
  }

  public OrganizationsPage size(@jakarta.annotation.Nonnull Integer size) {
    this.size = size;
    return this;
  }

  /**
   * The number of items in a single page.
   * @return size
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getSize() {
    return size;
  }

  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSize(@jakarta.annotation.Nonnull Integer size) {
    this.size = size;
  }

  public OrganizationsPage totalElements(@jakarta.annotation.Nonnull Long totalElements) {
    this.totalElements = totalElements;
    return this;
  }

  /**
   * Total number of elements in the result set.
   * @return totalElements
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_ELEMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Long getTotalElements() {
    return totalElements;
  }

  @JsonProperty(JSON_PROPERTY_TOTAL_ELEMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalElements(@jakarta.annotation.Nonnull Long totalElements) {
    this.totalElements = totalElements;
  }

  public OrganizationsPage totalPages(@jakarta.annotation.Nonnull Integer totalPages) {
    this.totalPages = totalPages;
    return this;
  }

  /**
   * Total number of pages in the result set.
   * @return totalPages
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_PAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getTotalPages() {
    return totalPages;
  }

  @JsonProperty(JSON_PROPERTY_TOTAL_PAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalPages(@jakarta.annotation.Nonnull Integer totalPages) {
    this.totalPages = totalPages;
  }

  public OrganizationsPage hasNext(@jakarta.annotation.Nonnull Boolean hasNext) {
    this.hasNext = hasNext;
    return this;
  }

  /**
   * Returns if there is a next page.
   * @return hasNext
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HAS_NEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getHasNext() {
    return hasNext;
  }

  @JsonProperty(JSON_PROPERTY_HAS_NEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasNext(@jakarta.annotation.Nonnull Boolean hasNext) {
    this.hasNext = hasNext;
  }

  public OrganizationsPage hasPrevious(@jakarta.annotation.Nonnull Boolean hasPrevious) {
    this.hasPrevious = hasPrevious;
    return this;
  }

  /**
   * Returns if there is a previous page.
   * @return hasPrevious
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HAS_PREVIOUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getHasPrevious() {
    return hasPrevious;
  }

  @JsonProperty(JSON_PROPERTY_HAS_PREVIOUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasPrevious(@jakarta.annotation.Nonnull Boolean hasPrevious) {
    this.hasPrevious = hasPrevious;
  }

  public OrganizationsPage organizations(
    @jakarta.annotation.Nonnull List<Organization> organizations
  ) {
    this.organizations = organizations;
    return this;
  }

  public OrganizationsPage addOrganizationsItem(Organization organizationsItem) {
    if (this.organizations == null) {
      this.organizations = new ArrayList<>();
    }
    this.organizations.add(organizationsItem);
    return this;
  }

  /**
   * A list of organizations
   * @return organizations
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORGANIZATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<Organization> getOrganizations() {
    return organizations;
  }

  @JsonProperty(JSON_PROPERTY_ORGANIZATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrganizations(@jakarta.annotation.Nonnull List<Organization> organizations) {
    this.organizations = organizations;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationsPage organizationsPage = (OrganizationsPage) o;
    return (
      Objects.equals(this.number, organizationsPage.number) &&
      Objects.equals(this.size, organizationsPage.size) &&
      Objects.equals(this.totalElements, organizationsPage.totalElements) &&
      Objects.equals(this.totalPages, organizationsPage.totalPages) &&
      Objects.equals(this.hasNext, organizationsPage.hasNext) &&
      Objects.equals(this.hasPrevious, organizationsPage.hasPrevious) &&
      Objects.equals(this.organizations, organizationsPage.organizations)
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      number,
      size,
      totalElements,
      totalPages,
      hasNext,
      hasPrevious,
      organizations
    );
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationsPage {\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    totalElements: ").append(toIndentedString(totalElements)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("    hasNext: ").append(toIndentedString(hasNext)).append("\n");
    sb.append("    hasPrevious: ").append(toIndentedString(hasPrevious)).append("\n");
    sb.append("    organizations: ").append(toIndentedString(organizations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
