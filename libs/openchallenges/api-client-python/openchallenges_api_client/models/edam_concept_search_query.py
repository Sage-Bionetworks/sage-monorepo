"""
OpenChallenges API

Discover, explore, and contribute to open biomedical challenges.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictStr

from openchallenges_api_client.models.edam_concept_direction import (
    EdamConceptDirection,
)
from openchallenges_api_client.models.edam_concept_sort import EdamConceptSort
from openchallenges_api_client.models.edam_section import EdamSection


class EdamConceptSearchQuery(BaseModel):
    """
    An EDAM concept search query.
    """  # noqa: E501

    page_number: Annotated[int, Field(strict=True, ge=0)] | None = Field(
        default=0, description="The page number.", alias="pageNumber"
    )
    page_size: Annotated[int, Field(strict=True, ge=1)] | None = Field(
        default=100,
        description="The number of items in a single page.",
        alias="pageSize",
    )
    sort: EdamConceptSort | None = EdamConceptSort.RELEVANCE
    direction: EdamConceptDirection | None = None
    ids: list[Annotated[int, Field(strict=True, ge=1)]] | None = Field(
        default=None,
        description="An array of EDAM concept ids used to filter the results.",
    )
    search_terms: StrictStr | None = Field(
        default=None,
        description="A string of search terms used to filter the results.",
        alias="searchTerms",
    )
    sections: list[EdamSection] | None = Field(
        default=None,
        description="An array of EDAM sections (sub-ontologies) used to filter the results.",
    )
    __properties: ClassVar[list[str]] = [
        "pageNumber",
        "pageSize",
        "sort",
        "direction",
        "ids",
        "searchTerms",
        "sections",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of EdamConceptSearchQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if direction (nullable) is None
        # and model_fields_set contains the field
        if self.direction is None and "direction" in self.model_fields_set:
            _dict["direction"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of EdamConceptSearchQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "pageNumber": obj.get("pageNumber")
                if obj.get("pageNumber") is not None
                else 0,
                "pageSize": obj.get("pageSize")
                if obj.get("pageSize") is not None
                else 100,
                "sort": obj.get("sort")
                if obj.get("sort") is not None
                else EdamConceptSort.RELEVANCE,
                "direction": obj.get("direction"),
                "ids": obj.get("ids"),
                "searchTerms": obj.get("searchTerms"),
                "sections": obj.get("sections"),
            }
        )
        return _obj
