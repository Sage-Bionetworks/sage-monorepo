"""
OpenChallenges API

Discover, explore, and contribute to open biomedical challenges.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator

from openchallenges_api_client.models.image_aspect_ratio import ImageAspectRatio
from openchallenges_api_client.models.image_height import ImageHeight


class ImageQuery(BaseModel):
    """
    An image query that identifies an image either by an object storage key or by a direct URL. Exactly one of `objectKey` or `imageUrl` must be provided.
    """  # noqa: E501

    object_key: Annotated[str, Field(strict=True)] | None = Field(
        default=None,
        description="The unique identifier of the image.",
        alias="objectKey",
    )
    image_url: StrictStr | None = Field(
        default=None,
        description="The HTTPS URL of the image. Use this as an alternative to `objectKey`. ",
        alias="imageUrl",
    )
    height: ImageHeight | None = ImageHeight.ORIGINAL
    aspect_ratio: ImageAspectRatio | None = Field(
        default=ImageAspectRatio.ORIGINAL, alias="aspectRatio"
    )
    __properties: ClassVar[list[str]] = [
        "objectKey",
        "imageUrl",
        "height",
        "aspectRatio",
    ]

    @field_validator("object_key")
    def object_key_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9\/_-]+.[a-zA-Z0-9\/_-]+", value):
            raise ValueError(
                r"must validate the regular expression /^[a-zA-Z0-9\/_-]+.[a-zA-Z0-9\/_-]+/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ImageQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ImageQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "objectKey": obj.get("objectKey"),
                "imageUrl": obj.get("imageUrl"),
                "height": obj.get("height")
                if obj.get("height") is not None
                else ImageHeight.ORIGINAL,
                "aspectRatio": obj.get("aspectRatio")
                if obj.get("aspectRatio") is not None
                else ImageAspectRatio.ORIGINAL,
            }
        )
        return _obj
