"""
OpenChallenges API

Discover, explore, and contribute to open biomedical challenges.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictStr

from openchallenges_api_client.models.auth_scope import AuthScope
from openchallenges_api_client.models.user_role import UserRole


class UserProfile(BaseModel):
    """
    UserProfile
    """  # noqa: E501

    id: StrictStr = Field(description="Unique user identifier")
    username: StrictStr = Field(description="User's username")
    email: StrictStr = Field(description="User's email address")
    first_name: StrictStr | None = Field(
        default=None, description="User's first name", alias="firstName"
    )
    last_name: StrictStr | None = Field(
        default=None, description="User's last name", alias="lastName"
    )
    role: UserRole
    scopes: list[AuthScope] | None = Field(
        default=None, description="User's authorized scopes/permissions"
    )
    avatar_url: StrictStr | None = Field(
        default=None, description="URL to user's avatar image", alias="avatarUrl"
    )
    bio: Annotated[str, Field(strict=True, max_length=500)] | None = Field(
        default=None, description="User's biography or description"
    )
    website: StrictStr | None = Field(default=None, description="User's website URL")
    created_at: datetime = Field(
        description="Timestamp when the user account was created", alias="createdAt"
    )
    updated_at: datetime | None = Field(
        default=None,
        description="Timestamp when the user profile was last updated",
        alias="updatedAt",
    )
    __properties: ClassVar[list[str]] = [
        "id",
        "username",
        "email",
        "firstName",
        "lastName",
        "role",
        "scopes",
        "avatarUrl",
        "bio",
        "website",
        "createdAt",
        "updatedAt",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of UserProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of UserProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "username": obj.get("username"),
                "email": obj.get("email"),
                "firstName": obj.get("firstName"),
                "lastName": obj.get("lastName"),
                "role": obj.get("role"),
                "scopes": obj.get("scopes"),
                "avatarUrl": obj.get("avatarUrl"),
                "bio": obj.get("bio"),
                "website": obj.get("website"),
                "createdAt": obj.get("createdAt"),
                "updatedAt": obj.get("updatedAt"),
            }
        )
        return _obj
