# coding: utf-8

"""
OpenChallenges API

Discover, explore, and contribute to open biomedical challenges.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openchallenges_api_client_python.models.image_aspect_ratio import ImageAspectRatio
from openchallenges_api_client_python.models.image_height import ImageHeight
from typing import Optional, Set
from typing_extensions import Self


class ImageQuery(BaseModel):
    """
    An image query.
    """  # noqa: E501

    object_key: Annotated[str, Field(strict=True)] = Field(
        description="The unique identifier of the image.", alias="objectKey"
    )
    height: Optional[ImageHeight] = ImageHeight.ORIGINAL
    aspect_ratio: Optional[ImageAspectRatio] = Field(
        default=ImageAspectRatio.ORIGINAL, alias="aspectRatio"
    )
    __properties: ClassVar[List[str]] = ["objectKey", "height", "aspectRatio"]

    @field_validator("object_key")
    def object_key_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9\/_-]+.[a-zA-Z0-9\/_-]+", value):
            raise ValueError(
                r"must validate the regular expression /^[a-zA-Z0-9\/_-]+.[a-zA-Z0-9\/_-]+/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "objectKey": obj.get("objectKey"),
                "height": (
                    obj.get("height")
                    if obj.get("height") is not None
                    else ImageHeight.ORIGINAL
                ),
                "aspectRatio": (
                    obj.get("aspectRatio")
                    if obj.get("aspectRatio") is not None
                    else ImageAspectRatio.ORIGINAL
                ),
            }
        )
        return _obj
