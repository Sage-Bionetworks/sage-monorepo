# coding: utf-8

"""
OpenChallenges REST API

Discover, explore, and contribute to open biomedical challenges.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class OrganizationUpdateRequest(BaseModel):
    """
    The information required to update an org account
    """  # noqa: E501

    name: StrictStr
    description: Optional[StrictStr]
    avatar_key: Optional[StrictStr] = Field(alias="avatarKey")
    website_url: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(
        description="A URL to the website or image.", alias="websiteUrl"
    )
    acronym: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(
        description="An acronym of the organization."
    )
    __properties: ClassVar[List[str]] = [
        "name",
        "description",
        "avatarKey",
        "websiteUrl",
        "acronym",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if avatar_key (nullable) is None
        # and model_fields_set contains the field
        if self.avatar_key is None and "avatar_key" in self.model_fields_set:
            _dict["avatarKey"] = None

        # set to None if website_url (nullable) is None
        # and model_fields_set contains the field
        if self.website_url is None and "website_url" in self.model_fields_set:
            _dict["websiteUrl"] = None

        # set to None if acronym (nullable) is None
        # and model_fields_set contains the field
        if self.acronym is None and "acronym" in self.model_fields_set:
            _dict["acronym"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "description": obj.get("description"),
                "avatarKey": obj.get("avatarKey"),
                "websiteUrl": obj.get("websiteUrl"),
                "acronym": obj.get("acronym"),
            }
        )
        return _obj
