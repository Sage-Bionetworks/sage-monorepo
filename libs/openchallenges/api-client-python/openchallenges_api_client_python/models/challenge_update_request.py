# coding: utf-8

"""
OpenChallenges API

Discover, explore, and contribute to open biomedical challenges.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openchallenges_api_client_python.models.challenge_incentive import (
    ChallengeIncentive,
)
from openchallenges_api_client_python.models.challenge_status import ChallengeStatus
from typing import Optional, Set
from typing_extensions import Self


class ChallengeUpdateRequest(BaseModel):
    """
    The information required to update a challenge
    """  # noqa: E501

    slug: Annotated[str, Field(min_length=3, strict=True, max_length=255)] = Field(
        description="The unique slug of the challenge."
    )
    name: Annotated[str, Field(min_length=3, strict=True, max_length=255)] = Field(
        description="The name of the challenge."
    )
    headline: Optional[
        Annotated[str, Field(min_length=0, strict=True, max_length=80)]
    ] = Field(description="The headline of the challenge.")
    description: Annotated[str, Field(min_length=0, strict=True, max_length=1000)] = (
        Field(description="The description of the challenge.")
    )
    doi: Optional[Annotated[str, Field(strict=True, max_length=120)]] = Field(
        description="The DOI of the challenge."
    )
    status: ChallengeStatus
    platform_id: StrictInt = Field(
        description="The unique identifier of a challenge platform.", alias="platformId"
    )
    website_url: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(
        description="A URL to the website or image.", alias="websiteUrl"
    )
    avatar_url: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(
        description="A URL to the website or image.", alias="avatarUrl"
    )
    incentives: List[ChallengeIncentive]
    __properties: ClassVar[List[str]] = [
        "slug",
        "name",
        "headline",
        "description",
        "doi",
        "status",
        "platformId",
        "websiteUrl",
        "avatarUrl",
        "incentives",
    ]

    @field_validator("slug")
    def slug_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9]+(?:-[a-z0-9]+)*$", value):
            raise ValueError(
                r"must validate the regular expression /^[a-z0-9]+(?:-[a-z0-9]+)*$/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChallengeUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if headline (nullable) is None
        # and model_fields_set contains the field
        if self.headline is None and "headline" in self.model_fields_set:
            _dict["headline"] = None

        # set to None if doi (nullable) is None
        # and model_fields_set contains the field
        if self.doi is None and "doi" in self.model_fields_set:
            _dict["doi"] = None

        # set to None if website_url (nullable) is None
        # and model_fields_set contains the field
        if self.website_url is None and "website_url" in self.model_fields_set:
            _dict["websiteUrl"] = None

        # set to None if avatar_url (nullable) is None
        # and model_fields_set contains the field
        if self.avatar_url is None and "avatar_url" in self.model_fields_set:
            _dict["avatarUrl"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChallengeUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "slug": obj.get("slug"),
                "name": obj.get("name"),
                "headline": obj.get("headline"),
                "description": obj.get("description"),
                "doi": obj.get("doi"),
                "status": obj.get("status"),
                "platformId": obj.get("platformId"),
                "websiteUrl": obj.get("websiteUrl"),
                "avatarUrl": obj.get("avatarUrl"),
                "incentives": obj.get("incentives"),
            }
        )
        return _obj
