# coding: utf-8

"""
OpenChallenges API

Discover, explore, and contribute to open biomedical challenges.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openchallenges_api_client_python.models.edam_concept import EdamConcept
from typing import Optional, Set
from typing_extensions import Self


class EdamConceptsPage(BaseModel):
    """
    A page of EDAM concepts.
    """  # noqa: E501

    number: StrictInt = Field(description="The page number.")
    size: StrictInt = Field(description="The number of items in a single page.")
    total_elements: StrictInt = Field(
        description="Total number of elements in the result set.", alias="totalElements"
    )
    total_pages: StrictInt = Field(
        description="Total number of pages in the result set.", alias="totalPages"
    )
    has_next: StrictBool = Field(
        description="Returns if there is a next page.", alias="hasNext"
    )
    has_previous: StrictBool = Field(
        description="Returns if there is a previous page.", alias="hasPrevious"
    )
    edam_concepts: List[Optional[EdamConcept]] = Field(
        description="A list of EDAM concepts.", alias="edamConcepts"
    )
    __properties: ClassVar[List[str]] = [
        "number",
        "size",
        "totalElements",
        "totalPages",
        "hasNext",
        "hasPrevious",
        "edamConcepts",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EdamConceptsPage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in edam_concepts (list)
        _items = []
        if self.edam_concepts:
            for _item_edam_concepts in self.edam_concepts:
                if _item_edam_concepts:
                    _items.append(_item_edam_concepts.to_dict())
            _dict["edamConcepts"] = _items
        return _dict

    # --- BEGIN CUSTOM: tolerant construction helper for page-like list models ---
    @classmethod
    def from_dict_skip_invalid(cls, obj: Optional[Dict[str, Any]]):  # type: ignore[override]
        """Create instance skipping invalid nested items (Page models only).

        Heuristics:
        - Applies only when the class name ends with 'Page'.
        - Identifies the primary list field ("organizations", "items", or the only list field).
        - Attempts per-item validation; invalid items (including those with additional fields
          or field constraint violations) are skipped.
        - Attaches counts via `_skipped_invalid_items` and `_skipped_invalid_organizations` (legacy).
        Fallbacks to strict parsing if structure is unexpected to avoid masking systemic issues.
        """
        if not getattr(cls, "__name__", "").endswith("Page"):
            return cls.from_dict(obj)  # type: ignore
        if obj is None or not isinstance(obj, dict):
            return cls.from_dict(obj)  # type: ignore

        # Detect candidate list fields.
        candidate_keys = [k for k, v in obj.items() if isinstance(v, list)]
        target_key = None
        for preferred in ("organizations", "items"):
            if preferred in candidate_keys:
                target_key = preferred
                break
        if target_key is None and len(candidate_keys) == 1:
            target_key = candidate_keys[0]
        if target_key is None:
            return cls.from_dict(obj)  # type: ignore

        raw_list = obj.get(target_key) or []
        # Infer element model class from pydantic field annotation if possible.
        element_model = None
        try:  # best-effort; failures fall back to dict passthrough
            from typing import get_args  # Python 3.11+ stdlib

            field_info = getattr(cls, "model_fields", {}).get(target_key)
            if field_info is not None:
                ann = getattr(field_info, "annotation", None)
                if ann is not None:
                    args = get_args(ann)
                    if args:
                        element_model = args[0]
        except Exception:  # pragma: no cover
            element_model = None

        parsed_models = []
        skipped = 0
        for entry in raw_list:
            # Normalize to dict for validation if possible
            candidate = entry
            if isinstance(entry, tuple):  # unlikely but defensively handle
                # Convert tuples to list/dict only if element model expects mapping; else keep
                candidate = entry
            try:
                if (
                    element_model is not None
                    and hasattr(element_model, "from_dict")
                    and isinstance(candidate, dict)
                ):
                    model_obj = element_model.from_dict(candidate)
                elif element_model is not None and hasattr(
                    element_model, "model_validate"
                ):  # pydantic BaseModel subclass
                    model_obj = element_model.model_validate(candidate)
                else:
                    # No element model – accept as-is (will validate later or be skipped if invalid)
                    model_obj = candidate
                if model_obj is None:
                    skipped += 1
                else:
                    parsed_models.append(model_obj)
            except Exception:  # validation error – skip
                skipped += 1

        # Rebuild object dict with validated subset
        tmp = dict(obj)
        tmp[target_key] = parsed_models
        try:
            inst = cls.from_dict(tmp)  # type: ignore
        except Exception:
            # As a last resort fall back to strict path (may raise), to avoid silent data loss at page level
            return cls.from_dict(obj)  # type: ignore

        if inst is not None and skipped:
            setattr(inst, "_skipped_invalid_items", skipped)
            setattr(inst, "_skipped_invalid_organizations", skipped)
        return inst

    # --- END CUSTOM ---

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EdamConceptsPage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "number": obj.get("number"),
                "size": obj.get("size"),
                "totalElements": obj.get("totalElements"),
                "totalPages": obj.get("totalPages"),
                "hasNext": obj.get("hasNext"),
                "hasPrevious": obj.get("hasPrevious"),
                "edamConcepts": [
                    EdamConcept.from_dict(_item) for _item in obj["edamConcepts"]
                ]
                if obj.get("edamConcepts") is not None
                else None,
            }
        )
        return _obj
