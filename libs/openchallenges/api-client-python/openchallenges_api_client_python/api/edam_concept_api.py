# coding: utf-8

"""
OpenChallenges API

Discover, explore, and contribute to open biomedical challenges.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field
from typing import Optional
from typing_extensions import Annotated
from openchallenges_api_client_python.models.edam_concept_search_query import (
    EdamConceptSearchQuery,
)
from openchallenges_api_client_python.models.edam_concepts_page import EdamConceptsPage

from openchallenges_api_client_python.api_client import ApiClient, RequestSerialized
from openchallenges_api_client_python.api_response import ApiResponse
from openchallenges_api_client_python.rest import RESTResponseType


class EdamConceptApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def list_edam_concepts(
        self,
        edam_concept_search_query: Annotated[
            Optional[EdamConceptSearchQuery],
            Field(description="The search query used to find EDAM concepts."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EdamConceptsPage:
        """List EDAM concepts

        List EDAM concepts

        :param edam_concept_search_query: The search query used to find EDAM concepts.
        :type edam_concept_search_query: EdamConceptSearchQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_edam_concepts_serialize(
            edam_concept_search_query=edam_concept_search_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "EdamConceptsPage",
            "400": "BasicError",
            "500": "BasicError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        # Custom tolerant deserialization (opt-in via env var OC_CLIENT_SKIP_INVALID=1)
        _tolerant_flag = False
        try:  # environment flag avoids altering public API or auth flows
            import os as _os  # local import to avoid global side-effects

            _env_val = _os.getenv("OC_CLIENT_SKIP_INVALID", "")
            _tolerant_flag = _env_val.lower() in ("1", "true", "yes", "on")
        except Exception:  # pragma: no cover
            _tolerant_flag = False
        if _tolerant_flag:
            try:
                raw_bytes = response_data.data  # type: ignore[attr-defined]
                import json as _json

                if isinstance(raw_bytes, (bytes, bytearray)):
                    raw_dict = _json.loads(raw_bytes)
                else:
                    raw_dict = raw_bytes
                # Identify return model class
                _model_cls = None
                # Dynamic import to avoid syntax errors for generic return types like "List[Foo]"
                try:  # pragma: no cover - best effort
                    import importlib as _importlib

                    _rt = "EdamConceptsPage"
                    # Attempt tolerant path only for Page models (endswith 'Page' & not generic)
                    if _rt.endswith("Page") and "[" not in _rt:
                        _module = _importlib.import_module(
                            "openchallenges_api_client_python.models"
                        )
                        _model_cls = getattr(_module, _rt, None)
                except Exception:  # pragma: no cover
                    _model_cls = None
                if _model_cls is not None and hasattr(
                    _model_cls, "from_dict_skip_invalid"
                ):
                    return _model_cls.from_dict_skip_invalid(raw_dict)  # type: ignore
            except Exception:  # pragma: no cover - fallback to normal path
                pass
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def list_edam_concepts_with_http_info(
        self,
        edam_concept_search_query: Annotated[
            Optional[EdamConceptSearchQuery],
            Field(description="The search query used to find EDAM concepts."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EdamConceptsPage]:
        """List EDAM concepts

        List EDAM concepts

        :param edam_concept_search_query: The search query used to find EDAM concepts.
        :type edam_concept_search_query: EdamConceptSearchQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_edam_concepts_serialize(
            edam_concept_search_query=edam_concept_search_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "EdamConceptsPage",
            "400": "BasicError",
            "500": "BasicError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        # NOTE: http_info variant returns ApiResponse; tolerant path not applied here (consumer can deserialize manually)
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def list_edam_concepts_without_preload_content(
        self,
        edam_concept_search_query: Annotated[
            Optional[EdamConceptSearchQuery],
            Field(description="The search query used to find EDAM concepts."),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List EDAM concepts

        List EDAM concepts

        :param edam_concept_search_query: The search query used to find EDAM concepts.
        :type edam_concept_search_query: EdamConceptSearchQuery
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_edam_concepts_serialize(
            edam_concept_search_query=edam_concept_search_query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "EdamConceptsPage",
            "400": "BasicError",
            "500": "BasicError",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _list_edam_concepts_serialize(
        self,
        edam_concept_search_query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if edam_concept_search_query is not None:
            _query_params.append(("edamConceptSearchQuery", edam_concept_search_query))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json", "application/problem+json"]
            )

        # authentication setting
        _auth_settings: List[str] = ["apiKey", "jwtBearer"]

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/edam-concepts",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
