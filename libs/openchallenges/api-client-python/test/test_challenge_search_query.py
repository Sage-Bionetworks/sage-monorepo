# coding: utf-8

"""
    OpenChallenges REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import openchallenges_client
from openchallenges_client.models.challenge_search_query import ChallengeSearchQuery  # noqa: E501
from openchallenges_client.rest import ApiException

class TestChallengeSearchQuery(unittest.TestCase):
    """ChallengeSearchQuery unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ChallengeSearchQuery
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChallengeSearchQuery`
        """
        model = openchallenges_client.models.challenge_search_query.ChallengeSearchQuery()  # noqa: E501
        if include_optional :
            return ChallengeSearchQuery(
                page_number = 0, 
                page_size = 1, 
                sort = 'relevance', 
                sort_seed = 0, 
                direction = 'asc', 
                difficulties = [
                    'intermediate'
                    ], 
                incentives = [
                    'publication'
                    ], 
                min_start_date = 'Fri Jul 21 00:00:00 UTC 2017', 
                max_start_date = 'Fri Jul 21 00:00:00 UTC 2017', 
                platforms = [
                    'example-challenge-platform'
                    ], 
                organizations = [
                    1
                    ], 
                input_data_types = [
                    'gene-expression'
                    ], 
                status = [
                    'active'
                    ], 
                submission_types = [
                    'container_image'
                    ], 
                categories = [
                    'featured'
                    ], 
                search_terms = 'dream challenge'
            )
        else :
            return ChallengeSearchQuery(
        )
        """

    def testChallengeSearchQuery(self):
        """Test ChallengeSearchQuery"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
