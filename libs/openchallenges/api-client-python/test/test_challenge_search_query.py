"""
OpenChallenges API

Discover, explore, and contribute to open biomedical challenges.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from openchallenges_api_client.models.challenge_search_query import ChallengeSearchQuery


class TestChallengeSearchQuery(unittest.TestCase):
    """ChallengeSearchQuery unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChallengeSearchQuery:
        """Test ChallengeSearchQuery
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `ChallengeSearchQuery`
        """
        model = ChallengeSearchQuery()
        if include_optional:
            return ChallengeSearchQuery(
                page_number = 0,
                page_size = 1,
                sort = 'relevance',
                sort_seed = 0,
                direction = 'asc',
                incentives = [
                    'publication'
                    ],
                min_start_date = 'Fri Jul 21 00:00:00 UTC 2017',
                max_start_date = 'Fri Jul 21 00:00:00 UTC 2017',
                platforms = [
                    'example-challenge-platform'
                    ],
                organizations = [
                    1
                    ],
                status = [
                    'active'
                    ],
                submission_types = [
                    'container_image'
                    ],
                input_data_types = [
                    1
                    ],
                operations = [
                    1
                    ],
                categories = [
                    'featured'
                    ],
                search_terms = 'dream challenge'
            )
        else:
            return ChallengeSearchQuery(
        )
        """

    def testChallengeSearchQuery(self):
        """Test ChallengeSearchQuery"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
