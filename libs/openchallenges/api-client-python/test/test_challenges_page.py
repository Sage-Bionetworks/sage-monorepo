# coding: utf-8

"""
    OpenChallenges REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openchallenges_api_client_python.models.challenges_page import ChallengesPage

class TestChallengesPage(unittest.TestCase):
    """ChallengesPage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChallengesPage:
        """Test ChallengesPage
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChallengesPage`
        """
        model = ChallengesPage()
        if include_optional:
            return ChallengesPage(
                number = 99,
                size = 99,
                total_elements = 99,
                total_pages = 99,
                has_next = True,
                has_previous = True,
                challenges = [
                    openchallenges_api_client_python.models.challenge.Challenge(
                        id = 1, 
                        slug = 'awesome-challenge', 
                        name = '012', 
                        headline = 'Example challenge headline', 
                        description = 'This is an example description of the challenge.', 
                        doi = 'https://doi.org/123/abc', 
                        status = 'active', 
                        platform = openchallenges_api_client_python.models.simple_challenge_platform.SimpleChallengePlatform(
                            id = 1, 
                            slug = 'example-challenge-platform', 
                            name = '012', ), 
                        website_url = 'https://openchallenges.io', 
                        avatar_url = 'https://openchallenges.io', 
                        incentives = [
                            'publication'
                            ], 
                        submission_types = [
                            'container_image'
                            ], 
                        input_data_types = [
                            openchallenges_api_client_python.models.edam_concept.EdamConcept(
                                id = 1, 
                                class_id = 'http://edamontology.org/data_0850', 
                                preferred_label = 'Sequence set', )
                            ], 
                        categories = [
                            'featured'
                            ], 
                        start_date = 'Fri Jul 21 00:00:00 UTC 2017', 
                        end_date = 'Fri Jul 21 00:00:00 UTC 2017', 
                        starred_count = 100, 
                        operation = openchallenges_api_client_python.models.edam_concept.EdamConcept(
                            id = 1, 
                            class_id = 'http://edamontology.org/data_0850', 
                            preferred_label = 'Sequence set', ), 
                        created_at = '2022-07-04T22:19:11Z', 
                        updated_at = '2022-07-04T22:19:11Z', )
                    ]
            )
        else:
            return ChallengesPage(
                number = 99,
                size = 99,
                total_elements = 99,
                total_pages = 99,
                has_next = True,
                has_previous = True,
                challenges = [
                    openchallenges_api_client_python.models.challenge.Challenge(
                        id = 1, 
                        slug = 'awesome-challenge', 
                        name = '012', 
                        headline = 'Example challenge headline', 
                        description = 'This is an example description of the challenge.', 
                        doi = 'https://doi.org/123/abc', 
                        status = 'active', 
                        platform = openchallenges_api_client_python.models.simple_challenge_platform.SimpleChallengePlatform(
                            id = 1, 
                            slug = 'example-challenge-platform', 
                            name = '012', ), 
                        website_url = 'https://openchallenges.io', 
                        avatar_url = 'https://openchallenges.io', 
                        incentives = [
                            'publication'
                            ], 
                        submission_types = [
                            'container_image'
                            ], 
                        input_data_types = [
                            openchallenges_api_client_python.models.edam_concept.EdamConcept(
                                id = 1, 
                                class_id = 'http://edamontology.org/data_0850', 
                                preferred_label = 'Sequence set', )
                            ], 
                        categories = [
                            'featured'
                            ], 
                        start_date = 'Fri Jul 21 00:00:00 UTC 2017', 
                        end_date = 'Fri Jul 21 00:00:00 UTC 2017', 
                        starred_count = 100, 
                        operation = openchallenges_api_client_python.models.edam_concept.EdamConcept(
                            id = 1, 
                            class_id = 'http://edamontology.org/data_0850', 
                            preferred_label = 'Sequence set', ), 
                        created_at = '2022-07-04T22:19:11Z', 
                        updated_at = '2022-07-04T22:19:11Z', )
                    ],
        )
        """

    def testChallengesPage(self):
        """Test ChallengesPage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
