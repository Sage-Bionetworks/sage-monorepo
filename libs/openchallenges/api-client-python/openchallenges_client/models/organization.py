# coding: utf-8

"""
    OpenChallenges REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint, constr, validator


class Organization(BaseModel):
    """
    An organization
    """

    id: StrictInt = Field(..., description="The unique identifier of an organization")
    name: StrictStr = Field(...)
    email: StrictStr = Field(..., description="An email address.")
    login: constr(strict=True, max_length=64, min_length=2) = Field(
        ..., description="The login of an organization"
    )
    description: StrictStr = Field(...)
    avatar_key: Optional[StrictStr] = Field(None, alias="avatarKey")
    website_url: StrictStr = Field(..., alias="websiteUrl")
    challenge_count: Optional[conint(strict=True, ge=0)] = Field(
        None, alias="challengeCount"
    )
    created_at: datetime = Field(..., alias="createdAt")
    updated_at: datetime = Field(..., alias="updatedAt")
    acronym: Optional[StrictStr] = None
    __properties = [
        "id",
        "name",
        "email",
        "login",
        "description",
        "avatarKey",
        "websiteUrl",
        "challengeCount",
        "createdAt",
        "updatedAt",
        "acronym",
    ]

    @validator("login")
    def login_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9]+(?:-[a-z0-9]+)*$", value):
            raise ValueError(
                r"must validate the regular expression /^[a-z0-9]+(?:-[a-z0-9]+)*$/"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Organization:
        """Create an instance of Organization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Organization:
        """Create an instance of Organization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Organization.parse_obj(obj)

        _obj = Organization.parse_obj(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "email": obj.get("email"),
                "login": obj.get("login"),
                "description": obj.get("description"),
                "avatar_key": obj.get("avatarKey"),
                "website_url": obj.get("websiteUrl"),
                "challenge_count": obj.get("challengeCount"),
                "created_at": obj.get("createdAt"),
                "updated_at": obj.get("updatedAt"),
                "acronym": obj.get("acronym"),
            }
        )
        return _obj
