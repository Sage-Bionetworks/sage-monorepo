# coding: utf-8

"""
    OpenChallenges REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint, constr, validator

class Organization(BaseModel):
    """
    An organization
    """
    id: StrictInt = Field(..., description="The unique identifier of an organization")
    name: StrictStr = Field(..., description="The name of the organization.")
    login: constr(strict=True, max_length=64, min_length=2) = Field(..., description="The unique login of an organization.")
    description: Optional[StrictStr] = Field(None, description="A description of the organization.")
    avatar_key: Optional[StrictStr] = Field(None, alias="avatarKey")
    website_url: Optional[constr(strict=True, max_length=500)] = Field(None, alias="websiteUrl", description="A URL to the website or image.")
    challenge_count: Optional[conint(strict=True, ge=0)] = Field(0, alias="challengeCount", description="The number of challenges involving this organization.")
    created_at: datetime = Field(..., alias="createdAt", description="Datetime when the object was added to the database.")
    updated_at: datetime = Field(..., alias="updatedAt", description="Datetime when the object was last modified in the database.")
    acronym: Optional[constr(strict=True, max_length=10)] = Field(None, description="An acronym of the organization.")
    __properties = ["id", "name", "login", "description", "avatarKey", "websiteUrl", "challengeCount", "createdAt", "updatedAt", "acronym"]

    @validator('login')
    def login_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9]+(?:-[a-z0-9]+)*$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9]+(?:-[a-z0-9]+)*$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Organization:
        """Create an instance of Organization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if website_url (nullable) is None
        # and __fields_set__ contains the field
        if self.website_url is None and "website_url" in self.__fields_set__:
            _dict['websiteUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Organization:
        """Create an instance of Organization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Organization.parse_obj(obj)

        _obj = Organization.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "login": obj.get("login"),
            "description": obj.get("description"),
            "avatar_key": obj.get("avatarKey"),
            "website_url": obj.get("websiteUrl"),
            "challenge_count": obj.get("challengeCount") if obj.get("challengeCount") is not None else 0,
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "acronym": obj.get("acronym")
        })
        return _obj


