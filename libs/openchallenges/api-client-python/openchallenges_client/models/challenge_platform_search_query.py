# coding: utf-8

"""
    OpenChallenges REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint
from openchallenges_client.models.challenge_platform_direction import ChallengePlatformDirection
from openchallenges_client.models.challenge_platform_sort import ChallengePlatformSort

class ChallengePlatformSearchQuery(BaseModel):
    """
    A challenge platform search query.
    """
    page_number: Optional[conint(strict=True, ge=0)] = Field(0, alias="pageNumber", description="The page number.")
    page_size: Optional[conint(strict=True, ge=1)] = Field(100, alias="pageSize", description="The number of items in a single page.")
    sort: Optional[ChallengePlatformSort] = None
    direction: Optional[ChallengePlatformDirection] = None
    search_terms: Optional[StrictStr] = Field(None, alias="searchTerms", description="A string of search terms used to filter the results.")
    __properties = ["pageNumber", "pageSize", "sort", "direction", "searchTerms"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChallengePlatformSearchQuery:
        """Create an instance of ChallengePlatformSearchQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if direction (nullable) is None
        # and __fields_set__ contains the field
        if self.direction is None and "direction" in self.__fields_set__:
            _dict['direction'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChallengePlatformSearchQuery:
        """Create an instance of ChallengePlatformSearchQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChallengePlatformSearchQuery.parse_obj(obj)

        _obj = ChallengePlatformSearchQuery.parse_obj({
            "page_number": obj.get("pageNumber") if obj.get("pageNumber") is not None else 0,
            "page_size": obj.get("pageSize") if obj.get("pageSize") is not None else 100,
            "sort": obj.get("sort"),
            "direction": obj.get("direction"),
            "search_terms": obj.get("searchTerms")
        })
        return _obj


