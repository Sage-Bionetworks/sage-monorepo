openapi: 3.0.3
info:
  version: 1.0.0
  title: OpenChallenges API
  description: Discover, explore, and contribute to open biomedical challenges.
  license:
    name: Apache 2.0
    url: https://github.com/Sage-Bionetworks/sage-monorepo/blob/main/LICENSE.txt
  contact:
    name: Support
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  x-logo:
    url: https://openchallenges.io/img/unsafe/logo/OpenChallenges-logo.png
servers:
  - url: https://openchallenges.io/api/v1
    description: Local/dev base
  - url: https://openchallenges.io/api/v1
tags:
  - name: Authentication
    description: Operations about authentication
    x-audience:
      - public
    x-displayName: Authentication
  - name: API Key
    description: Operations about API key management
    x-audience:
      - public
    x-displayName: API Key
  - name: OAuth2
    description: Standard OAuth2 and OIDC endpoints for authorization and authentication
    x-audience:
      - public
    x-displayName: OAuth2
  - name: User
    description: Operations about user management and profile information
    x-audience:
      - public
    x-displayName: User
  - name: Challenge
    description: Operations about challenges.
    x-audience:
      - public
    x-displayName: Challenge
  - name: Challenge Contribution
    description: Operations about challenge contributions.
    x-audience:
      - public
    x-displayName: Challenge Contribution
  - name: Challenge Analytics
    description: Operations about challenge analytics.
    x-audience:
      - public
    x-displayName: Challenge Analytics
  - name: Challenge Platform
    description: Operations about challenge platforms.
    x-audience:
      - public
    x-displayName: Challenge Platform
  - name: Edam Concept
    description: Operations about EDAM concepts.
    x-audience:
      - public
    x-displayName: Edam Concept
  - name: Image
    description: Operations about images
    x-audience:
      - public
    x-displayName: Image
  - name: Organization
    description: Operations about organizations
    x-audience:
      - public
    x-displayName: Organization
paths:
  /oauth2/authorize:
    get:
      tags:
        - OAuth2
      summary: OAuth2 Authorization Endpoint
      description: |
        Standard OAuth2 authorization endpoint for third-party applications.
        Redirects users to consent page and returns authorization code.
      operationId: oauth2Authorize
      x-audience:
        - public
      parameters:
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum:
              - code
          description: Response type, must be 'code' for authorization code flow
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: OAuth2 client identifier
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
            format: uri
          description: Redirect URI for the OAuth2 client
        - name: scope
          in: query
          required: false
          schema:
            type: string
          description: Space-separated list of requested scopes
          example: read:org write:org user:profile
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: Opaque state value for CSRF protection
      responses:
        '200':
          description: Authorization consent page (when user needs to grant consent)
          content:
            text/html:
              schema:
                type: string
                description: HTML consent page
        '302':
          description: Redirect to client application with authorization code
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: Redirect URI with authorization code or error
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /oauth2/token:
    post:
      tags:
        - OAuth2
      summary: OAuth2 Token Endpoint
      description: |
        Standard OAuth2 token endpoint for exchanging authorization codes for access tokens.
        Also supports refresh token grant and client credentials grant.
      operationId: oauth2Token
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum:
                    - authorization_code
                    - refresh_token
                    - client_credentials
                  description: OAuth2 grant type
                code:
                  type: string
                  description: Authorization code (required for authorization_code grant)
                redirect_uri:
                  type: string
                  format: uri
                  description: Redirect URI (required for authorization_code grant)
                client_id:
                  type: string
                  description: OAuth2 client identifier
                client_secret:
                  type: string
                  description: OAuth2 client secret
                refresh_token:
                  type: string
                  description: Refresh token (required for refresh_token grant)
                scope:
                  type: string
                  description: Requested scope (optional, space-separated)
              required:
                - grant_type
                - client_id
      responses:
        '200':
          description: Access token response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2TokenResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
        '401':
          description: Invalid client credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /oauth2/revoke:
    post:
      tags:
        - OAuth2
      summary: Revoke access or refresh token
      description: |
        Revoke an access token or refresh token according to RFC 7009.
        This endpoint invalidates the specified token and any associated tokens.
      operationId: oauth2RevokeToken
      security:
        - OAuth2:
            - admin:auth
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token to revoke (access token or refresh token)
                  example: 2YotnFZFEjr1zCsicMWpAA
                token_type_hint:
                  type: string
                  description: Hint about the type of token being revoked
                  enum:
                    - access_token
                    - refresh_token
                  example: access_token
                client_id:
                  type: string
                  description: Client identifier
                  example: s6BhdRkqt3
                client_secret:
                  type: string
                  description: Client secret (if required)
                  example: 7Fjfp0ZBr1KtDRbnfVdmIw
              required:
                - token
      responses:
        '200':
          description: Token successfully revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token revoked successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
  /oauth2/introspect:
    post:
      tags:
        - OAuth2
      summary: Token introspection endpoint
      description: |
        RFC 7662 token introspection endpoint to determine the active state of a token
        and to determine meta-information about this token.
      operationId: oauth2Introspect
      security:
        - OAuth2:
            - admin:auth
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token to introspect
                  example: 2YotnFZFEjr1zCsicMWpAA
                token_type_hint:
                  type: string
                  description: Hint about the type of token being introspected
                  enum:
                    - access_token
                    - refresh_token
                  example: access_token
              required:
                - token
      responses:
        '200':
          description: Token introspection response
          content:
            application/json:
              schema:
                type: object
                properties:
                  active:
                    type: boolean
                    description: Whether the token is active
                    example: true
                  scope:
                    type: string
                    description: Space-separated list of scopes
                    example: read:org user:profile
                  client_id:
                    type: string
                    description: Client identifier
                    example: l238j323ds-23ij4
                  username:
                    type: string
                    description: Human-readable identifier for the resource owner
                    example: jdoe
                  token_type:
                    type: string
                    description: Type of the token
                    example: Bearer
                  exp:
                    type: integer
                    description: Token expiration timestamp
                    example: 1419356238
                  iat:
                    type: integer
                    description: Token issued at timestamp
                    example: 1419350238
                  sub:
                    type: string
                    description: Subject of the token
                    example: Z5O3upPC88QrAjx00dis
                  aud:
                    type: string
                    description: Intended audience
                    example: https://protected.example.net/resource
                  iss:
                    type: string
                    description: Token issuer
                    example: https://server.example.com/
                required:
                  - active
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
  /oauth2/userinfo:
    get:
      tags:
        - OAuth2
      summary: OAuth2 user info endpoint
      description: |
        Standard OAuth2/OIDC user info endpoint that returns information about the authenticated user.
        Requires a valid access token with appropriate scopes.
      operationId: oauth2UserInfo
      security:
        - OAuth2:
            - openid
            - profile
            - email
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  sub:
                    type: string
                    description: Subject identifier (user ID)
                    example: '248289761001'
                  name:
                    type: string
                    description: Full name of the user
                    example: Jane Doe
                  given_name:
                    type: string
                    description: Given name of the user
                    example: Jane
                  family_name:
                    type: string
                    description: Family name of the user
                    example: Doe
                  preferred_username:
                    type: string
                    description: Preferred username
                    example: j.doe
                  email:
                    type: string
                    format: email
                    description: Email address
                    example: janedoe@example.com
                  email_verified:
                    type: boolean
                    description: Whether the email address has been verified
                    example: true
                  picture:
                    type: string
                    format: uri
                    description: Profile picture URL
                    example: https://example.com/profile.jpg
                  website:
                    type: string
                    format: uri
                    description: User's website
                    example: https://janedoe.example.com
                  locale:
                    type: string
                    description: User's locale
                    example: en-US
                  updated_at:
                    type: integer
                    description: Time the user's information was last updated
                    example: 1311280970
                required:
                  - sub
        '401':
          description: Invalid or expired access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
        '403':
          description: Insufficient scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
  /.well-known/openid-configuration:
    get:
      tags:
        - OAuth2
      summary: OAuth2 Authorization Server Metadata
      description: |
        RFC 8414 OAuth2 Authorization Server Metadata endpoint.
        Returns the OAuth2/OIDC discovery document with server configuration.
      operationId: oauth2WellKnownOpenidConfiguration
      x-audience:
        - public
      responses:
        '200':
          description: OAuth2 Authorization Server Metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                    format: uri
                    description: Authorization server's issuer identifier
                    example: https://api.openchallenges.io
                  authorization_endpoint:
                    type: string
                    format: uri
                    description: Authorization endpoint URL
                    example: https://api.openchallenges.io/oauth2/authorize
                  token_endpoint:
                    type: string
                    format: uri
                    description: Token endpoint URL
                    example: https://api.openchallenges.io/oauth2/token
                  userinfo_endpoint:
                    type: string
                    format: uri
                    description: UserInfo endpoint URL
                    example: https://api.openchallenges.io/oauth2/userinfo
                  jwks_uri:
                    type: string
                    format: uri
                    description: JSON Web Key Set document URL
                    example: https://api.openchallenges.io/.well-known/jwks.json
                  scopes_supported:
                    type: array
                    items:
                      type: string
                    description: Supported OAuth2 scopes
                    example:
                      - openid
                      - profile
                      - email
                      - user:profile
                      - read:org
                      - write:org
                  response_types_supported:
                    type: array
                    items:
                      type: string
                    description: Supported OAuth2 response types
                    example:
                      - code
                      - token
                      - id_token
                  grant_types_supported:
                    type: array
                    items:
                      type: string
                    description: Supported OAuth2 grant types
                    example:
                      - authorization_code
                      - refresh_token
                      - client_credentials
                  subject_types_supported:
                    type: array
                    items:
                      type: string
                    description: Supported subject identifier types
                    example:
                      - public
                  id_token_signing_alg_values_supported:
                    type: array
                    items:
                      type: string
                    description: Supported ID token signing algorithms
                    example:
                      - RS256
                      - HS256
                  revocation_endpoint:
                    type: string
                    format: uri
                    description: Token revocation endpoint URL
                    example: https://api.openchallenges.io/oauth2/revoke
                  introspection_endpoint:
                    type: string
                    format: uri
                    description: Token introspection endpoint URL
                    example: https://api.openchallenges.io/oauth2/introspect
                  code_challenge_methods_supported:
                    type: array
                    items:
                      type: string
                    description: Supported PKCE code challenge methods
                    example:
                      - S256
                      - plain
                  token_endpoint_auth_methods_supported:
                    type: array
                    items:
                      type: string
                    description: Supported client authentication methods at token endpoint
                    example:
                      - client_secret_basic
                      - client_secret_post
                required:
                  - issuer
                  - authorization_endpoint
                  - token_endpoint
                  - response_types_supported
                  - subject_types_supported
                  - id_token_signing_alg_values_supported
        '404':
          description: Configuration not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: configuration_not_found
                  error_description:
                    type: string
                    example: OAuth2 configuration is not available
        '500':
          $ref: '#/components/responses/InternalServerError'
  /.well-known/jwks.json:
    get:
      tags:
        - OAuth2
      summary: JSON Web Key Set
      description: |
        RFC 7517 JSON Web Key Set document containing the public keys used to verify JWT tokens.
      operationId: oauth2JwksJson
      x-audience:
        - public
      responses:
        '200':
          description: JSON Web Key Set
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        kty:
                          type: string
                          description: Key type
                          example: RSA
                        use:
                          type: string
                          description: Public key use
                          example: sig
                        kid:
                          type: string
                          description: Key ID
                          example: '2011-04-29'
                        alg:
                          type: string
                          description: Algorithm
                          example: RS256
                        'n':
                          type: string
                          description: RSA modulus
                          example: 0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbIS
                        e:
                          type: string
                          description: RSA exponent
                          example: AQAB
                      required:
                        - kty
                        - use
                        - kid
                        - alg
                    description: Array of JSON Web Keys
                required:
                  - keys
        '404':
          description: JWKS not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: jwks_not_found
                  error_description:
                    type: string
                    example: JSON Web Key Set is not available
        '500':
          $ref: '#/components/responses/InternalServerError'
  /.well-known/oauth-authorization-server:
    get:
      tags:
        - OAuth2
      summary: OAuth2 Authorization Server Discovery
      description: |
        RFC 8414 OAuth2 Authorization Server Metadata endpoint.
        Returns the OAuth2 authorization server discovery document.
      operationId: oauth2AuthorizationServerMetadata
      x-audience:
        - public
      responses:
        '200':
          description: OAuth2 Authorization Server Metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                    format: uri
                    description: Authorization server's issuer identifier
                    example: https://api.openchallenges.io
                  authorization_endpoint:
                    type: string
                    format: uri
                    description: Authorization endpoint URL
                    example: https://api.openchallenges.io/oauth2/authorize
                  token_endpoint:
                    type: string
                    format: uri
                    description: Token endpoint URL
                    example: https://api.openchallenges.io/oauth2/token
                  revocation_endpoint:
                    type: string
                    format: uri
                    description: Token revocation endpoint URL
                    example: https://api.openchallenges.io/oauth2/revoke
                  introspection_endpoint:
                    type: string
                    format: uri
                    description: Token introspection endpoint URL
                    example: https://api.openchallenges.io/oauth2/introspect
                  response_types_supported:
                    type: array
                    items:
                      type: string
                    description: Supported OAuth2 response types
                    example:
                      - code
                      - token
                  grant_types_supported:
                    type: array
                    items:
                      type: string
                    description: Supported OAuth2 grant types
                    example:
                      - authorization_code
                      - refresh_token
                      - client_credentials
                  scopes_supported:
                    type: array
                    items:
                      type: string
                    description: Supported OAuth2 scopes
                    example:
                      - openid
                      - profile
                      - email
                      - user:profile
                      - read:org
                      - write:org
                  token_endpoint_auth_methods_supported:
                    type: array
                    items:
                      type: string
                    description: Supported client authentication methods at token endpoint
                    example:
                      - client_secret_basic
                      - client_secret_post
                  code_challenge_methods_supported:
                    type: array
                    items:
                      type: string
                    description: Supported PKCE code challenge methods
                    example:
                      - S256
                      - plain
                required:
                  - issuer
                  - authorization_endpoint
                  - token_endpoint
                  - response_types_supported
                  - grant_types_supported
        '404':
          description: Discovery document not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      operationId: login
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and revoke refresh tokens for security
      operationId: logout
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/auth/api-keys:
    get:
      tags:
        - API Key
      summary: List API keys
      description: Get all API keys for the authenticated user
      operationId: listApiKeys
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - API Key
      summary: Create API key
      description: Generate a new API key for the authenticated user
      operationId: createApiKey
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/auth/api-keys/{keyId}:
    delete:
      tags:
        - API Key
      summary: Delete API key
      description: Revoke an API key
      operationId: deleteApiKey
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The API key ID to delete
      responses:
        '204':
          description: API key deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /challenges:
    get:
      tags:
        - Challenge
      summary: List challenges
      description: List challenges
      operationId: listChallenges
      x-audience:
        - public
      parameters:
        - $ref: '#/components/parameters/challengeSearchQuery'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengesPage'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Challenge
      summary: Create a challenge
      description: Create a challenge with the specified details
      operationId: createChallenge
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
          description: Challenge created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /challenges/{challengeId}:
    parameters:
      - $ref: '#/components/parameters/challengeId'
    get:
      tags:
        - Challenge
      summary: Get a challenge
      description: Returns the challenge specified
      operationId: getChallenge
      x-audience:
        - public
      responses:
        '200':
          description: A challenge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Challenge
      summary: Update an existing challenge
      description: Updates an existing challenge.
      operationId: updateChallenge
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeUpdateRequest'
      responses:
        '200':
          description: Challenge successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Challenge
      summary: Delete a challenge
      description: Deletes a challenge by its unique ID.
      operationId: deleteChallenge
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      responses:
        '204':
          description: Challenge successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /challenges/{challengeId}/json-ld:
    parameters:
      - $ref: '#/components/parameters/challengeId'
    get:
      tags:
        - Challenge
      summary: Get a challenge in JSON-LD format
      description: Returns the challenge specified in JSON-LD format
      operationId: getChallengeJsonLd
      x-audience:
        - public
      responses:
        '200':
          description: A challenge
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ChallengeJsonLd'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /challenges/{challengeId}/contributions:
    parameters:
      - $ref: '#/components/parameters/challengeId'
    get:
      tags:
        - Challenge Contribution
      summary: List challenge contributions
      description: List challenge contributions
      operationId: listChallengeContributions
      x-audience:
        - public
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeContributionsPage'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Challenge Contribution
      summary: Create a new contribution for a challenge
      description: |
        Creates a new contribution record associated with a challenge ID.
      operationId: createChallengeContribution
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeContributionCreateRequest'
      responses:
        '201':
          description: Contribution created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeContribution'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /challenges/{challengeId}/contributions/{organizationId}/role/{role}:
    parameters:
      - $ref: '#/components/parameters/challengeId'
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/challengeContributionRole'
    delete:
      tags:
        - Challenge Contribution
      summary: Delete a specific challenge contribution
      description: Delete a specific challenge contribution.
      operationId: deleteChallengeContribution
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      responses:
        '204':
          description: Contribution deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /challenge-analytics/challenges-per-year:
    get:
      tags:
        - Challenge Analytics
      summary: Get the number of challenges tracked per year
      description: Returns the number of challenges tracked per year
      operationId: getChallengesPerYear
      x-audience:
        - public
      responses:
        '200':
          description: An object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengesPerYear'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /challenge-platforms:
    get:
      tags:
        - Challenge Platform
      summary: List challenge platforms
      description: List challenge platforms
      operationId: listChallengePlatforms
      x-audience:
        - public
      parameters:
        - $ref: '#/components/parameters/challengePlatformSearchQuery'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengePlatformsPage'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Challenge Platform
      summary: Create a challenge platform
      description: Create a challenge platform with the specified ID
      operationId: createChallengePlatform
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengePlatformCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengePlatform'
          description: Success
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /challenge-platforms/{challengePlatformId}:
    parameters:
      - $ref: '#/components/parameters/challengePlatformId'
    get:
      tags:
        - Challenge Platform
      summary: Get a challenge platform
      description: Returns the challenge platform identified by its unique ID
      operationId: getChallengePlatform
      x-audience:
        - public
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengePlatform'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Challenge Platform
      summary: Update an existing challenge platform
      description: |
        Updates an existing challenge platform.
      operationId: updateChallengePlatform
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengePlatformUpdateRequest'
      responses:
        '200':
          description: Challange platform updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengePlatform'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Challenge Platform
      summary: Delete a challenge platform
      description: |
        Deletes a challenge platform by its unique ID. This action is irreversible.
      operationId: deleteChallengePlatform
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      responses:
        '204':
          description: Deletion successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /edam-concepts:
    get:
      tags:
        - Edam Concept
      summary: List EDAM concepts
      description: List EDAM concepts
      operationId: listEdamConcepts
      x-audience:
        - public
      parameters:
        - $ref: '#/components/parameters/edamConceptSearchQuery'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdamConceptsPage'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /images:
    get:
      tags:
        - Image
      summary: Get an image
      description: Returns the image specified.
      operationId: getImage
      x-audience:
        - public
      parameters:
        - $ref: '#/components/parameters/imageQuery'
      responses:
        '200':
          description: An image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /organizations:
    get:
      tags:
        - Organization
      summary: List organizations
      description: List organizations
      operationId: listOrganizations
      x-audience:
        - public
      parameters:
        - $ref: '#/components/parameters/organizationSearchQuery'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationsPage'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Organization
      summary: Create an organization
      description: Create an organization with the specified account name
      operationId: createOrganization
      x-audience:
        - public
      security:
        - jwtBearerAuth: []
        - apiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationCreateRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Organization created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /organizations/{org}:
    parameters:
      - $ref: '#/components/parameters/org'
    get:
      tags:
        - Organization
      summary: Get an organization
      description: Returns the organization identified by its login or ID.
      operationId: getOrganization
      x-audience:
        - public
      responses:
        '200':
          description: Organization retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Organization
      summary: Update an existing organization
      description: Updates an existing organization.
      operationId: updateOrganization
      x-audience:
        - public
      security:
        - jwtBearerAuth: []
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUpdateRequest'
      responses:
        '200':
          description: Organization successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Organization
      summary: Delete an organization
      description: Deletes the organization specified by its login or ID.
      operationId: deleteOrganization
      x-audience:
        - public
      security:
        - jwtBearerAuth: []
        - apiKeyAuth: []
      responses:
        '204':
          description: Organization successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /organizations/{org}/participations:
    parameters:
      - $ref: '#/components/parameters/org'
  /organizations/{org}/participations/{challengeId}/roles/{role}:
    parameters:
      - $ref: '#/components/parameters/org'
      - $ref: '#/components/parameters/challengeId'
      - $ref: '#/components/parameters/challengeParticipationRole'
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: OAuth2 Authorization Code Flow with PKCE for secure authentication
      flows:
        authorizationCode:
          authorizationUrl: /oauth2/authorize
          tokenUrl: /oauth2/token
          refreshUrl: /oauth2/token
          scopes:
            openid: OpenID Connect authentication
            profile: Access to user's basic profile information
            email: Access to user's email address
            user:profile: Access to user profile information
            user:email: Access to user email settings
            user:keys: Manage API keys
            read:org: Read organization information
            write:org: Create and update organizations
            delete:org: Delete organizations
            admin:org: Administrative access to organizations
            admin:auth: Administrative access to authentication service
            admin:all: Full administrative access to all resources
    jwtBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token obtained from /auth/login or /auth/oauth2/callback endpoint
    apiBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from authentication service or API key for programmatic access
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for programmatic access (create and manage via /auth/api-keys endpoints)
  schemas:
    BasicError:
      type: object
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          type: string
          description: A human readable documentation for the problem type
        status:
          type: integer
          description: The HTTP status code
        detail:
          type: string
          description: A human readable explanation specific to this occurrence of the problem
        type:
          type: string
          description: An absolute URI that identifies the problem type
      required:
        - title
        - status
    OAuth2TokenResponse:
      type: object
      description: OAuth2 access token response
      properties:
        access_token:
          type: string
          description: The access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token_type:
          type: string
          description: Token type, always 'Bearer'
          example: Bearer
        expires_in:
          type: integer
          description: Token lifetime in seconds
          example: 3600
        refresh_token:
          type: string
          description: Refresh token for obtaining new access tokens
          example: def456...
        scope:
          type: string
          description: Space-separated list of granted scopes
          example: read:org write:org user:profile
      required:
        - access_token
        - token_type
        - expires_in
    OAuth2Error:
      type: object
      description: OAuth2 error response
      properties:
        error:
          type: string
          description: Error code
          enum:
            - invalid_request
            - invalid_client
            - invalid_grant
            - unauthorized_client
            - unsupported_grant_type
            - invalid_scope
          example: invalid_request
        error_description:
          type: string
          description: Human-readable error description
          example: The request is missing a required parameter
        error_uri:
          type: string
          format: uri
          description: URI to documentation about the error
      required:
        - error
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username or email
          example: admin
        password:
          type: string
          format: password
          description: User password
          example: changeme
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token (15-60 minutes expiry)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: JWT refresh token (7 days expiry)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        tokenType:
          type: string
          description: Token type
          example: Bearer
          default: Bearer
        expiresIn:
          type: integer
          description: Access token expiry time in seconds
          example: 3600
        userId:
          type: string
          format: uuid
          description: User ID
          example: 123e4567-e89b-12d3-a456-426614174000
        username:
          type: string
          description: Username
          example: admin
        role:
          type: string
          description: User role
          example: admin
          enum:
            - admin
            - user
            - readonly
            - service
    LogoutRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: JWT refresh token to revoke
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        revokeAllTokens:
          type: boolean
          description: Whether to revoke all refresh tokens for the user (default false)
          example: false
          default: false
    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          description: Logout success message
          example: Successfully logged out
        revokedTokens:
          type: integer
          description: Number of refresh tokens revoked
          example: 1
    ApiKey:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: API key ID
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Human-readable name for the API key
          example: Production API Key
        prefix:
          type: string
          description: First 8 characters of the API key for identification
          example: oc_prod_
        createdAt:
          type: string
          format: date-time
          description: When the API key was created
          example: '2024-01-15T10:30:00Z'
        expiresAt:
          type: string
          format: date-time
          description: When the API key expires (null if no expiration)
          example: '2025-01-15T10:30:00Z'
          nullable: true
        lastUsedAt:
          type: string
          format: date-time
          description: When the API key was last used (null if never used)
          example: '2024-06-15T14:20:00Z'
          nullable: true
    CreateApiKeyRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Human-readable name for the API key
          example: Production API Key
          minLength: 1
          maxLength: 100
        expiresIn:
          type: integer
          description: Number of days until the API key expires (optional, default is no expiration)
          example: 365
          minimum: 1
          maximum: 3650
    CreateApiKeyResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: API key ID
          example: 123e4567-e89b-12d3-a456-426614174000
        key:
          type: string
          description: The actual API key (only returned on creation)
          example: oc_prod_abcd1234567890abcdef1234567890abcdef1234
        name:
          type: string
          description: Human-readable name for the API key
          example: Production API Key
        prefix:
          type: string
          description: First 8 characters of the API key for identification
          example: oc_prod_
        createdAt:
          type: string
          format: date-time
          description: When the API key was created
          example: '2024-01-15T10:30:00Z'
        expiresAt:
          type: string
          format: date-time
          description: When the API key expires (null if no expiration)
          example: '2025-01-15T10:30:00Z'
          nullable: true
    ChallengeSort:
      description: What to sort results by.
      type: string
      default: relevance
      enum:
        - created
        - random
        - relevance
        - starred
        - start_date
        - end_date
    ChallengeDirection:
      description: The direction to sort the results by.
      type: string
      nullable: true
      enum:
        - asc
        - desc
    ChallengeIncentive:
      description: The incentive type of the challenge.
      type: string
      enum:
        - monetary
        - publication
        - speaking_engagement
        - other
      example: publication
    ChallengePlatformSlug:
      description: The slug of the challenge platform.
      type: string
      minLength: 3
      maxLength: 30
      pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
      example: example-challenge-platform
    OrganizationId:
      description: The unique identifier of an organization
      type: integer
      format: int64
      example: 1
    ChallengeStatus:
      description: The status of the challenge.
      type: string
      enum:
        - upcoming
        - active
        - completed
      example: active
    ChallengeSubmissionType:
      description: The submission type of the challenge.
      type: string
      enum:
        - container_image
        - prediction_file
        - notebook
        - mlcube
        - other
      example: container_image
    EdamConceptId:
      description: The unique identifier of the EDAM concept.
      type: integer
      format: int32
      minimum: 1
      example: 1
    ChallengeCategory:
      description: The category of the challenge.
      type: string
      enum:
        - featured
        - benchmark
        - hackathon
        - starting_soon
        - ending_soon
        - recently_started
        - recently_ended
      example: featured
    ChallengeSearchQuery:
      type: object
      description: A challenge search query.
      properties:
        pageNumber:
          description: The page number.
          type: integer
          format: int32
          default: 0
          minimum: 0
        pageSize:
          description: The number of items in a single page.
          type: integer
          format: int32
          default: 100
          minimum: 1
        sort:
          $ref: '#/components/schemas/ChallengeSort'
        sortSeed:
          description: The seed that initializes the random sorter.
          type: integer
          format: int32
          minimum: 0
          maximum: 2147483647
          nullable: true
        direction:
          $ref: '#/components/schemas/ChallengeDirection'
        incentives:
          description: An array of challenge incentive types used to filter the results.
          type: array
          items:
            $ref: '#/components/schemas/ChallengeIncentive'
        minStartDate:
          description: Keep the challenges that start at this date or later.
          type: string
          format: date
          nullable: true
          example: '2017-07-21'
        maxStartDate:
          description: Keep the challenges that start at this date or sooner.
          type: string
          format: date
          nullable: true
          example: '2017-07-21'
        platforms:
          description: An array of challenge platform ids used to filter the results.
          type: array
          items:
            $ref: '#/components/schemas/ChallengePlatformSlug'
        organizations:
          description: An array of organization ids used to filter the results.
          type: array
          items:
            $ref: '#/components/schemas/OrganizationId'
        status:
          description: An array of challenge status used to filter the results.
          type: array
          items:
            $ref: '#/components/schemas/ChallengeStatus'
        submissionTypes:
          description: An array of challenge submission types used to filter the results.
          type: array
          items:
            $ref: '#/components/schemas/ChallengeSubmissionType'
        inputDataTypes:
          description: An array of EDAM concept ID used to filter the results.
          type: array
          items:
            $ref: '#/components/schemas/EdamConceptId'
        operations:
          description: An array of EDAM concept ID used to filter the results.
          type: array
          items:
            $ref: '#/components/schemas/EdamConceptId'
        categories:
          description: The array of challenge categories used to filter the results.
          type: array
          items:
            $ref: '#/components/schemas/ChallengeCategory'
        searchTerms:
          description: A string of search terms used to filter the results.
          type: string
          example: dream challenge
    PageMetadata:
      type: object
      description: The metadata of a page.
      properties:
        number:
          description: The page number.
          type: integer
          format: int32
          example: 99
        size:
          description: The number of items in a single page.
          type: integer
          format: int32
          example: 99
        totalElements:
          description: Total number of elements in the result set.
          type: integer
          format: int64
          example: 99
        totalPages:
          description: Total number of pages in the result set.
          type: integer
          format: int32
          example: 99
        hasNext:
          description: Returns if there is a next page.
          type: boolean
          example: true
        hasPrevious:
          description: Returns if there is a previous page.
          type: boolean
          example: true
      required:
        - number
        - size
        - totalElements
        - totalPages
        - hasNext
        - hasPrevious
    ChallengeId:
      description: The unique identifier of the challenge.
      type: integer
      format: int64
      example: 1
    ChallengeSlug:
      description: The unique slug of the challenge.
      type: string
      minLength: 3
      maxLength: 255
      pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
      example: awesome-challenge
    ChallengeName:
      description: The name of the challenge.
      type: string
      minLength: 3
      maxLength: 255
      example: Awesome Challenge
    ChallengeHeadline:
      description: The headline of the challenge.
      type: string
      minLength: 0
      maxLength: 80
      nullable: true
      example: Example challenge headline
    ChallengeDescription:
      description: The description of the challenge.
      type: string
      minLength: 0
      maxLength: 1000
      example: This is an example description of the challenge.
    ChallengeDoi:
      description: The DOI of the challenge.
      type: string
      format: url
      maxLength: 120
      nullable: true
      example: https://doi.org/123/abc
    ChallengePlatformId:
      description: The unique identifier of a challenge platform.
      type: integer
      format: int64
      example: 1
    ChallengePlatformName:
      description: The display name of the challenge platform.
      type: string
      minLength: 3
      maxLength: 50
      example: Example Challenge Platform
    SimpleChallengePlatform:
      type: object
      description: A simple challenge platform.
      properties:
        id:
          $ref: '#/components/schemas/ChallengePlatformId'
        slug:
          $ref: '#/components/schemas/ChallengePlatformSlug'
        name:
          $ref: '#/components/schemas/ChallengePlatformName'
      nullable: true
      required:
        - id
        - slug
        - name
    Url:
      description: A URL to the website or image.
      type: string
      format: url
      maxLength: 500
      nullable: true
      example: https://openchallenges.io
    EdamConcept:
      type: object
      description: The EDAM concept.
      properties:
        id:
          $ref: '#/components/schemas/EdamConceptId'
        classId:
          type: string
          example: http://edamontology.org/data_0850
          maxLength: 60
        preferredLabel:
          type: string
          example: Sequence set
          maxLength: 80
      required:
        - id
        - classId
        - preferredLabel
      nullable: true
    ChallengeStartDate:
      description: The start date of the challenge.
      type: string
      format: date
      nullable: true
      example: '2017-07-21'
    ChallengeEndDate:
      description: The end date of the challenge.
      type: string
      format: date
      nullable: true
      example: '2017-07-21'
    CreatedDateTime:
      description: Datetime when the object was added to the database.
      type: string
      format: date-time
      example: '2022-07-04T22:19:11Z'
    UpdatedDateTime:
      description: Datetime when the object was last modified in the database.
      type: string
      format: date-time
      example: '2022-07-04T22:19:11Z'
    Challenge:
      type: object
      description: A challenge
      properties:
        id:
          $ref: '#/components/schemas/ChallengeId'
        slug:
          $ref: '#/components/schemas/ChallengeSlug'
        name:
          $ref: '#/components/schemas/ChallengeName'
        headline:
          $ref: '#/components/schemas/ChallengeHeadline'
        description:
          $ref: '#/components/schemas/ChallengeDescription'
        doi:
          $ref: '#/components/schemas/ChallengeDoi'
        status:
          $ref: '#/components/schemas/ChallengeStatus'
        platform:
          $ref: '#/components/schemas/SimpleChallengePlatform'
        websiteUrl:
          $ref: '#/components/schemas/Url'
        avatarUrl:
          $ref: '#/components/schemas/Url'
        incentives:
          type: array
          items:
            $ref: '#/components/schemas/ChallengeIncentive'
        submissionTypes:
          type: array
          items:
            $ref: '#/components/schemas/ChallengeSubmissionType'
        inputDataTypes:
          type: array
          items:
            $ref: '#/components/schemas/EdamConcept'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/ChallengeCategory'
        startDate:
          $ref: '#/components/schemas/ChallengeStartDate'
        endDate:
          $ref: '#/components/schemas/ChallengeEndDate'
        starredCount:
          description: The number of times the challenge has been starred by users.
          type: integer
          default: 0
          minimum: 0
          example: 100
        operation:
          $ref: '#/components/schemas/EdamConcept'
        createdAt:
          $ref: '#/components/schemas/CreatedDateTime'
        updatedAt:
          $ref: '#/components/schemas/UpdatedDateTime'
      required:
        - id
        - slug
        - name
        - description
        - status
        - incentives
        - submissionTypes
        - starredCount
        - createdAt
        - updatedAt
        - categories
    ChallengesPage:
      type: object
      description: A page of challenges.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            challenges:
              description: A list of challenges.
              type: array
              items:
                $ref: '#/components/schemas/Challenge'
          required:
            - challenges
    ChallengeCreateRequest:
      type: object
      description: The information used to create a challenge
      properties:
        slug:
          $ref: '#/components/schemas/ChallengeSlug'
        name:
          $ref: '#/components/schemas/ChallengeName'
        headline:
          $ref: '#/components/schemas/ChallengeHeadline'
        description:
          $ref: '#/components/schemas/ChallengeDescription'
        doi:
          $ref: '#/components/schemas/ChallengeDoi'
        status:
          $ref: '#/components/schemas/ChallengeStatus'
        platformId:
          $ref: '#/components/schemas/ChallengePlatformId'
        websiteUrl:
          $ref: '#/components/schemas/Url'
        avatarUrl:
          $ref: '#/components/schemas/Url'
        startDate:
          $ref: '#/components/schemas/ChallengeStartDate'
        endDate:
          $ref: '#/components/schemas/ChallengeEndDate'
        incentives:
          type: array
          items:
            $ref: '#/components/schemas/ChallengeIncentive'
        submissionTypes:
          type: array
          items:
            $ref: '#/components/schemas/ChallengeSubmissionType'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/ChallengeCategory'
        inputDataTypes:
          type: array
          items:
            $ref: '#/components/schemas/EdamConceptId'
        operation:
          $ref: '#/components/schemas/EdamConceptId'
      required:
        - slug
        - name
        - status
        - websiteUrl
    ChallengeUpdateRequest:
      type: object
      description: The information required to update a challenge
      properties:
        slug:
          $ref: '#/components/schemas/ChallengeSlug'
        name:
          $ref: '#/components/schemas/ChallengeName'
        headline:
          $ref: '#/components/schemas/ChallengeHeadline'
        description:
          $ref: '#/components/schemas/ChallengeDescription'
        doi:
          $ref: '#/components/schemas/ChallengeDoi'
        status:
          $ref: '#/components/schemas/ChallengeStatus'
        platformId:
          $ref: '#/components/schemas/ChallengePlatformId'
        websiteUrl:
          $ref: '#/components/schemas/Url'
        avatarUrl:
          $ref: '#/components/schemas/Url'
        incentives:
          type: array
          items:
            $ref: '#/components/schemas/ChallengeIncentive'
        submissionTypes:
          type: array
          items:
            $ref: '#/components/schemas/ChallengeSubmissionType'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/ChallengeCategory'
        inputDataTypes:
          type: array
          items:
            $ref: '#/components/schemas/EdamConceptId'
        operation:
          $ref: '#/components/schemas/EdamConceptId'
        startDate:
          $ref: '#/components/schemas/ChallengeStartDate'
        endDate:
          $ref: '#/components/schemas/ChallengeEndDate'
      required:
        - slug
        - name
        - headline
        - description
        - doi
        - status
        - platformId
        - websiteUrl
        - avatarUrl
        - incentives
        - submissionTypes
        - categories
        - inputDataTypes
        - operation
        - startDate
        - endDate
        - doi
    ChallengeJsonLd:
      type: object
      description: A challenge
      allOf:
        - $ref: '#/components/schemas/Challenge'
        - type: object
          properties:
            '@context':
              type: string
              example: https://schema.org
            '@id':
              type: string
              example: https://openchallenges.io/api/v1/challenges/1
            '@type':
              type: string
              example: Challenge
          required:
            - '@context'
            - '@id'
            - '@type'
    ChallengeContributionId:
      description: The unique identifier of a challenge contribution
      type: integer
      format: int64
      example: 1
    ChallengeContributionRole:
      description: The nature of a challenge contribution.
      type: string
      enum:
        - challenge_organizer
        - data_contributor
        - sponsor
      example: challenge_organizer
    ChallengeContribution:
      type: object
      description: A challenge contribution.
      properties:
        id:
          $ref: '#/components/schemas/ChallengeContributionId'
        challengeId:
          $ref: '#/components/schemas/ChallengeId'
        organizationId:
          $ref: '#/components/schemas/OrganizationId'
        role:
          $ref: '#/components/schemas/ChallengeContributionRole'
      required:
        - id
        - challengeId
        - organizationId
        - role
    ChallengeContributionsPage:
      type: object
      description: A page of challenge challenge contributions.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            challengeContributions:
              description: A list of challenge contributions.
              type: array
              items:
                $ref: '#/components/schemas/ChallengeContribution'
          required:
            - challengeContributions
    ChallengeContributionCreateRequest:
      type: object
      description: A challenge contribution to be created.
      properties:
        organizationId:
          $ref: '#/components/schemas/OrganizationId'
        role:
          $ref: '#/components/schemas/ChallengeContributionRole'
      required:
        - organizationId
        - role
    ChallengesPerYear:
      type: object
      description: An object
      properties:
        years:
          type: array
          items:
            type: string
        challengeCounts:
          type: array
          items:
            type: integer
        undatedChallengeCount:
          type: integer
          default: 0
          minimum: 0
          example: 0
      required:
        - years
        - challengeCounts
        - undatedChallengeCount
    ChallengePlatformSort:
      description: What to sort results by.
      type: string
      default: relevance
      enum:
        - name
        - relevance
    ChallengePlatformDirection:
      description: The direction to sort the results by.
      type: string
      nullable: true
      enum:
        - asc
        - desc
    ChallengePlatformSearchQuery:
      type: object
      description: A challenge platform search query.
      properties:
        pageNumber:
          description: The page number.
          type: integer
          format: int32
          default: 0
          minimum: 0
        pageSize:
          description: The number of items in a single page.
          type: integer
          format: int32
          default: 100
          minimum: 1
        sort:
          $ref: '#/components/schemas/ChallengePlatformSort'
        direction:
          $ref: '#/components/schemas/ChallengePlatformDirection'
        slugs:
          description: An array of challenge platform slugs used to filter the results.
          type: array
          items:
            $ref: '#/components/schemas/ChallengePlatformSlug'
        searchTerms:
          description: A string of search terms used to filter the results.
          type: string
          example: synapse
    AvatarKey:
      description: The avatar key
      type: string
      example: logo/dream.png
    ChallengePlatform:
      type: object
      description: A challenge platform
      properties:
        id:
          $ref: '#/components/schemas/ChallengePlatformId'
        slug:
          $ref: '#/components/schemas/ChallengePlatformSlug'
        name:
          $ref: '#/components/schemas/ChallengePlatformName'
        avatarKey:
          $ref: '#/components/schemas/AvatarKey'
        websiteUrl:
          $ref: '#/components/schemas/Url'
      required:
        - id
        - slug
        - name
        - avatarKey
        - websiteUrl
    ChallengePlatformsPage:
      type: object
      description: A page of challenge platforms.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            challengePlatforms:
              description: A list of challenge platforms.
              type: array
              items:
                $ref: '#/components/schemas/ChallengePlatform'
          required:
            - challengePlatforms
    ChallengePlatformCreateRequest:
      type: object
      description: The information used to create a challenge platform
      properties:
        slug:
          $ref: '#/components/schemas/ChallengePlatformSlug'
        name:
          $ref: '#/components/schemas/ChallengePlatformName'
        avatarKey:
          $ref: '#/components/schemas/AvatarKey'
        websiteUrl:
          $ref: '#/components/schemas/Url'
      required:
        - slug
        - name
        - avatarKey
        - websiteUrl
    ChallengePlatformUpdateRequest:
      type: object
      description: A challenge platform update request.
      properties:
        slug:
          $ref: '#/components/schemas/ChallengePlatformSlug'
        name:
          $ref: '#/components/schemas/ChallengePlatformName'
        avatarKey:
          $ref: '#/components/schemas/AvatarKey'
        websiteUrl:
          $ref: '#/components/schemas/Url'
      required:
        - slug
        - name
        - avatarKey
        - websiteUrl
    EdamConceptSort:
      description: What to sort results by.
      type: string
      default: relevance
      enum:
        - preferred_label
        - relevance
    EdamConceptDirection:
      description: The direction to sort the results by.
      type: string
      nullable: true
      enum:
        - asc
        - desc
    EdamSection:
      description: The EDAM section (sub-ontology).
      type: string
      enum:
        - data
        - format
        - identifier
        - operation
        - topic
      example: data
    EdamConceptSearchQuery:
      type: object
      description: An EDAM concept search query.
      properties:
        pageNumber:
          description: The page number.
          type: integer
          format: int32
          default: 0
          minimum: 0
        pageSize:
          description: The number of items in a single page.
          type: integer
          format: int32
          default: 100
          minimum: 1
        sort:
          $ref: '#/components/schemas/EdamConceptSort'
        direction:
          $ref: '#/components/schemas/EdamConceptDirection'
        ids:
          description: An array of EDAM concept ids used to filter the results.
          type: array
          items:
            $ref: '#/components/schemas/EdamConceptId'
        searchTerms:
          description: A string of search terms used to filter the results.
          type: string
          example: sequence image
        sections:
          description: An array of EDAM sections (sub-ontologies) used to filter the results.
          type: array
          items:
            $ref: '#/components/schemas/EdamSection'
    EdamConceptsPage:
      type: object
      description: A page of EDAM concepts.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            edamConcepts:
              description: A list of EDAM concepts.
              type: array
              items:
                $ref: '#/components/schemas/EdamConcept'
          required:
            - edamConcepts
    ImageKey:
      description: The unique identifier of the image.
      type: string
      example: logo/dream.png
      pattern: ^[a-zA-Z0-9\/_-]+.[a-zA-Z0-9\/_-]+
    ImageHeight:
      description: The height of the image.
      type: string
      default: original
      enum:
        - original
        - 32px
        - 100px
        - 140px
        - 250px
        - 500px
    ImageAspectRatio:
      description: The aspect ratio of the image (the height of the image must be specified).
      type: string
      default: original
      enum:
        - original
        - '16_9'
        - '1_1'
        - '3_2'
        - '2_3'
    ImageQuery:
      type: object
      description: An image query.
      properties:
        objectKey:
          $ref: '#/components/schemas/ImageKey'
        height:
          $ref: '#/components/schemas/ImageHeight'
        aspectRatio:
          $ref: '#/components/schemas/ImageAspectRatio'
      required:
        - objectKey
    Image:
      type: object
      description: An image
      properties:
        url:
          type: string
          example: http://example.com/an-image.png
      required:
        - url
    OrganizationCategory:
      description: The category of the organization.
      type: string
      enum:
        - featured
      example: featured
    ChallengeParticipationRole:
      description: The nature of a challenge participation.
      type: string
      enum:
        - challenge_organizer
        - data_contributor
        - sponsor
      example: challenge_organizer
    OrganizationSort:
      description: What to sort results by.
      type: string
      default: relevance
      enum:
        - challenge_count
        - created
        - name
        - relevance
    OrganizationDirection:
      description: The direction to sort the results by.
      type: string
      nullable: true
      enum:
        - asc
        - desc
    OrganizationSearchQuery:
      type: object
      description: An organization search query.
      properties:
        pageNumber:
          description: The page number.
          type: integer
          format: int32
          default: 0
          minimum: 0
        pageSize:
          description: The number of items in a single page.
          type: integer
          format: int32
          default: 100
          minimum: 1
        categories:
          description: The array of organization categories used to filter the results.
          type: array
          items:
            $ref: '#/components/schemas/OrganizationCategory'
        challengeParticipationRoles:
          description: An array of challenge participation roles used to filter the results.
          type: array
          items:
            $ref: '#/components/schemas/ChallengeParticipationRole'
        sort:
          $ref: '#/components/schemas/OrganizationSort'
        direction:
          $ref: '#/components/schemas/OrganizationDirection'
        ids:
          description: An array of organization ids used to filter the results.
          type: array
          items:
            $ref: '#/components/schemas/OrganizationId'
        searchTerms:
          description: A string of search terms used to filter the results.
          type: string
          example: data provider
    OrganizationLogin:
      description: The unique login of an organization.
      type: string
      minLength: 2
      maxLength: 64
      pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
      example: example-org
    Organization:
      type: object
      description: An organization
      properties:
        id:
          $ref: '#/components/schemas/OrganizationId'
        name:
          description: The name of the organization.
          type: string
          example: Example organization
        login:
          $ref: '#/components/schemas/OrganizationLogin'
        description:
          description: A description of the organization.
          type: string
          nullable: true
          example: A description of the organization.
        avatarKey:
          type: string
          example: logo/dream.png
          nullable: true
        websiteUrl:
          $ref: '#/components/schemas/Url'
        challengeCount:
          description: The number of challenges involving this organization.
          type: integer
          minimum: 0
          default: 0
          example: 10
        acronym:
          description: An acronym of the organization.
          type: string
          maxLength: 10
          example: OC
          nullable: true
        createdAt:
          $ref: '#/components/schemas/CreatedDateTime'
        updatedAt:
          $ref: '#/components/schemas/UpdatedDateTime'
      required:
        - id
        - name
        - login
        - websiteUrl
        - challengeCount
        - createdAt
        - updatedAt
    OrganizationsPage:
      type: object
      description: A page of organizations
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            organizations:
              description: A list of organizations
              type: array
              items:
                $ref: '#/components/schemas/Organization'
          required:
            - organizations
    OrganizationCreateRequest:
      type: object
      description: The information required to create an org account
      properties:
        login:
          $ref: '#/components/schemas/OrganizationLogin'
        name:
          type: string
          example: Example organization
        description:
          type: string
          example: A short description of the organization.
          nullable: true
        avatarKey:
          type: string
          example: logo/300.png
          nullable: true
        websiteUrl:
          $ref: '#/components/schemas/Url'
        acronym:
          description: An acronym of the organization.
          type: string
          maxLength: 10
          example: OC
          nullable: true
      required:
        - login
        - name
        - websiteUrl
    OrganizationUpdateRequest:
      type: object
      description: The information required to update an org account
      properties:
        name:
          type: string
          example: Example organization
        description:
          type: string
          example: A short description of the organization.
          nullable: true
        avatarKey:
          type: string
          format: url
          example: https://via.placeholder.com/300.png
          nullable: true
        websiteUrl:
          $ref: '#/components/schemas/Url'
        acronym:
          description: An acronym of the organization.
          type: string
          maxLength: 10
          example: OC
          nullable: true
      required:
        - name
        - description
        - avatarKey
        - websiteUrl
        - acronym
  responses:
    BadRequest:
      description: Invalid request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    InternalServerError:
      description: The request cannot be fulfilled due to an unexpected server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    NotFound:
      description: The specified resource was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    Forbidden:
      description: The user does not have the permission to perform this action
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    Conflict:
      description: The request conflicts with current state of the target resource
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
  parameters:
    challengeSearchQuery:
      name: challengeSearchQuery
      description: The search query used to find challenges.
      in: query
      schema:
        $ref: '#/components/schemas/ChallengeSearchQuery'
    challengeId:
      name: challengeId
      in: path
      description: The unique identifier of the challenge.
      required: true
      schema:
        $ref: '#/components/schemas/ChallengeId'
    organizationId:
      name: organizationId
      in: path
      description: The unique identifier of the organization.
      required: true
      schema:
        $ref: '#/components/schemas/OrganizationId'
    challengeContributionRole:
      name: role
      in: path
      description: A challenge contribution role.
      required: true
      schema:
        $ref: '#/components/schemas/ChallengeContributionRole'
    challengePlatformSearchQuery:
      name: challengePlatformSearchQuery
      description: The search query used to find challenge platforms.
      in: query
      schema:
        $ref: '#/components/schemas/ChallengePlatformSearchQuery'
    challengePlatformId:
      name: challengePlatformId
      in: path
      description: The unique identifier of the challenge platform.
      required: true
      schema:
        $ref: '#/components/schemas/ChallengePlatformId'
    edamConceptSearchQuery:
      name: edamConceptSearchQuery
      description: The search query used to find EDAM concepts.
      in: query
      schema:
        $ref: '#/components/schemas/EdamConceptSearchQuery'
    imageQuery:
      name: imageQuery
      description: The query used to get an image.
      style: deepObject
      explode: true
      in: query
      schema:
        $ref: '#/components/schemas/ImageQuery'
    organizationSearchQuery:
      name: organizationSearchQuery
      description: The search query used to find organizations.
      in: query
      schema:
        $ref: '#/components/schemas/OrganizationSearchQuery'
    org:
      name: org
      in: path
      description: The id or login of the organization.
      required: true
      schema:
        type: string
        minLength: 1
        maxLength: 64
      examples:
        byString:
          value: dream
        byId:
          value: '1'
    challengeParticipationRole:
      name: role
      in: path
      description: A challenge participation role.
      required: true
      schema:
        $ref: '#/components/schemas/ChallengeParticipationRole'
x-tagGroups:
  - name: OpenChallenges Auth API
    tags:
      - Authentication
      - API Key
      - OAuth2
      - User
  - name: OpenChallenges Challenge API
    tags:
      - Challenge
      - Challenge Contribution
      - Challenge Analytics
      - Challenge Platform
      - Edam Concept
  - name: OpenChallenges Image API
    tags:
      - Image
  - name: OpenChallenges Organization API
    tags:
      - Organization
