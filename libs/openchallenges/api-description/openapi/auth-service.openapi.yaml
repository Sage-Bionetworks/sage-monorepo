openapi: 3.0.3
info:
  version: 1.0.0
  title: OpenChallenges Auth API
  description: Discover, explore, and contribute to open biomedical challenges.
  license:
    name: Apache 2.0
    url: https://github.com/Sage-Bionetworks/sage-monorepo/blob/main/LICENSE.txt
  contact:
    name: Support
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  x-logo:
    url: https://dev.openchallenges.io/img/unsafe/logo/OpenChallenges-logo.png
servers:
  - url: http://localhost/v1
tags:
  - name: Authentication
    description: Operations about authentication
    x-audience:
      - public
  - name: API Key
    description: Operations about API key management
    x-audience:
      - public
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      operationId: login
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/oauth2/authorize:
    post:
      tags:
        - Authentication
      summary: Initiate OAuth2 authentication
      description: Start OAuth2 flow with external provider (Google, Synapse)
      operationId: initiateOAuth2
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2AuthorizeRequest'
      responses:
        '200':
          description: OAuth2 authorization URL generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2AuthorizeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/oauth2/callback:
    post:
      tags:
        - Authentication
      summary: Complete OAuth2 authentication
      description: Handle OAuth2 callback and exchange code for JWT tokens
      operationId: completeOAuth2
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2CallbackRequest'
      responses:
        '200':
          description: OAuth2 authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/oauth2/revoke:
    post:
      tags:
        - Authentication
      summary: Revoke OAuth2 token
      description: Revoke access or refresh tokens according to RFC 7009
      operationId: revokeOAuth2Token
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuth2RevokeRequest'
      responses:
        '200':
          description: Token revocation successful (or token was already invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2RevokeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/jwt/validate:
    post:
      tags:
        - Authentication
      summary: Validate JWT token
      description: Internal endpoint to validate JWT tokens (used by other services)
      operationId: validateJwt
      x-audience:
        - internal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateJwtRequest'
      responses:
        '200':
          description: JWT validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateJwtResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/jwt/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT access token
      description: Exchange refresh token for new access token
      operationId: refreshJwt
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: New access token generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and revoke refresh tokens for security
      operationId: logout
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/api-keys:
    get:
      tags:
        - API Key
      summary: List API keys
      description: Get all API keys for the authenticated user
      operationId: listApiKeys
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - API Key
      summary: Create API key
      description: Generate a new API key for the authenticated user
      operationId: createApiKey
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/api-keys/{keyId}:
    delete:
      tags:
        - API Key
      summary: Delete API key
      description: Revoke an API key
      operationId: deleteApiKey
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The API key ID to delete
      responses:
        '204':
          description: API key deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/validate:
    post:
      tags:
        - Authentication
      summary: Validate API key
      description: Internal endpoint to validate API keys (used by other services)
      operationId: validateApiKey
      x-audience:
        - internal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateApiKeyRequest'
      responses:
        '200':
          description: API key is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateApiKeyResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    apiBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from authentication service or API key for programmatic access
    jwtBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token obtained from /auth/login or /auth/oauth2/callback endpoint
  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username or email
          example: admin
        password:
          type: string
          format: password
          description: User password
          example: changeme
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token (15-60 minutes expiry)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: JWT refresh token (7 days expiry)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        tokenType:
          type: string
          description: Token type
          example: Bearer
          default: Bearer
        expiresIn:
          type: integer
          description: Access token expiry time in seconds
          example: 3600
        userId:
          type: string
          format: uuid
          description: User ID
          example: 123e4567-e89b-12d3-a456-426614174000
        username:
          type: string
          description: Username
          example: admin
        role:
          type: string
          description: User role
          example: admin
          enum:
            - admin
            - user
            - readonly
            - service
    BasicError:
      type: object
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          type: string
          description: A human readable documentation for the problem type
        status:
          type: integer
          description: The HTTP status code
        detail:
          type: string
          description: A human readable explanation specific to this occurrence of the problem
        type:
          type: string
          description: An absolute URI that identifies the problem type
      required:
        - title
        - status
    OAuth2AuthorizeRequest:
      type: object
      required:
        - provider
        - redirectUri
      properties:
        provider:
          type: string
          description: OAuth2 provider
          enum:
            - google
            - synapse
          example: google
        redirectUri:
          type: string
          format: uri
          description: Client redirect URI after OAuth2 completion
          example: https://openchallenges.io/auth/callback
        state:
          type: string
          description: State parameter for CSRF protection (optional)
          example: random_state_string
    OAuth2AuthorizeResponse:
      type: object
      properties:
        authorizationUrl:
          type: string
          format: uri
          description: URL to redirect user for OAuth2 authorization
          example: https://accounts.google.com/oauth2/authorize?client_id=...
        state:
          type: string
          description: State parameter to include in authorization request
          example: random_state_string
    OAuth2CallbackRequest:
      type: object
      required:
        - code
        - state
      properties:
        code:
          type: string
          description: Authorization code from OAuth2 provider
          example: 4/0AX4XfWjYZ1234567890abcdef
        state:
          type: string
          description: State parameter for verification
          example: random_state_string
        redirectUri:
          type: string
          format: uri
          description: Original redirect URI used in authorization request
          example: https://openchallenges.io/auth/callback
    OAuth2RevokeRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: The token to revoke (access token or refresh token)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token_type_hint:
          type: string
          description: Hint about the type of token being revoked
          enum:
            - access_token
            - refresh_token
          example: refresh_token
    OAuth2RevokeResponse:
      type: object
      properties:
        message:
          type: string
          description: Token revocation status message
          example: Token successfully revoked
        revokedTokens:
          type: integer
          description: Number of tokens revoked
          example: 1
    ValidateJwtRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: JWT token to validate
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    ValidateJwtResponse:
      type: object
      properties:
        valid:
          type: boolean
          description: Whether the JWT token is valid
          example: true
        userId:
          type: string
          format: uuid
          description: User ID from token (if valid)
          example: 123e4567-e89b-12d3-a456-426614174000
        username:
          type: string
          description: Username from token (if valid)
          example: admin
        role:
          type: string
          description: User role from token (if valid)
          example: admin
          enum:
            - admin
            - user
            - readonly
            - service
        expiresAt:
          type: string
          format: date-time
          description: Token expiration time (if valid)
          example: '2025-08-30T15:30:00Z'
    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: JWT refresh token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: New JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        tokenType:
          type: string
          description: Token type
          example: Bearer
          default: Bearer
        expiresIn:
          type: integer
          description: Access token expiry time in seconds
          example: 3600
    LogoutRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: JWT refresh token to revoke
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        revokeAllTokens:
          type: boolean
          description: Whether to revoke all refresh tokens for the user (default false)
          example: false
          default: false
    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          description: Logout success message
          example: Successfully logged out
        revokedTokens:
          type: integer
          description: Number of refresh tokens revoked
          example: 1
    ApiKey:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: API key ID
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Human-readable name for the API key
          example: Production API Key
        prefix:
          type: string
          description: First 8 characters of the API key for identification
          example: oc_prod_
        createdAt:
          type: string
          format: date-time
          description: When the API key was created
          example: '2024-01-15T10:30:00Z'
        expiresAt:
          type: string
          format: date-time
          description: When the API key expires (null if no expiration)
          example: '2025-01-15T10:30:00Z'
          nullable: true
        lastUsedAt:
          type: string
          format: date-time
          description: When the API key was last used (null if never used)
          example: '2024-06-15T14:20:00Z'
          nullable: true
    CreateApiKeyRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Human-readable name for the API key
          example: Production API Key
          minLength: 1
          maxLength: 100
        expiresIn:
          type: integer
          description: Number of days until the API key expires (optional, default is no expiration)
          example: 365
          minimum: 1
          maximum: 3650
    CreateApiKeyResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: API key ID
          example: 123e4567-e89b-12d3-a456-426614174000
        key:
          type: string
          description: The actual API key (only returned on creation)
          example: oc_prod_abcd1234567890abcdef1234567890abcdef1234
        name:
          type: string
          description: Human-readable name for the API key
          example: Production API Key
        prefix:
          type: string
          description: First 8 characters of the API key for identification
          example: oc_prod_
        createdAt:
          type: string
          format: date-time
          description: When the API key was created
          example: '2024-01-15T10:30:00Z'
        expiresAt:
          type: string
          format: date-time
          description: When the API key expires (null if no expiration)
          example: '2025-01-15T10:30:00Z'
          nullable: true
    ValidateApiKeyRequest:
      type: object
      required:
        - apiKey
      properties:
        apiKey:
          type: string
          description: The API key to validate
          example: oc_prod_abcd1234567890abcdef1234567890abcdef1234
    ValidateApiKeyResponse:
      type: object
      properties:
        valid:
          type: boolean
          description: Whether the API key is valid
          example: true
        userId:
          type: string
          format: uuid
          description: ID of the user who owns this API key (only if valid)
          example: 123e4567-e89b-12d3-a456-426614174000
        username:
          type: string
          description: Username of the API key owner (only if valid)
          example: admin
        role:
          type: string
          description: Role of the API key owner (only if valid)
          example: admin
          enum:
            - admin
            - user
            - readonly
            - service
        scopes:
          type: array
          items:
            type: string
          description: Permissions granted to this API key (only if valid)
          example:
            - organizations:read
            - organizations:write
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    InternalServerError:
      description: The request cannot be fulfilled due to an unexpected server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    BadRequest:
      description: Invalid request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    NotFound:
      description: The specified resource was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
