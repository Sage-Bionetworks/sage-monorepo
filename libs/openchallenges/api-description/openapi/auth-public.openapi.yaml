openapi: 3.0.3
info:
  version: 1.0.0
  title: OpenChallenges Auth API
  description: |
    Authentication and authorization service for OpenChallenges.

    This service provides:
    - OAuth2 Authorization Server with Google/Synapse login
    - API key management for service-to-service communication
    - JWT token validation for API access
    - User profile management

    **OAuth2 Endpoints** (Spring Authorization Server - not documented here):
    - `GET /oauth2/authorize` - OAuth2 authorization endpoint
    - `POST /oauth2/token` - Token exchange endpoint
    - `GET /.well-known/oauth-authorization-server` - OAuth2 discovery

    **Custom API Endpoints** (documented below):
    - `/v1/auth/api-keys` - API key management
    - `/v1/auth/profile` - User profile management
    - `/v1/auth/api-keys/validate` - API key validation

    **Authentication Methods**:
    - **OAuth2**: Use standard OAuth2 flows for user login via Google/Synapse
    - **API Keys**: Use for service-to-service communication
    - **JWT**: Tokens issued by OAuth2 server for API access
  license:
    name: Apache 2.0
    url: https://github.com/Sage-Bionetworks/sage-monorepo/blob/main/LICENSE.txt
  contact:
    name: Support
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  x-logo:
    url: https://dev.openchallenges.io/img/unsafe/logo/OpenChallenges-logo.png
servers:
  - url: http://localhost/v1
    description: Local/dev base
tags:
  - name: Authentication
    description: User profile and token validation operations
    x-audience:
      - public
  - name: API Key
    description: API key management for service-to-service authentication
    x-audience:
      - public
paths:
  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Get the authenticated user's profile information
      operationId: getUserProfile
      x-audience:
        - public
      security:
        - OAuth2:
            - profile
        - jwtBearerAuth: []
        - apiBearerAuth: []
      responses:
        '200':
          description: User profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Authentication
      summary: Update user profile
      description: Update the authenticated user's profile information
      operationId: updateUserProfile
      x-audience:
        - public
      security:
        - OAuth2:
            - profile
        - jwtBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/api-keys:
    get:
      tags:
        - API Key
      summary: List API keys
      description: Get all API keys for the authenticated user
      operationId: listApiKeys
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - API Key
      summary: Create API key
      description: Generate a new API key for the authenticated user
      operationId: createApiKey
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/api-keys/{keyId}:
    delete:
      tags:
        - API Key
      summary: Delete API key
      description: Revoke an API key
      operationId: deleteApiKey
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The API key ID to delete
      responses:
        '204':
          description: API key deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: OAuth2 Authorization Code Flow for user authentication via Google/Synapse
      flows:
        authorizationCode:
          authorizationUrl: /oauth2/authorize
          tokenUrl: /oauth2/token
          refreshUrl: /oauth2/token
          scopes:
            openid: OpenID Connect authentication
            profile: Access to user's basic profile information
            email: Access to user's email address
            api:read: Read access to API resources
            api:write: Write access to API resources
            api:admin: Administrative access to API resources
    jwtBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token obtained from OAuth2 authorization flow
    apiBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: API-Key
      description: API key for programmatic access and service-to-service communication
  schemas:
    UserRole:
      type: string
      enum:
        - user
        - moderator
        - admin
        - service
      description: User role defining the level of access and permissions
    AuthScope:
      type: string
      enum:
        - user:profile
        - user:email
        - user:keys
        - read:org
        - write:org
        - delete:org
        - admin:org
        - read:challenge
        - write:challenge
        - delete:challenge
        - admin:challenge
        - admin:auth
        - admin:all
      description: Permission scope defining specific access rights
    UserProfile:
      type: object
      required:
        - id
        - username
        - email
        - role
        - createdAt
      properties:
        id:
          type: string
          description: Unique user identifier
          example: user_123456789
        username:
          type: string
          description: User's username
          example: johndoe
        email:
          type: string
          format: email
          description: User's email address
          example: john.doe@example.com
        firstName:
          type: string
          description: User's first name
          example: John
        lastName:
          type: string
          description: User's last name
          example: Doe
        role:
          $ref: '#/components/schemas/UserRole'
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/AuthScope'
          description: User's authorized scopes/permissions
        avatarUrl:
          type: string
          format: uri
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
        bio:
          type: string
          description: User's biography or description
          maxLength: 500
          example: Researcher in computational biology
        website:
          type: string
          format: uri
          description: User's website URL
          example: https://johndoe.com
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user account was created
          example: '2024-01-15T10:30:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user profile was last updated
          example: '2024-02-01T14:20:00Z'
    BasicError:
      type: object
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          type: string
          description: A human readable documentation for the problem type
        status:
          type: integer
          description: The HTTP status code
        detail:
          type: string
          description: A human readable explanation specific to this occurrence of the problem
        type:
          type: string
          description: An absolute URI that identifies the problem type
      required:
        - title
        - status
    UpdateUserProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          description: User's first name
          example: John
          maxLength: 50
        lastName:
          type: string
          description: User's last name
          example: Doe
          maxLength: 50
        bio:
          type: string
          description: User's biography or description
          maxLength: 500
          example: Researcher in computational biology
        website:
          type: string
          format: uri
          description: User's website URL
          example: https://johndoe.com
        avatarUrl:
          type: string
          format: uri
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
    ApiKey:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: API key ID
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Human-readable name for the API key
          example: Production API Key
        prefix:
          type: string
          description: First 8 characters of the API key for identification
          example: oc_prod_
        createdAt:
          type: string
          format: date-time
          description: When the API key was created
          example: '2024-01-15T10:30:00Z'
        expiresAt:
          type: string
          format: date-time
          description: When the API key expires (null if no expiration)
          example: '2025-01-15T10:30:00Z'
          nullable: true
        lastUsedAt:
          type: string
          format: date-time
          description: When the API key was last used (null if never used)
          example: '2024-06-15T14:20:00Z'
          nullable: true
    CreateApiKeyRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Human-readable name for the API key
          example: Production API Key
          minLength: 1
          maxLength: 100
        expiresIn:
          type: integer
          description: Number of days until the API key expires (optional, default is no expiration)
          example: 365
          minimum: 1
          maximum: 3650
    CreateApiKeyResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: API key ID
          example: 123e4567-e89b-12d3-a456-426614174000
        key:
          type: string
          description: The actual API key (only returned on creation)
          example: oc_prod_abcd1234567890abcdef1234567890abcdef1234
        name:
          type: string
          description: Human-readable name for the API key
          example: Production API Key
        prefix:
          type: string
          description: First 8 characters of the API key for identification
          example: oc_prod_
        createdAt:
          type: string
          format: date-time
          description: When the API key was created
          example: '2024-01-15T10:30:00Z'
        expiresAt:
          type: string
          format: date-time
          description: When the API key expires (null if no expiration)
          example: '2025-01-15T10:30:00Z'
          nullable: true
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    InternalServerError:
      description: The request cannot be fulfilled due to an unexpected server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    BadRequest:
      description: Invalid request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    NotFound:
      description: The specified resource was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
