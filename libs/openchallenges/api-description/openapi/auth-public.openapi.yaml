openapi: 3.0.3
info:
  version: 1.0.0
  title: OpenChallenges Auth API
  description: Discover, explore, and contribute to open biomedical challenges.
  license:
    name: Apache 2.0
    url: https://github.com/Sage-Bionetworks/sage-monorepo/blob/main/LICENSE.txt
  contact:
    name: Support
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  x-logo:
    url: https://dev.openchallenges.io/img/unsafe/logo/OpenChallenges-logo.png
servers:
  - url: http://localhost
    description: Local/dev base
tags:
  - name: Authentication
    description: Operations about authentication
    x-audience:
      - public
  - name: API Key
    description: Operations about API key management
    x-audience:
      - public
  - name: OAuth2
    description: Standard OAuth2 and OIDC endpoints for authorization and authentication
    x-audience:
      - public
  - name: User
    description: Operations about user management and profile information
    x-audience:
      - public
paths:
  /oauth2/authorize:
    get:
      tags:
        - OAuth2
      summary: OAuth2 Authorization Endpoint
      description: |
        Standard OAuth2 authorization endpoint for third-party applications.
        Redirects users to consent page and returns authorization code.
      operationId: oauth2Authorize
      x-audience:
        - public
      parameters:
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum:
              - code
          description: Response type, must be 'code' for authorization code flow
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: OAuth2 client identifier
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
            format: uri
          description: Redirect URI for the OAuth2 client
        - name: scope
          in: query
          required: false
          schema:
            type: string
          description: Space-separated list of requested scopes
          example: read:org write:org user:profile
        - name: state
          in: query
          required: false
          schema:
            type: string
          description: Opaque state value for CSRF protection
      responses:
        '200':
          description: Authorization consent page (when user needs to grant consent)
          content:
            text/html:
              schema:
                type: string
                description: HTML consent page
        '302':
          description: Redirect to client application with authorization code
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: Redirect URI with authorization code or error
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /oauth2/token:
    post:
      tags:
        - OAuth2
      summary: OAuth2 Token Endpoint
      description: |
        Standard OAuth2 token endpoint for exchanging authorization codes for access tokens.
        Also supports refresh token grant and client credentials grant.
      operationId: oauth2Token
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum:
                    - authorization_code
                    - refresh_token
                    - client_credentials
                  description: OAuth2 grant type
                code:
                  type: string
                  description: Authorization code (required for authorization_code grant)
                redirect_uri:
                  type: string
                  format: uri
                  description: Redirect URI (required for authorization_code grant)
                client_id:
                  type: string
                  description: OAuth2 client identifier
                client_secret:
                  type: string
                  description: OAuth2 client secret
                refresh_token:
                  type: string
                  description: Refresh token (required for refresh_token grant)
                scope:
                  type: string
                  description: Requested scope (optional, space-separated)
              required:
                - grant_type
                - client_id
      responses:
        '200':
          description: Access token response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2TokenResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
        '401':
          description: Invalid client credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /oauth2/revoke:
    post:
      tags:
        - OAuth2
      summary: Revoke access or refresh token
      description: |
        Revoke an access token or refresh token according to RFC 7009.
        This endpoint invalidates the specified token and any associated tokens.
      operationId: oauth2RevokeToken
      security:
        - OAuth2:
            - admin:auth
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token to revoke (access token or refresh token)
                  example: 2YotnFZFEjr1zCsicMWpAA
                token_type_hint:
                  type: string
                  description: Hint about the type of token being revoked
                  enum:
                    - access_token
                    - refresh_token
                  example: access_token
                client_id:
                  type: string
                  description: Client identifier
                  example: s6BhdRkqt3
                client_secret:
                  type: string
                  description: Client secret (if required)
                  example: 7Fjfp0ZBr1KtDRbnfVdmIw
              required:
                - token
      responses:
        '200':
          description: Token successfully revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token revoked successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
  /oauth2/introspect:
    post:
      tags:
        - OAuth2
      summary: Token introspection endpoint
      description: |
        RFC 7662 token introspection endpoint to determine the active state of a token
        and to determine meta-information about this token.
      operationId: oauth2Introspect
      security:
        - OAuth2:
            - admin:auth
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token to introspect
                  example: 2YotnFZFEjr1zCsicMWpAA
                token_type_hint:
                  type: string
                  description: Hint about the type of token being introspected
                  enum:
                    - access_token
                    - refresh_token
                  example: access_token
              required:
                - token
      responses:
        '200':
          description: Token introspection response
          content:
            application/json:
              schema:
                type: object
                properties:
                  active:
                    type: boolean
                    description: Whether the token is active
                    example: true
                  scope:
                    type: string
                    description: Space-separated list of scopes
                    example: read:org user:profile
                  client_id:
                    type: string
                    description: Client identifier
                    example: l238j323ds-23ij4
                  username:
                    type: string
                    description: Human-readable identifier for the resource owner
                    example: jdoe
                  token_type:
                    type: string
                    description: Type of the token
                    example: Bearer
                  exp:
                    type: integer
                    description: Token expiration timestamp
                    example: 1419356238
                  iat:
                    type: integer
                    description: Token issued at timestamp
                    example: 1419350238
                  sub:
                    type: string
                    description: Subject of the token
                    example: Z5O3upPC88QrAjx00dis
                  aud:
                    type: string
                    description: Intended audience
                    example: https://protected.example.net/resource
                  iss:
                    type: string
                    description: Token issuer
                    example: https://server.example.com/
                required:
                  - active
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
  /oauth2/userinfo:
    get:
      tags:
        - OAuth2
      summary: OAuth2 user info endpoint
      description: |
        Standard OAuth2/OIDC user info endpoint that returns information about the authenticated user.
        Requires a valid access token with appropriate scopes.
      operationId: oauth2UserInfo
      security:
        - OAuth2:
            - openid
            - profile
            - email
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  sub:
                    type: string
                    description: Subject identifier (user ID)
                    example: '248289761001'
                  name:
                    type: string
                    description: Full name of the user
                    example: Jane Doe
                  given_name:
                    type: string
                    description: Given name of the user
                    example: Jane
                  family_name:
                    type: string
                    description: Family name of the user
                    example: Doe
                  preferred_username:
                    type: string
                    description: Preferred username
                    example: j.doe
                  email:
                    type: string
                    format: email
                    description: Email address
                    example: janedoe@example.com
                  email_verified:
                    type: boolean
                    description: Whether the email address has been verified
                    example: true
                  picture:
                    type: string
                    format: uri
                    description: Profile picture URL
                    example: https://example.com/profile.jpg
                  website:
                    type: string
                    format: uri
                    description: User's website
                    example: https://janedoe.example.com
                  locale:
                    type: string
                    description: User's locale
                    example: en-US
                  updated_at:
                    type: integer
                    description: Time the user's information was last updated
                    example: 1311280970
                required:
                  - sub
        '401':
          description: Invalid or expired access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
        '403':
          description: Insufficient scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
  /.well-known/openid-configuration:
    get:
      tags:
        - OAuth2
      summary: OAuth2 Authorization Server Metadata
      description: |
        RFC 8414 OAuth2 Authorization Server Metadata endpoint.
        Returns the OAuth2/OIDC discovery document with server configuration.
      operationId: oauth2WellKnownOpenidConfiguration
      x-audience:
        - public
      responses:
        '200':
          description: OAuth2 Authorization Server Metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                    format: uri
                    description: Authorization server's issuer identifier
                    example: https://api.openchallenges.io
                  authorization_endpoint:
                    type: string
                    format: uri
                    description: Authorization endpoint URL
                    example: https://api.openchallenges.io/oauth2/authorize
                  token_endpoint:
                    type: string
                    format: uri
                    description: Token endpoint URL
                    example: https://api.openchallenges.io/oauth2/token
                  userinfo_endpoint:
                    type: string
                    format: uri
                    description: UserInfo endpoint URL
                    example: https://api.openchallenges.io/oauth2/userinfo
                  jwks_uri:
                    type: string
                    format: uri
                    description: JSON Web Key Set document URL
                    example: https://api.openchallenges.io/.well-known/jwks.json
                  scopes_supported:
                    type: array
                    items:
                      type: string
                    description: Supported OAuth2 scopes
                    example:
                      - openid
                      - profile
                      - email
                      - user:profile
                      - read:org
                      - write:org
                  response_types_supported:
                    type: array
                    items:
                      type: string
                    description: Supported OAuth2 response types
                    example:
                      - code
                      - token
                      - id_token
                  grant_types_supported:
                    type: array
                    items:
                      type: string
                    description: Supported OAuth2 grant types
                    example:
                      - authorization_code
                      - refresh_token
                      - client_credentials
                  subject_types_supported:
                    type: array
                    items:
                      type: string
                    description: Supported subject identifier types
                    example:
                      - public
                  id_token_signing_alg_values_supported:
                    type: array
                    items:
                      type: string
                    description: Supported ID token signing algorithms
                    example:
                      - RS256
                      - HS256
                  revocation_endpoint:
                    type: string
                    format: uri
                    description: Token revocation endpoint URL
                    example: https://api.openchallenges.io/oauth2/revoke
                  introspection_endpoint:
                    type: string
                    format: uri
                    description: Token introspection endpoint URL
                    example: https://api.openchallenges.io/oauth2/introspect
                  code_challenge_methods_supported:
                    type: array
                    items:
                      type: string
                    description: Supported PKCE code challenge methods
                    example:
                      - S256
                      - plain
                  token_endpoint_auth_methods_supported:
                    type: array
                    items:
                      type: string
                    description: Supported client authentication methods at token endpoint
                    example:
                      - client_secret_basic
                      - client_secret_post
                required:
                  - issuer
                  - authorization_endpoint
                  - token_endpoint
                  - response_types_supported
                  - subject_types_supported
                  - id_token_signing_alg_values_supported
        '404':
          description: Configuration not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: configuration_not_found
                  error_description:
                    type: string
                    example: OAuth2 configuration is not available
        '500':
          $ref: '#/components/responses/InternalServerError'
  /.well-known/jwks.json:
    get:
      tags:
        - OAuth2
      summary: JSON Web Key Set
      description: |
        RFC 7517 JSON Web Key Set document containing the public keys used to verify JWT tokens.
      operationId: oauth2JwksJson
      x-audience:
        - public
      responses:
        '200':
          description: JSON Web Key Set
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        kty:
                          type: string
                          description: Key type
                          example: RSA
                        use:
                          type: string
                          description: Public key use
                          example: sig
                        kid:
                          type: string
                          description: Key ID
                          example: '2011-04-29'
                        alg:
                          type: string
                          description: Algorithm
                          example: RS256
                        'n':
                          type: string
                          description: RSA modulus
                          example: 0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbIS
                        e:
                          type: string
                          description: RSA exponent
                          example: AQAB
                      required:
                        - kty
                        - use
                        - kid
                        - alg
                    description: Array of JSON Web Keys
                required:
                  - keys
        '404':
          description: JWKS not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: jwks_not_found
                  error_description:
                    type: string
                    example: JSON Web Key Set is not available
        '500':
          $ref: '#/components/responses/InternalServerError'
  /.well-known/oauth-authorization-server:
    get:
      tags:
        - OAuth2
      summary: OAuth2 Authorization Server Discovery
      description: |
        RFC 8414 OAuth2 Authorization Server Metadata endpoint.
        Returns the OAuth2 authorization server discovery document.
      operationId: oauth2AuthorizationServerMetadata
      x-audience:
        - public
      responses:
        '200':
          description: OAuth2 Authorization Server Metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                    format: uri
                    description: Authorization server's issuer identifier
                    example: https://api.openchallenges.io
                  authorization_endpoint:
                    type: string
                    format: uri
                    description: Authorization endpoint URL
                    example: https://api.openchallenges.io/oauth2/authorize
                  token_endpoint:
                    type: string
                    format: uri
                    description: Token endpoint URL
                    example: https://api.openchallenges.io/oauth2/token
                  revocation_endpoint:
                    type: string
                    format: uri
                    description: Token revocation endpoint URL
                    example: https://api.openchallenges.io/oauth2/revoke
                  introspection_endpoint:
                    type: string
                    format: uri
                    description: Token introspection endpoint URL
                    example: https://api.openchallenges.io/oauth2/introspect
                  response_types_supported:
                    type: array
                    items:
                      type: string
                    description: Supported OAuth2 response types
                    example:
                      - code
                      - token
                  grant_types_supported:
                    type: array
                    items:
                      type: string
                    description: Supported OAuth2 grant types
                    example:
                      - authorization_code
                      - refresh_token
                      - client_credentials
                  scopes_supported:
                    type: array
                    items:
                      type: string
                    description: Supported OAuth2 scopes
                    example:
                      - openid
                      - profile
                      - email
                      - user:profile
                      - read:org
                      - write:org
                  token_endpoint_auth_methods_supported:
                    type: array
                    items:
                      type: string
                    description: Supported client authentication methods at token endpoint
                    example:
                      - client_secret_basic
                      - client_secret_post
                  code_challenge_methods_supported:
                    type: array
                    items:
                      type: string
                    description: Supported PKCE code challenge methods
                    example:
                      - S256
                      - plain
                required:
                  - issuer
                  - authorization_endpoint
                  - token_endpoint
                  - response_types_supported
                  - grant_types_supported
        '404':
          description: Discovery document not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      operationId: login
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/auth/oauth2/authorize:
    post:
      tags:
        - Authentication
      summary: Initiate OAuth2 authentication
      description: Start OAuth2 flow with external provider (Google, Synapse)
      operationId: initiateOAuth2
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2AuthorizeRequest'
      responses:
        '200':
          description: OAuth2 authorization URL generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2AuthorizeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/auth/oauth2/callback:
    post:
      tags:
        - Authentication
      summary: Complete OAuth2 authentication
      description: Handle OAuth2 callback and exchange code for JWT tokens
      operationId: completeOAuth2
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2CallbackRequest'
      responses:
        '200':
          description: OAuth2 authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/auth/oauth2/revoke:
    post:
      tags:
        - Authentication
      summary: Revoke OAuth2 token
      description: Revoke access or refresh tokens according to RFC 7009
      operationId: revokeOAuth2Token
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuth2RevokeRequest'
      responses:
        '200':
          description: Token revocation successful (or token was already invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2RevokeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/auth/jwt/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT access token
      description: Exchange refresh token for new access token
      operationId: refreshJwt
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: New access token generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and revoke refresh tokens for security
      operationId: logout
      x-audience:
        - public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/auth/api-keys:
    get:
      tags:
        - API Key
      summary: List API keys
      description: Get all API keys for the authenticated user
      operationId: listApiKeys
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - API Key
      summary: Create API key
      description: Generate a new API key for the authenticated user
      operationId: createApiKey
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/auth/api-keys/{keyId}:
    delete:
      tags:
        - API Key
      summary: Delete API key
      description: Revoke an API key
      operationId: deleteApiKey
      x-audience:
        - public
      security:
        - apiBearerAuth: []
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The API key ID to delete
      responses:
        '204':
          description: API key deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/user:
    get:
      tags:
        - User
      summary: Get current user information
      description: |
        Get information about the currently authenticated user.
        This is an alias for the OAuth2 userinfo endpoint for backward compatibility.
      operationId: getCurrentUser
      security:
        - jwtBearerAuth: []
        - OAuth2:
            - openid
            - profile
            - email
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  sub:
                    type: string
                    description: Subject identifier (user ID)
                    example: '248289761001'
                  name:
                    type: string
                    description: Full name of the user
                    example: Jane Doe
                  given_name:
                    type: string
                    description: Given name of the user
                    example: Jane
                  family_name:
                    type: string
                    description: Family name of the user
                    example: Doe
                  preferred_username:
                    type: string
                    description: Preferred username
                    example: j.doe
                  email:
                    type: string
                    format: email
                    description: Email address
                    example: janedoe@example.com
                  email_verified:
                    type: boolean
                    description: Whether the email address has been verified
                    example: true
                  picture:
                    type: string
                    format: uri
                    description: Profile picture URL
                    example: https://example.com/profile.jpg
                  website:
                    type: string
                    format: uri
                    description: User's website
                    example: https://janedoe.example.com
                  locale:
                    type: string
                    description: User's locale
                    example: en-US
                  updated_at:
                    type: integer
                    description: Time the user's information was last updated
                    example: 1311280970
                required:
                  - sub
        '401':
          description: Invalid or expired access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
        '403':
          description: Insufficient scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Error'
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: OAuth2 Authorization Code Flow with PKCE for secure authentication
      flows:
        authorizationCode:
          authorizationUrl: /oauth2/authorize
          tokenUrl: /oauth2/token
          refreshUrl: /oauth2/token
          scopes:
            openid: OpenID Connect authentication
            profile: Access to user's basic profile information
            email: Access to user's email address
            user:profile: Access to user profile information
            user:email: Access to user email settings
            user:keys: Manage API keys
            read:org: Read organization information
            write:org: Create and update organizations
            delete:org: Delete organizations
            admin:org: Administrative access to organizations
            admin:auth: Administrative access to authentication service
            admin:all: Full administrative access to all resources
    jwtBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token obtained from /auth/login or /auth/oauth2/callback endpoint
    apiBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from authentication service or API key for programmatic access
  schemas:
    BasicError:
      type: object
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          type: string
          description: A human readable documentation for the problem type
        status:
          type: integer
          description: The HTTP status code
        detail:
          type: string
          description: A human readable explanation specific to this occurrence of the problem
        type:
          type: string
          description: An absolute URI that identifies the problem type
      required:
        - title
        - status
    OAuth2TokenResponse:
      type: object
      description: OAuth2 access token response
      properties:
        access_token:
          type: string
          description: The access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token_type:
          type: string
          description: Token type, always 'Bearer'
          example: Bearer
        expires_in:
          type: integer
          description: Token lifetime in seconds
          example: 3600
        refresh_token:
          type: string
          description: Refresh token for obtaining new access tokens
          example: def456...
        scope:
          type: string
          description: Space-separated list of granted scopes
          example: read:org write:org user:profile
      required:
        - access_token
        - token_type
        - expires_in
    OAuth2Error:
      type: object
      description: OAuth2 error response
      properties:
        error:
          type: string
          description: Error code
          enum:
            - invalid_request
            - invalid_client
            - invalid_grant
            - unauthorized_client
            - unsupported_grant_type
            - invalid_scope
          example: invalid_request
        error_description:
          type: string
          description: Human-readable error description
          example: The request is missing a required parameter
        error_uri:
          type: string
          format: uri
          description: URI to documentation about the error
      required:
        - error
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username or email
          example: admin
        password:
          type: string
          format: password
          description: User password
          example: changeme
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token (15-60 minutes expiry)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: JWT refresh token (7 days expiry)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        tokenType:
          type: string
          description: Token type
          example: Bearer
          default: Bearer
        expiresIn:
          type: integer
          description: Access token expiry time in seconds
          example: 3600
        userId:
          type: string
          format: uuid
          description: User ID
          example: 123e4567-e89b-12d3-a456-426614174000
        username:
          type: string
          description: Username
          example: admin
        role:
          type: string
          description: User role
          example: admin
          enum:
            - admin
            - user
            - readonly
            - service
    OAuth2AuthorizeRequest:
      type: object
      required:
        - provider
        - redirectUri
      properties:
        provider:
          type: string
          description: OAuth2 provider
          enum:
            - google
            - synapse
          example: google
        redirectUri:
          type: string
          format: uri
          description: Client redirect URI after OAuth2 completion
          example: https://openchallenges.io/auth/callback
        state:
          type: string
          description: State parameter for CSRF protection (optional)
          example: random_state_string
    OAuth2AuthorizeResponse:
      type: object
      properties:
        authorizationUrl:
          type: string
          format: uri
          description: URL to redirect user for OAuth2 authorization
          example: https://accounts.google.com/oauth2/authorize?client_id=...
        state:
          type: string
          description: State parameter to include in authorization request
          example: random_state_string
    OAuth2CallbackRequest:
      type: object
      required:
        - code
        - state
      properties:
        code:
          type: string
          description: Authorization code from OAuth2 provider
          example: 4/0AX4XfWjYZ1234567890abcdef
        state:
          type: string
          description: State parameter for verification
          example: random_state_string
        redirectUri:
          type: string
          format: uri
          description: Original redirect URI used in authorization request
          example: https://openchallenges.io/auth/callback
    OAuth2RevokeRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: The token to revoke (access token or refresh token)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token_type_hint:
          type: string
          description: Hint about the type of token being revoked
          enum:
            - access_token
            - refresh_token
          example: refresh_token
    OAuth2RevokeResponse:
      type: object
      properties:
        message:
          type: string
          description: Token revocation status message
          example: Token successfully revoked
        revokedTokens:
          type: integer
          description: Number of tokens revoked
          example: 1
    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: JWT refresh token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: New JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        tokenType:
          type: string
          description: Token type
          example: Bearer
          default: Bearer
        expiresIn:
          type: integer
          description: Access token expiry time in seconds
          example: 3600
    LogoutRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: JWT refresh token to revoke
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        revokeAllTokens:
          type: boolean
          description: Whether to revoke all refresh tokens for the user (default false)
          example: false
          default: false
    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          description: Logout success message
          example: Successfully logged out
        revokedTokens:
          type: integer
          description: Number of refresh tokens revoked
          example: 1
    ApiKey:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: API key ID
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Human-readable name for the API key
          example: Production API Key
        prefix:
          type: string
          description: First 8 characters of the API key for identification
          example: oc_prod_
        createdAt:
          type: string
          format: date-time
          description: When the API key was created
          example: '2024-01-15T10:30:00Z'
        expiresAt:
          type: string
          format: date-time
          description: When the API key expires (null if no expiration)
          example: '2025-01-15T10:30:00Z'
          nullable: true
        lastUsedAt:
          type: string
          format: date-time
          description: When the API key was last used (null if never used)
          example: '2024-06-15T14:20:00Z'
          nullable: true
    CreateApiKeyRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Human-readable name for the API key
          example: Production API Key
          minLength: 1
          maxLength: 100
        expiresIn:
          type: integer
          description: Number of days until the API key expires (optional, default is no expiration)
          example: 365
          minimum: 1
          maximum: 3650
    CreateApiKeyResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: API key ID
          example: 123e4567-e89b-12d3-a456-426614174000
        key:
          type: string
          description: The actual API key (only returned on creation)
          example: oc_prod_abcd1234567890abcdef1234567890abcdef1234
        name:
          type: string
          description: Human-readable name for the API key
          example: Production API Key
        prefix:
          type: string
          description: First 8 characters of the API key for identification
          example: oc_prod_
        createdAt:
          type: string
          format: date-time
          description: When the API key was created
          example: '2024-01-15T10:30:00Z'
        expiresAt:
          type: string
          format: date-time
          description: When the API key expires (null if no expiration)
          example: '2025-01-15T10:30:00Z'
          nullable: true
  responses:
    BadRequest:
      description: Invalid request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    InternalServerError:
      description: The request cannot be fulfilled due to an unexpected server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    NotFound:
      description: The specified resource was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
