openapi: 3.0.3
info:
  version: 1.0.0
  title: OpenChallenges REST API
  license:
    name: Apache 2.0
    url: 'https://github.com/Sage-Bionetworks/sage-monorepo/blob/main/LICENSE.txt'
  contact:
    name: Support
    url: 'https://github.com/Sage-Bionetworks/sage-monorepo'
  x-logo:
    url: 'https://dev.openchallenges.io/img/unsafe/logo/OpenChallenges-logo.png'
servers:
  - url: 'https://openchallenges.io/api/v1'
tags:
  - name: Challenge
    description: Operations about challenges.
paths:
  /challenges:
    get:
      tags:
        - Challenge
      summary: List challenges
      description: List challenges
      operationId: listChallenges
      parameters:
        - in: query
          name: pageNumber
          description: The search query used to find challenges.
          schema:
            description: The page number.
            type: integer
            format: int32
            default: 0
            minimum: 0
        - in: query
          name: pageSize
          description: The search query used to find challenges.
          schema:
            description: The number of items in a single page.
            type: integer
            format: int32
            default: 10
            minimum: 1
        - in: query
          name: platforms
          description: An array of challenge platform ids used to filter the results.
          schema:
            type: array
            items:
              type: string
              minLength: 3
              maxLength: 30
              pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
              example: example-challenge-platform
        - in: query
          name: status
          description: An array of challenge status used to filter the results.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ChallengeStatus'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengesPage'
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    ChallengesPage:
      type: object
      description: A page of challenges.
      properties:
        number:
          description: The page number.
          type: integer
          format: int32
          example: 99
        size:
          description: The number of items in a single page.
          type: integer
          format: int32
          example: 99
        totalElements:
          description: Total number of elements in the result set.
          type: integer
          format: int64
          example: 99
        totalPages:
          description: Total number of pages in the result set.
          type: integer
          format: int32
          example: 99
        hasNext:
          description: Returns if there is a next page.
          type: boolean
          example: true
        hasPrevious:
          description: Returns if there is a previous page.
          type: boolean
          example: true
        challenges:
          description: A list of challenges.
          type: array
          items:
            $ref: '#/components/schemas/Challenge'
      required:
        - number
        - size
        - totalElements
        - totalPages
        - hasNext
        - hasPrevious
        - challenges
      x-java-class-annotations:
        - '@lombok.Builder'
    Challenge:
      type: object
      description: A challenge
      properties:
        id:
          $ref: '#/components/schemas/ChallengeId'
        slug:
          $ref: '#/components/schemas/ChallengeSlug'
        name:
          $ref: '#/components/schemas/ChallengeName'
        platform:
          $ref: '#/components/schemas/SimpleChallengePlatform'
        # headline:
        #   $ref: '#/components/schemas/ChallengeHeadline'
        # description:
        #   $ref: '#/components/schemas/ChallengeDescription'
        # doi:
        #   $ref: '#/components/schemas/ChallengeDoi'
        status:
          $ref: '#/components/schemas/ChallengeStatus'
        # platform:
        #   $ref: '#/components/schemas/SimpleChallengePlatform'
        # websiteUrl:
        #   $ref: '#/components/schemas/Url'
        # avatarUrl:
        #   $ref: '#/components/schemas/Url'
        # incentives:
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/ChallengeIncentive'
        # submissionTypes:
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/ChallengeSubmissionType'
        # inputDataTypes:
        #   type: array
        #   items:
        #     $ref: '#/components/schemas/SimpleChallengeInputDataType'
        # startDate:
        #   $ref: '#/components/schemas/ChallengeStartDate'
        # endDate:
        #   $ref: '#/components/schemas/ChallengeEndDate'
        # starredCount:
        #   description: The number of times the challenge has been starred by users.
        #   type: integer
        #   default: 0
        #   minimum: 0
        #   example: 100
        # createdAt:
        #   $ref: '#/components/schemas/CreatedDateTime'
        # updatedAt:
        #   $ref: '#/components/schemas/UpdatedDateTime'
      required:
        - id
        - slug
        - name
        # - description
        - status
        # - incentives
        # - submissionTypes
        # - starredCount
        # - createdAt
        # - updatedAt
    ChallengeId:
      description: The unique identifier of the challenge.
      type: integer
      format: int64
      example: 1
    ChallengeSlug:
      description: The unique slug of the challenge.
      type: string
      minLength: 3
      maxLength: 255
      pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
      example: awesome-challenge
    ChallengeName:
      description: The name of the challenge.
      type: string
      minLength: 3
      maxLength: 255
    ChallengeStatus:
      description: The status of the challenge.
      type: string
      enum:
        - upcoming
        - active
        - completed
      example: active
    BasicError:
      type: object
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          type: string
          description: A human readable documentation for the problem type
        status:
          type: integer
          description: The HTTP status code
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem
        type:
          type: string
          description: An absolute URI that identifies the problem type
      required:
        - title
        - status
      x-java-class-annotations:
        - '@lombok.AllArgsConstructor'
        - '@lombok.Builder'
    SimpleChallengePlatform:
      type: object
      description: A simple challenge platform.
      properties:
        id:
          $ref: '#/components/schemas/ChallengePlatformId'
        slug:
          $ref: '#/components/schemas/ChallengePlatformSlug'
        name:
          $ref: '#/components/schemas/ChallengePlatformName'
      nullable: true
      required:
        - id
        - slug
        - name
    ChallengePlatformId:
      description: The unique identifier of a challenge platform.
      type: integer
      format: int64
      example: 1
    ChallengePlatformName:
      description: The name of the challenge platform.
      type: string
      minLength: 3
      maxLength: 30
    ChallengePlatformSlug:
      description: The slug of the challenge platform.
      type: string
      minLength: 3
      maxLength: 30
      pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
      example: example-challenge-platform
  responses:
    BadRequest:
      description: Invalid request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    InternalServerError:
      description: The request cannot be fulfilled due to an unexpected server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
