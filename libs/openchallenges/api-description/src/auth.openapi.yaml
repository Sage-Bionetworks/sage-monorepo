openapi: 3.0.3
info:
  version: 1.0.0
  title: OpenChallenges Auth API
  description: |
    Authentication and authorization service for OpenChallenges.

    This service provides:
    - OAuth2 Authorization Server with Google/Synapse login
    - API key management for programmatic access to OpenChallenges APIs
    - JWT token validation for API access
    - User profile management

    **OAuth2 Endpoints** (Spring Authorization Server - not documented here):
    - `GET /oauth2/authorize` - OAuth2 authorization endpoint
    - `POST /oauth2/token` - Token exchange endpoint
    - `GET /.well-known/oauth-authorization-server` - OAuth2 discovery

    **Custom API Endpoints** (documented below):
    - `/v1/auth/api-keys` - API key management
    - `/v1/auth/profile` - User profile management
    - `/v1/auth/api-keys/validate` - API key validation
    - `/v1/auth/api-keys/exchange-for-jwt` - API key to JWT token exchange (internal)

    **Authentication Methods**:
    - **OAuth2**: Use standard OAuth2 flows for user login via Google/Synapse
    - **API Keys**: Use for programmatic access to OpenChallenges APIs (users and services)
    - **JWT**: Tokens issued by OAuth2 server for API access
  license:
    name: Apache 2.0
    url: https://github.com/Sage-Bionetworks/sage-monorepo/blob/main/LICENSE.txt
  contact:
    name: Support
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  x-logo:
    url: https://dev.openchallenges.io/img/unsafe/logo/OpenChallenges-logo.png
servers:
  - url: http://localhost/v1
    description: Local/dev base
tags:
  - name: Authentication
    description: User profile and token validation operations
    x-audience: [public]
  - name: API Key
    description: API key management for programmatic access to OpenChallenges APIs
    x-audience: [public]
paths:
  /auth/profile:
    $ref: paths/auth/profile.yaml
  /auth/api-keys:
    $ref: paths/auth/api-keys.yaml
  /auth/api-keys/{keyId}:
    $ref: paths/auth/api-keys/{keyId}.yaml
  /auth/api-keys/validate:
    $ref: paths/auth/api-keys/validate.yaml
components:
  securitySchemes:
    # OAuth2 for user authentication (Spring Authorization Server)
    oauth2:
      $ref: components/securitySchemes/OAuth2Auth.yaml

    # JWT Bearer tokens (issued by OAuth2 server)
    jwtBearerAuth:
      $ref: components/securitySchemes/JwtBearerAuth.yaml

    # API Key for programmatic access to OpenChallenges APIs
    apiKeyAuth:
      $ref: components/securitySchemes/ApiKeyAuth.yaml
