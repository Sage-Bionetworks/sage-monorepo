openapi: 3.0.3
info:
  title: Schematic REST API
  version: 0.1.0
  license:
    name: Apache 2.0
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  contact:
    name: Support
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  x-logo:
    url: https://Sage-Bionetworks.github.io/rocc-schemas/logo.png
servers:
  - url: http://localhost/api/v1
security:
  - bearerAuth: []
tags:
  - name: Storage
    description: Operations about storages.
paths:
  /assetTypes/{assetType}/assetViews/{assetViewId}/projects/{projectId}/datasets:
    parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/assetViewId'
      - $ref: '#/components/parameters/assetType'
    get:
      tags:
        - Storage
      summary: Gets all datasets in folder under a given storage project that the current user has access to.
      description: Gets all datasets in folder under a given storage project that the current user has access to.
      operationId: listStorageProjectDatasets
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetsPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/assetViews/{assetViewId}/projects/{projectId}/manifests:
    parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/assetViewId'
      - $ref: '#/components/parameters/assetType'
    get:
      tags:
        - Storage
      summary: Gets all manifests in a project folder that users have access to
      description: Gets all manifests in a project folder that the current user has access to.
      operationId: listStorageProjectManifests
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestsPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/assetViews/{assetViewId}/datasets/{datasetId}/files:
    parameters:
      - $ref: '#/components/parameters/datasetId'
      - $ref: '#/components/parameters/assetViewId'
      - $ref: '#/components/parameters/assetType'
    get:
      tags:
        - Storage
      summary: Gets all files associated with a dataset.
      description: Gets all files associated with a dataset.
      operationId: listDatasetFiles
      parameters:
        - $ref: '#/components/parameters/fileNames'
        - $ref: '#/components/parameters/useFullFilePath'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /components/{componentLabel}/attributes:
    parameters:
      - $ref: '#/components/parameters/componentLabel'
    get:
      tags:
        - Schema
      summary: Gets attributes associated with a given component
      description: Gets attributes associated with a given component
      operationId: listComponentAttributes
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributesPage'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /components/{componentLabel}/parents:
    parameters:
      - $ref: '#/components/parameters/componentLabel'
    get:
      tags:
        - Schema
      summary: Gets the components immediate parent components in the schema.
      description: Gets the components immediate parent components in the schema.
      operationId: listComponentParents
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/returnDisplayNames'
        - $ref: '#/components/parameters/returnOrderedBySchema'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentsPage'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /relationships/{relationshipType}:
    parameters:
      - $ref: '#/components/parameters/relationshipType'
    get:
      tags:
        - Schema
      summary: Gets a subgraph containing all relationships of a given type
      description: Gets a subgraph containing all relationships of a given type
      operationId: listRelationships
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipsPage'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/assetViews/{assetViewId}/projects:
    parameters:
      - $ref: '#/components/parameters/assetViewId'
      - $ref: '#/components/parameters/assetType'
    get:
      tags:
        - Storage
      summary: Gets all storage projects the current user has access to.
      description: Gets all storage projects the current user has access to.
      operationId: listProjects
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ProjectId:
      description: A project ID.
      type: string
      example: syn26251192
    AssetViewId:
      description: An asset view ID.
      type: string
      example: syn23643253
    AssetType:
      description: A type of asset.
      type: string
      example: synapse
      enum:
        - synapse
    PageMetadata:
      type: object
      description: The metadata of a page.
      properties:
        number:
          description: The page number.
          type: integer
          format: int32
          example: 99
        size:
          description: The number of items in a single page.
          type: integer
          format: int32
          example: 99
        totalElements:
          description: Total number of elements in the result set.
          type: integer
          format: int64
          example: 99
        totalPages:
          description: Total number of pages in the result set.
          type: integer
          format: int32
          example: 99
        hasNext:
          description: Returns if there is a next page.
          type: boolean
          example: true
        hasPrevious:
          description: Returns if there is a previous page.
          type: boolean
          example: true
      required:
        - number
        - size
        - totalElements
        - totalPages
        - hasNext
        - hasPrevious
    Dataset:
      type: object
      description: A dataset.
      properties:
        name:
          type: string
          description: The name of the dataset.
          example: Example dataset
        id:
          type: string
          description: The ID of the dataset.
          example: Syn1
      required:
        - name
        - id
      x-java-class-annotations:
        - '@lombok.Builder'
    DatasetsPage:
      type: object
      description: A page of datasets.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            datasets:
              description: A list of datasets.
              type: array
              items:
                $ref: '#/components/schemas/Dataset'
          required:
            - datasets
      x-java-class-annotations:
        - '@lombok.Builder'
    BasicError:
      type: object
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          type: string
          description: A human readable documentation for the problem type
        status:
          type: integer
          description: The HTTP status code
        detail:
          type: string
          description: A human readable explanation specific to this occurrence of the problem
        type:
          type: string
          description: An absolute URI that identifies the problem type
      required:
        - title
        - status
      x-java-class-annotations:
        - '@lombok.Builder'
    Manifest:
      type: object
      description: A manifest object
      properties:
        name:
          type: string
          description: The name of the manifest file.
          example: synapse_storage_manifest.csv
        id:
          type: string
          description: The id of the manifest file.
          example: syn1
        datasetName:
          type: string
          description: The name of the dataset the manifest belongs to.
          example: dataset_X
        datasetId:
          type: string
          description: The id of the dataset the manifest belongs to.
          example: syn2
        componentName:
          type: string
          description: The name of the component the manifest is of.
          example: patient
      required:
        - name
        - id
    ManifestsPage:
      type: object
      description: A page of manifests.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            manifests:
              description: A list of manifests.
              type: array
              items:
                $ref: '#/components/schemas/Manifest'
          required:
            - manifests
      x-java-class-annotations:
        - '@lombok.Builder'
    DatasetId:
      description: A dataset ID.
      type: string
      example: syn23643250
    FileNames:
      description: A list of file names.
      type: array
      items:
        type: string
    UseFullFilePath:
      description: Whether or not to return the full path of output, or just the basename.
      type: boolean
      default: false
    File:
      type: object
      description: A file.
      properties:
        name:
          type: string
          description: The name of the file.
          example: file.txt
        id:
          type: string
          description: The ID of the file.
          example: Syn1
      required:
        - name
        - id
      x-java-class-annotations:
        - '@lombok.Builder'
    FilesPage:
      type: object
      description: A page of files.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            files:
              description: A list of files.
              type: array
              items:
                $ref: '#/components/schemas/File'
          required:
            - files
      x-java-class-annotations:
        - '@lombok.Builder'
    ComponentLabel:
      description: The label of a component in a schema
      type: string
      example: MolecularEntity
    SchemaUrl:
      description: The URL of a schema in jsonld form
      type: string
      example: https://raw.githubusercontent.com/Sage-Bionetworks/schematic/develop/tests/data/example.model.jsonld
    Attribute:
      type: object
      description: An attribute from a component in a schema
      properties:
        name:
          type: string
          description: The name of the attribute.
          example: molecularlyInteractsWith
      required:
        - name
    AttributesPage:
      type: object
      description: A page of attributes.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            attributes:
              description: A list of attributrs.
              type: array
              items:
                $ref: '#/components/schemas/Attribute'
          required:
            - attributes
      x-java-class-annotations:
        - '@lombok.Builder'
    ReturnDisplayNames:
      description: Whether or not to return the display names of the component, otherwise the label
      type: boolean
      default: true
    ReturnOrderedBySchema:
      description: Whether or not to order the components by their order in the schema, otherwise random
      type: boolean
      default: true
    Component:
      type: object
      description: A component of a schema.
      properties:
        name:
          type: string
          description: The name of the component.
          example: Patient
      required:
        - name
      x-java-class-annotations:
        - '@lombok.Builder'
    ComponentsPage:
      type: object
      description: A page of components.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            components:
              description: A list of components.
              type: array
              items:
                $ref: '#/components/schemas/Component'
          required:
            - components
      x-java-class-annotations:
        - '@lombok.Builder'
    RelationshipType:
      description: A type of schema relationship
      type: string
      example: requiresDependency
    Relationship:
      type: object
      description: A schema relationship.
      properties:
        component1:
          type: string
          description: The dsiaplay name of the first component in the relationship.
          example: Component1
        component2:
          type: string
          description: The diaplay name of the second component in the relationship.
          example: Component2
      required:
        - component1
        - component2
      x-java-class-annotations:
        - '@lombok.Builder'
    RelationshipsPage:
      type: object
      description: A page of relationships.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            relationships:
              description: A list of relationships
              type: array
              items:
                $ref: '#/components/schemas/Relationship'
          required:
            - relationships
      x-java-class-annotations:
        - '@lombok.Builder'
    Project:
      type: object
      description: A project.
      properties:
        name:
          type: string
          description: The name of the project.
          example: Example project
        id:
          type: string
          description: The ID of the project.
          example: Syn1
      required:
        - name
        - id
      x-java-class-annotations:
        - '@lombok.Builder'
    ProjectsPage:
      type: object
      description: A page of projects.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            projects:
              description: A list of projects.
              type: array
              items:
                $ref: '#/components/schemas/Project'
          required:
            - projects
      x-java-class-annotations:
        - '@lombok.Builder'
  parameters:
    projectId:
      name: projectId
      in: path
      description: The Synapse ID of a storage project.
      required: true
      schema:
        $ref: '#/components/schemas/ProjectId'
    assetViewId:
      name: assetViewId
      in: path
      description: ID of view listing all project data assets. E.g. for Synapse this would be the Synapse ID of the fileview listing all data assets for a given project
      required: true
      schema:
        $ref: '#/components/schemas/AssetViewId'
    assetType:
      name: assetType
      in: path
      description: Type of asset, such as Synapse
      required: true
      schema:
        $ref: '#/components/schemas/AssetType'
    datasetId:
      name: datasetId
      in: path
      description: The ID of a dataset.
      required: true
      schema:
        $ref: '#/components/schemas/DatasetId'
    fileNames:
      name: fileNames
      description: A list of file names used to filter the output.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/FileNames'
    useFullFilePath:
      name: useFullFilePath
      in: query
      description: Whether or not to return the full path of output, or just the basename.
      required: false
      schema:
        $ref: '#/components/schemas/UseFullFilePath'
    componentLabel:
      name: componentLabel
      in: path
      description: The label of a component in a schema
      required: true
      schema:
        $ref: '#/components/schemas/ComponentLabel'
    schemaUrl:
      name: schemaUrl
      in: query
      description: The URL of a schema in jsonld form
      required: true
      schema:
        $ref: '#/components/schemas/SchemaUrl'
    returnDisplayNames:
      name: returnDisplayNames
      in: query
      description: Whether or not to return the display names of the component, otherwise the label
      required: false
      schema:
        $ref: '#/components/schemas/ReturnDisplayNames'
    returnOrderedBySchema:
      name: returnOrderedBySchema
      in: query
      description: Whether or not to order the components by their order in the schema, otherwise random
      required: false
      schema:
        $ref: '#/components/schemas/ReturnOrderedBySchema'
    relationshipType:
      name: relationshipType
      in: path
      description: Type of relationship in a schema, such as requiresDependency
      required: true
      schema:
        $ref: '#/components/schemas/RelationshipType'
  responses:
    BadRequest:
      description: Invalid request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    NotFound:
      description: The specified resource was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    InternalServerError:
      description: The request cannot be fulfilled due to an unexpected server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
