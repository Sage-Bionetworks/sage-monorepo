openapi: 3.0.3
info:
  title: Schematic REST API
  version: 0.1.0
  license:
    name: Apache 2.0
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  contact:
    name: Support
    url: https://github.com/Sage-Bionetworks/sage-monorepo
  x-logo:
    url: https://Sage-Bionetworks.github.io/rocc-schemas/logo.png
servers:
  - url: http://localhost/api/v1
tags:
  - name: Storage
    description: Operations about storages.
paths:
  /schematicVersion:
    get:
      tags:
        - Versions
      summary: Gets the version of the schematic library currently used by the API
      description: Gets the version of the schematic library currently used by the API
      operationId: getSchematicVersion
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
                example: v21.1.1
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/projects/{projectId}/datasetMetadataArray:
    parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/assetType'
    get:
      tags:
        - Storage
      summary: Gets all dataset metadata in folder under a given storage project that the current user has access to.
      description: Gets all dataset meatdata in folder under a given storage project that the current user has access to.
      operationId: getProjectDatasetMetadataArray
      parameters:
        - $ref: '#/components/parameters/assetViewIdQuery'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetMetadataArray'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/projects/{projectId}/datasetMetadataPage:
    parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/assetType'
    get:
      tags:
        - Storage
      summary: Gets a page of dataset metadata in folder under a given storage project that the current user has access to.
      description: Gets a page of dataset meatdata in folder under a given storage project that the current user has access to.
      operationId: getProjectDatasetMetadataPage
      parameters:
        - $ref: '#/components/parameters/assetViewIdQuery'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageMaxItems'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetMetadataPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/projects/{projectId}/manifestMetadataArray:
    parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/assetType'
    get:
      tags:
        - Storage
      summary: Gets all manifests in a project folder that users have access to
      description: Gets all manifests in a project folder that the current user has access to.
      operationId: getProjectManifestMetadataArray
      parameters:
        - $ref: '#/components/parameters/assetViewIdQuery'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestMetadataArray'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/projects/{projectId}/manifestMetadataPage:
    parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/assetType'
    get:
      tags:
        - Storage
      summary: Gets all manifests in a project folder that users have access to
      description: Gets all manifests in a project folder that the current user has access to.
      operationId: getProjectManifestMetadataPage
      parameters:
        - $ref: '#/components/parameters/assetViewIdQuery'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageMaxItems'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestMetadataPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/assetViews/{assetViewId}/json:
    parameters:
      - $ref: '#/components/parameters/assetViewId'
      - $ref: '#/components/parameters/assetType'
    get:
      tags:
        - Storage
      summary: Gets the asset view table in json form
      description: Gets the asset view table in json form
      operationId: getAssetViewJson
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetViewJson'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/assetViews/{assetViewId}/csv:
    parameters:
      - $ref: '#/components/parameters/assetViewId'
      - $ref: '#/components/parameters/assetType'
    get:
      tags:
        - Storage
      summary: Gets the asset view table in csv file form
      description: Gets the asset view table in csv file form
      operationId: getAssetViewCsv
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            text/csv:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/datasets/{datasetId}/manifestJson:
    parameters:
      - $ref: '#/components/parameters/assetType'
      - $ref: '#/components/parameters/datasetId'
    get:
      tags:
        - Storage
      summary: Gets the manifest in json form
      description: Gets the manifest in json form
      operationId: getDatasetManifestJson
      parameters:
        - $ref: '#/components/parameters/assetViewIdQuery'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestJson'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/datasets/{datasetId}/manifestCsv:
    parameters:
      - $ref: '#/components/parameters/assetType'
      - $ref: '#/components/parameters/datasetId'
    get:
      tags:
        - Storage
      summary: Gets the manifest in csv form
      description: Gets the manifest in csv form
      operationId: getDatasetManifestCsv
      parameters:
        - $ref: '#/components/parameters/assetViewIdQuery'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            text/csv:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/assetViews/{assetViewId}/projectMetadataArray:
    parameters:
      - $ref: '#/components/parameters/assetViewId'
      - $ref: '#/components/parameters/assetType'
    get:
      tags:
        - Storage
      summary: Gets all storage projects the current user has access to.
      description: Gets all storage projects the current user has access to.
      operationId: getProjectMetadataArray
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMetadataArray'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/assetViews/{assetViewId}/projectMetadataPage:
    parameters:
      - $ref: '#/components/parameters/assetViewId'
      - $ref: '#/components/parameters/assetType'
    get:
      tags:
        - Storage
      summary: Gets all storage projects the current user has access to.
      description: Gets all storage projects the current user has access to.
      operationId: getProjectMetadataPage
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageMaxItems'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMetadataPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/datasets/{datasetId}/fileMetadataArray:
    parameters:
      - $ref: '#/components/parameters/datasetId'
      - $ref: '#/components/parameters/assetType'
    get:
      tags:
        - Storage
      summary: Gets all files associated with a dataset.
      description: Gets all files associated with a dataset.
      operationId: getDatasetFileMetadataArray
      parameters:
        - $ref: '#/components/parameters/fileNames'
        - $ref: '#/components/parameters/useFullFilePath'
        - $ref: '#/components/parameters/assetViewIdQuery'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadataArray'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/datasets/{datasetId}/fileMetadataPage:
    parameters:
      - $ref: '#/components/parameters/datasetId'
      - $ref: '#/components/parameters/assetType'
    get:
      tags:
        - Storage
      summary: Gets all files associated with a dataset.
      description: Gets all files associated with a dataset.
      operationId: getDatasetFileMetadataPage
      parameters:
        - $ref: '#/components/parameters/fileNames'
        - $ref: '#/components/parameters/useFullFilePath'
        - $ref: '#/components/parameters/assetViewIdQuery'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageMaxItems'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadataPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/manifests/{manifestId}/json:
    parameters:
      - $ref: '#/components/parameters/assetType'
      - $ref: '#/components/parameters/manifestId'
    get:
      tags:
        - Storage
      summary: Gets the manifest in json form
      description: Gets the manifest in json form
      operationId: getManifestJson
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestJson'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assetTypes/{assetType}/manifests/{manifestId}/csv:
    parameters:
      - $ref: '#/components/parameters/assetType'
      - $ref: '#/components/parameters/manifestId'
    get:
      tags:
        - Storage
      summary: Gets the manifest in csv form
      description: Gets the manifest in csv form
      operationId: getManifestCsv
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            text/csv:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /nodes/{nodeLabel}/dependencyArray:
    parameters:
      - $ref: '#/components/parameters/nodeLabel'
    get:
      tags:
        - Schema
      summary: Gets the immediate dependencies that are related to the given source node
      description: Gets the immediate dependencies that are related to the given source node
      operationId: getNodeDependencyArray
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/returnDisplayNames'
        - $ref: '#/components/parameters/returnOrderedBySchema'
        - $ref: '#/components/parameters/displayLabelType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeArray'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /nodes/{nodeLabel}/dependencyPage:
    parameters:
      - $ref: '#/components/parameters/nodeLabel'
    get:
      tags:
        - Schema
      summary: Gets the immediate dependencies that are related to the given source node
      description: Gets the immediate dependencies that are related to the given source node
      operationId: getNodeDependencyPage
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/returnDisplayNames'
        - $ref: '#/components/parameters/returnOrderedBySchema'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageMaxItems'
        - $ref: '#/components/parameters/displayLabelType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodePage'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /nodes/{nodeDisplay}/isRequired:
    parameters:
      - $ref: '#/components/parameters/nodeDisplay'
    get:
      tags:
        - Schema
      summary: Gets whether or not the node is required in the schema
      description: Gets whether or not the node is required in the schema
      operationId: getNodeIsRequired
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/displayLabelType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: Whether or not the node is required in the schema
                type: boolean
        '500':
          $ref: '#/components/responses/InternalServerError'
  /nodes/{nodeLabel}/nodeProperties:
    parameters:
      - $ref: '#/components/parameters/nodeLabel'
    get:
      tags:
        - Schema
      summary: Gets properties associated with a given node
      description: Gets properties associated with a given node
      operationId: getNodeProperties
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/displayLabelType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodePropertyArray'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /nodes/{nodeDisplay}/propertyLabel:
    parameters:
      - $ref: '#/components/parameters/nodeDisplay'
    get:
      tags:
        - Schema
      summary: Gets the property label of the node
      description: Gets the property label of the node
      operationId: getPropertyLabel
      parameters:
        - $ref: '#/components/parameters/useStrictCamelCase'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyLabel'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /nodes/{nodeDisplay}/validationRules:
    parameters:
      - $ref: '#/components/parameters/nodeDisplay'
    get:
      tags:
        - Schema
      summary: Gets the validation rules, along with the arguments for each given rule associated with a given node
      description: Gets the validation rules, along with the arguments for each given rule associated with a given node
      operationId: getNodeValidationRules
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/displayLabelType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationRuleArray'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /components/{componentLabel}/:
    parameters:
      - $ref: '#/components/parameters/componentLabel'
    get:
      tags:
        - Schema
      summary: Get all the attributes associated with a specific data model component formatted as a dataframe (stored as a JSON String).
      description: Get all the attributes associated with a specific data model component formatted as a dataframe (stored as a JSON String).
      operationId: getComponent
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/includeIndex'
        - $ref: '#/components/parameters/displayLabelType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: The component as a json string
                type: string
        '500':
          $ref: '#/components/responses/InternalServerError'
  /components/{componentLabel}/requirementsArray:
    parameters:
      - $ref: '#/components/parameters/componentLabel'
    get:
      tags:
        - Schema
      summary: Given a source model component (see https://w3id.org/biolink/vocab/category for definnition of component), return all components required by it in array form.
      description: Given a source model component (see https://w3id.org/biolink/vocab/category for definnition of component), return all components required by it in array form.
      operationId: getComponentRequirementsArray
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/displayLabelType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentRequirementArray'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /components/{componentLabel}/requirementsGraph:
    parameters:
      - $ref: '#/components/parameters/componentLabel'
    get:
      tags:
        - Schema
      summary: Given a source model component (see https://w3id.org/biolink/vocab/category for definnition of component), return all components required by it in graph form.
      description: Given a source model component (see https://w3id.org/biolink/vocab/category for definnition of component), return all components required by it in graph form.
      operationId: getComponentRequirementsGraph
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/displayLabelType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentRequirementGraph'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /schemaAttributes:
    get:
      tags:
        - Schema
      summary: Get all the attributes associated with a data model formatted as a dataframe (stored as a JSON String).
      description: Get all the attributes associated with a data model formatted as a dataframe (stored as a JSON String).
      operationId: getSchemaAttributes
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/displayLabelType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: The schema as a json string
                type: string
        '500':
          $ref: '#/components/responses/InternalServerError'
  /connectedNodePairArray:
    get:
      tags:
        - Schema
      summary: Gets an array of connected node pairs
      description: Gets a array of connected node pairs
      operationId: getConnectedNodePairArray
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/relationshipType'
        - $ref: '#/components/parameters/displayLabelType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectedNodePairArray'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /connectedNodePairPage:
    get:
      tags:
        - Schema
      summary: Gets a page of connected node pairs
      description: Gets a page of connected node pairs
      operationId: getConnectedNodePairPage
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/relationshipType'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageMaxItems'
        - $ref: '#/components/parameters/displayLabelType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectedNodePairPage'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /validateManifestJson:
    post:
      tags:
        - ManifestValidation
      summary: Validates a manifest in json form
      description: Validates a manifest in json form
      requestBody:
        description: A manifest in json form
        content:
          text/plain:
            schema:
              type: string
      operationId: validateManifestJson
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/componentLabelQuery'
        - $ref: '#/components/parameters/restrictRules'
        - $ref: '#/components/parameters/displayLabelType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestValidationResult'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /validateManifestCsv:
    post:
      tags:
        - ManifestValidation
      summary: Validates a manifest in csv form
      description: Validates a manifest in csv form
      requestBody:
        description: .csv file
        content:
          application/csv:
            schema:
              type: string
              format: binary
        required: true
      operationId: validateManifestCsv
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/componentLabelQuery'
        - $ref: '#/components/parameters/restrictRules'
        - $ref: '#/components/parameters/displayLabelType'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestValidationResult'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /submitManifestJson:
    post:
      tags:
        - ManifestValidation
      summary: Validates a manifest in json form, then submits it
      description: Validates a manifest in json form, then submits it in csv form
      requestBody:
        description: A manifest in json form
        content:
          text/plain:
            schema:
              type: string
      operationId: submitManifestJson
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/component'
        - $ref: '#/components/parameters/restrictRules'
        - $ref: '#/components/parameters/datasetIdQuery'
        - $ref: '#/components/parameters/storageMethod'
        - $ref: '#/components/parameters/hideBlanks'
        - $ref: '#/components/parameters/assetViewIdQuery'
        - $ref: '#/components/parameters/tableManipulationMethod'
        - $ref: '#/components/parameters/displayLabelType'
        - $ref: '#/components/parameters/annotationKeyStyle'
        - $ref: '#/components/parameters/tableColumnNameStyle'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestId'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /submitManifestCsv:
    post:
      tags:
        - ManifestValidation
      summary: Validates manifest in csv form, then submits it
      description: Validates manifest in csv form, then submits it
      requestBody:
        description: .csv file
        content:
          application/csv:
            schema:
              type: string
              format: binary
        required: true
      operationId: submitManifestCsv
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/component'
        - $ref: '#/components/parameters/restrictRules'
        - $ref: '#/components/parameters/datasetIdQuery'
        - $ref: '#/components/parameters/storageMethod'
        - $ref: '#/components/parameters/hideBlanks'
        - $ref: '#/components/parameters/assetViewIdQuery'
        - $ref: '#/components/parameters/tableManipulationMethod'
        - $ref: '#/components/parameters/displayLabelType'
        - $ref: '#/components/parameters/annotationKeyStyle'
        - $ref: '#/components/parameters/tableColumnNameStyle'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestId'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tangledTreeLayers:
    get:
      tags:
        - TangledTree
      summary: Get tangled tree node layers to display for a given data model and figure type
      description: Get tangled tree node layers to display for a given data model and figure type
      operationId: getTangledTreeLayers
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/figureType'
        - $ref: '#/components/parameters/displayLabelType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TangledTreeLayers'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tangledTreeText:
    get:
      tags:
        - TangledTree
      summary: Get tangled tree plain or highlighted text to display for a given data model, text formatting and figure type
      description: Get tangled tree plain or highlighted text to display for a given data model, text formatting and figure type
      operationId: getTangledTreeText
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/figureType'
        - $ref: '#/components/parameters/textFormat'
        - $ref: '#/components/parameters/displayLabelType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TangledTreeText'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /generateGoogleSheetManifests:
    get:
      tags:
        - ManifestGeneration
      summary: Generates a list of google sheet links
      description: Generates a list of google sheet links
      operationId: generateGoogleSheetManifests
      parameters:
        - $ref: '#/components/parameters/schemaUrl'
        - $ref: '#/components/parameters/addAnnotations'
        - $ref: '#/components/parameters/datasetIdArray'
        - $ref: '#/components/parameters/manifestTitle'
        - $ref: '#/components/parameters/dataTypeArray'
        - $ref: '#/components/parameters/displayLabelType'
        - $ref: '#/components/parameters/useStrictValidation'
        - name: assetViewId
          in: query
          description: ID of view listing all project data assets. E.g. for Synapse this would be the Synapse ID of the fileview listing all data assets for a given project
          required: false
          schema:
            $ref: '#/components/schemas/AssetViewId'
        - name: generateAllManifests
          in: query
          description: If true, a manifest for all components will be generated, datasetIds will be ignored. If false, manifests for each id in datasetIds will be generated.
          required: false
          schema:
            type: boolean
            default: false
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleSheetLinks'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    BasicError:
      type: object
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          type: string
          description: A human readable documentation for the problem type
        status:
          type: integer
          description: The HTTP status code
        detail:
          type: string
          description: A human readable explanation specific to this occurrence of the problem
        type:
          type: string
          description: An absolute URI that identifies the problem type
      required:
        - title
        - status
      x-java-class-annotations:
        - '@lombok.Builder'
    ProjectId:
      description: A project ID.
      type: string
      example: syn26251192
    AssetType:
      description: Type of asset store, such as Synapse
      type: string
      example: synapse
      enum:
        - synapse
    AssetViewId:
      description: An asset view ID.
      type: string
      example: syn23643253
    DatasetMetadata:
      type: object
      description: The metadata of a dataset.
      properties:
        name:
          type: string
          description: The name of the dataset.
          example: Example dataset
        id:
          type: string
          description: The ID of the dataset.
          example: Syn1
      required:
        - name
        - id
      x-java-class-annotations:
        - '@lombok.Builder'
    DatasetMetadataArray:
      type: object
      description: An array of dataset metadata.
      properties:
        datasets:
          description: An array of dataset meatdata.
          type: array
          items:
            $ref: '#/components/schemas/DatasetMetadata'
    PageMetadata:
      type: object
      description: The metadata of a page.
      properties:
        number:
          description: The page number.
          type: integer
          format: int32
          example: 99
        size:
          description: The number of items in a single page.
          type: integer
          format: int32
          example: 99
        totalElements:
          description: Total number of elements in the result set.
          type: integer
          format: int64
          example: 99
        totalPages:
          description: Total number of pages in the result set.
          type: integer
          format: int32
          example: 99
        hasNext:
          description: Returns if there is a next page.
          type: boolean
          example: true
        hasPrevious:
          description: Returns if there is a previous page.
          type: boolean
          example: true
      required:
        - number
        - size
        - totalElements
        - totalPages
        - hasNext
        - hasPrevious
    DatasetMetadataPage:
      type: object
      description: A page of dataset metadata.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            datasets:
              description: An array of dataset meatdata.
              type: array
              items:
                $ref: '#/components/schemas/DatasetMetadata'
          required:
            - datasets
      x-java-class-annotations:
        - '@lombok.Builder'
    ManifestMetadata:
      type: object
      description: The metadata for a manifest file
      properties:
        name:
          type: string
          description: The name of the manifest file.
          example: synapse_storage_manifest.csv
        id:
          type: string
          description: The id of the manifest file.
          example: syn1
        datasetName:
          type: string
          description: The name of the dataset the manifest belongs to.
          example: dataset_X
        datasetId:
          type: string
          description: The id of the dataset the manifest belongs to.
          example: syn2
        componentName:
          type: string
          description: The name of the component the manifest is of.
          example: patient
      required:
        - name
        - id
    ManifestMetadataArray:
      type: object
      description: An array of manifest metadata
      properties:
        manifests:
          description: A list of manifest metadata
          type: array
          items:
            $ref: '#/components/schemas/ManifestMetadata'
    ManifestMetadataPage:
      type: object
      description: A page of manifest metadata
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            manifests:
              description: A list of manifest metadata
              type: array
              items:
                $ref: '#/components/schemas/ManifestMetadata'
          required:
            - manifests
      x-java-class-annotations:
        - '@lombok.Builder'
    AssetViewJson:
      description: An asset view in json format
      type: object
    DatasetId:
      description: A dataset ID.
      type: string
      example: syn23643250
    ManifestJson:
      description: A manifest in json format
      type: object
    ProjectMetadata:
      type: object
      description: The metadata for a project
      properties:
        name:
          type: string
          description: The name of the project.
          example: Example project
        id:
          type: string
          description: The ID of the project.
          example: Syn1
      required:
        - name
        - id
      x-java-class-annotations:
        - '@lombok.Builder'
    ProjectMetadataArray:
      type: object
      description: An array of project metadata.
      properties:
        projects:
          description: An array of project metadata.
          type: array
          items:
            $ref: '#/components/schemas/ProjectMetadata'
    ProjectMetadataPage:
      type: object
      description: A page of project metadata.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            projects:
              description: An array of project metadata.
              type: array
              items:
                $ref: '#/components/schemas/ProjectMetadata'
          required:
            - projects
      x-java-class-annotations:
        - '@lombok.Builder'
    FileNames:
      description: A list of file names.
      type: array
      items:
        type: string
    UseFullFilePath:
      description: Whether or not to return the full path of output, or just the basename.
      type: boolean
      default: false
    FileMetadata:
      type: object
      description: The metadata for a file
      properties:
        name:
          type: string
          description: The name of the file.
          example: file.txt
        id:
          type: string
          description: The ID of the file.
          example: Syn1
      required:
        - name
        - id
      x-java-class-annotations:
        - '@lombok.Builder'
    FileMetadataArray:
      type: object
      description: A list of file metadata.
      properties:
        files:
          description: A list of file metadata.
          type: array
          items:
            $ref: '#/components/schemas/FileMetadata'
    FileMetadataPage:
      type: object
      description: A page of file metadata.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            files:
              description: A list of file metadata.
              type: array
              items:
                $ref: '#/components/schemas/FileMetadata'
          required:
            - files
      x-java-class-annotations:
        - '@lombok.Builder'
    ManifestId:
      description: A manifest ID.
      type: string
      example: syn51078535
    NodeLabel:
      description: The label of a node in a schema
      type: string
      example: MolecularEntity
    SchemaUrl:
      description: The URL of a schema in jsonld form
      type: string
      example: https://raw.githubusercontent.com/Sage-Bionetworks/schematic/develop/tests/data/example.model.jsonld
    ReturnDisplayNames:
      description: Whether or not to return the display names of the node otherwise the label
      type: boolean
      default: true
    ReturnOrderedBySchema:
      description: Whether or not to order the components by their order in the schema, otherwise random
      type: boolean
      default: true
    Node:
      type: object
      description: A node of a schema.
      properties:
        name:
          type: string
          description: The name of the node.
          example: Patient
      required:
        - name
      x-java-class-annotations:
        - '@lombok.Builder'
    NodeArray:
      type: object
      description: An array of nodes.
      properties:
        nodes:
          description: An array of nodes.
          type: array
          items:
            $ref: '#/components/schemas/Node'
    NodePage:
      type: object
      description: A page of nodes.
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            nodes:
              description: An array of nodes.
              type: array
              items:
                $ref: '#/components/schemas/Node'
          required:
            - nodes
      x-java-class-annotations:
        - '@lombok.Builder'
    NodeDisplay:
      description: The display name of a node in a schema
      type: string
      example: MolecularEntity
    NodePropertyArray:
      type: object
      description: An array of node properties.
      properties:
        node_properties:
          description: An array of node properties.
          type: array
          items:
            type: string
    UseStrictCamelCase:
      description: Whether or not to use the more strict way of converting to camel case
      type: boolean
      default: true
    PropertyLabel:
      description: The property label of a node in a schema
      type: string
      example: MolecularEntity
    ValidationRule:
      type: object
      description: A validation rule.
      properties:
        name:
          type: string
          description: The name of the rule, along with the arguments for the given rule.
          example: list strict
      required:
        - name
      x-java-class-annotations:
        - '@lombok.Builder'
    ValidationRuleArray:
      type: object
      description: An array of validation rules.
      properties:
        validation_rules:
          description: An array of validation rules.
          type: array
          items:
            $ref: '#/components/schemas/ValidationRule'
    ComponentLabel:
      description: The label of a component in a schema
      type: string
      example: Patient
    ComponentRequirementArray:
      type: object
      description: An array of components
      properties:
        componentRequirementsList:
          type: array
          items:
            type: string
    ComponentRequirementSubgraph:
      type: object
      description: A pair of components
      properties:
        component1:
          type: string
          description: The display name of the first component in the graph
          example: component1
        component2:
          type: string
          description: The display name of the second component in the graph
          example: component2
      required:
        - component1
        - component2
      x-java-class-annotations:
        - '@lombok.Builder'
    ComponentRequirementGraph:
      type: object
      description: A graph of components
      properties:
        componentRequirementsGraph:
          type: array
          items:
            $ref: '#/components/schemas/ComponentRequirementSubgraph'
    RelationshipType:
      description: A type of schema relationship
      type: string
      example: requiresDependency
    ConnectedNodePair:
      type: object
      description: A pair of conncted nodes
      properties:
        node1:
          type: string
          description: The disaplay name of the first node.
          example: Node1
        node2:
          type: string
          description: The display name of the second node.
          example: Node2
      required:
        - node1
        - node2
      x-java-class-annotations:
        - '@lombok.Builder'
    ConnectedNodePairArray:
      type: object
      description: An array of conncted node pairs
      properties:
        connectedNodes:
          description: An array of conncted node pairs.
          type: array
          items:
            $ref: '#/components/schemas/ConnectedNodePair'
    ConnectedNodePairPage:
      type: object
      description: A page of conncted node pairs
      allOf:
        - $ref: '#/components/schemas/PageMetadata'
        - type: object
          properties:
            connectedNodes:
              description: An array of conncted node pairs.
              type: array
              items:
                $ref: '#/components/schemas/ConnectedNodePair'
          required:
            - connectedNodes
      x-java-class-annotations:
        - '@lombok.Builder'
    RestrictRules:
      description: If True, validation suite will only run with in-house validation rule. If False, the Great Expectations suite will be utilized and all rules will be available.
      type: boolean
      default: false
    ManifestValidationResult:
      type: object
      description: The results of manifest validation
      properties:
        errors:
          description: Any errors from validation
          type: array
          items:
            type: string
        warnings:
          description: Any warnings from validation
          type: array
          items:
            type: string
    TangledTreeLayers:
      description: Tangled tree node layers to display for a given data model
      type: string
    TangledTreeText:
      description: Tangled tree plain or higlighted text to display for a given data model
      type: object
    DatasetIdArray:
      type: array
      description: An array of dataset ids
      items:
        $ref: '#/components/schemas/DatasetId'
    DataType:
      description: A data type
      type: string
      example: Patient
    DataTypeArray:
      description: An array of data types
      type: array
      items:
        $ref: '#/components/schemas/DataType'
    GoogleSheetLinks:
      type: object
      description: An array of google sheet links
      properties:
        links:
          type: array
          items:
            type: string
  responses:
    InternalServerError:
      description: The request cannot be fulfilled due to an unexpected server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    BadRequest:
      description: Invalid request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
    NotFound:
      description: The specified resource was not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BasicError'
  parameters:
    projectId:
      name: projectId
      in: path
      description: The Synapse ID of a storage project.
      required: true
      schema:
        $ref: '#/components/schemas/ProjectId'
    assetType:
      name: assetType
      in: path
      description: Type of asset, such as Synapse
      required: true
      schema:
        $ref: '#/components/schemas/AssetType'
    assetViewIdQuery:
      name: assetViewId
      in: query
      description: ID of view listing all project data assets. E.g. for Synapse this would be the Synapse ID of the fileview listing all data assets for a given project
      required: true
      schema:
        $ref: '#/components/schemas/AssetViewId'
    pageNumber:
      name: pageNumber
      in: query
      description: The page number to get for a paginated query
      required: false
      schema:
        type: integer
        default: 1
        minimum: 1
    pageMaxItems:
      name: pageMaxItems
      in: query
      description: The maximum number of items per page (up to 100,000) for paginated endpoints
      required: false
      schema:
        type: integer
        default: 100000
        minimum: 1
    assetViewId:
      name: assetViewId
      in: path
      description: ID of view listing all project data assets. E.g. for Synapse this would be the Synapse ID of the fileview listing all data assets for a given project
      required: true
      schema:
        $ref: '#/components/schemas/AssetViewId'
    datasetId:
      name: datasetId
      in: path
      description: The ID of a dataset.
      required: true
      schema:
        $ref: '#/components/schemas/DatasetId'
    fileNames:
      name: fileNames
      description: A list of file names used to filter the output.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/FileNames'
    useFullFilePath:
      name: useFullFilePath
      in: query
      description: Whether or not to return the full path of output, or just the basename.
      required: false
      schema:
        $ref: '#/components/schemas/UseFullFilePath'
    manifestId:
      name: manifestId
      in: path
      description: ID of a manifest
      required: true
      schema:
        $ref: '#/components/schemas/ManifestId'
    nodeLabel:
      name: nodeLabel
      in: path
      description: The label of the source node in a schema to get the dependencies of
      required: true
      schema:
        $ref: '#/components/schemas/NodeLabel'
    schemaUrl:
      name: schemaUrl
      in: query
      description: The URL of a schema in jsonld or csv form
      required: true
      schema:
        $ref: '#/components/schemas/SchemaUrl'
    returnDisplayNames:
      name: returnDisplayNames
      in: query
      description: Whether or not to return the display names of the component, otherwise the label
      required: false
      schema:
        $ref: '#/components/schemas/ReturnDisplayNames'
    returnOrderedBySchema:
      name: returnOrderedBySchema
      in: query
      description: Whether or not to order the components by their order in the schema, otherwise random
      required: false
      schema:
        $ref: '#/components/schemas/ReturnOrderedBySchema'
    displayLabelType:
      name: displayLabelType
      in: query
      description: The type of label to display
      required: false
      schema:
        type: string
        enum:
          - class_label
          - display_label
        default: class_label
    nodeDisplay:
      name: nodeDisplay
      in: path
      description: The display name of the node in a schema
      required: true
      schema:
        $ref: '#/components/schemas/NodeDisplay'
    useStrictCamelCase:
      name: useStrictCamelCase
      in: query
      description: Whether or not to use the more strict way of converting to camel case
      schema:
        $ref: '#/components/schemas/UseStrictCamelCase'
    componentLabel:
      name: componentLabel
      in: path
      description: The label of a component in a schema
      required: true
      schema:
        $ref: '#/components/schemas/ComponentLabel'
    includeIndex:
      name: includeIndex
      in: query
      description: Whether to include the indexes of the dataframe in the returned JSON string.
      required: false
      schema:
        type: boolean
        default: false
    relationshipType:
      name: relationshipType
      in: query
      description: Type of relationship in a schema, such as requiresDependency
      required: true
      schema:
        $ref: '#/components/schemas/RelationshipType'
    componentLabelQuery:
      name: componentLabel
      in: query
      description: The label of a component in a schema
      required: true
      schema:
        $ref: '#/components/schemas/ComponentLabel'
    restrictRules:
      name: restrictRules
      in: query
      description: If True, validation suite will only run with in-house validation rule. If False, the Great Expectations suite will be utilized and all rules will be available.
      required: false
      schema:
        $ref: '#/components/schemas/RestrictRules'
    component:
      name: component
      in: query
      description: A component in a schema, either the dsplay label or schema label
      required: true
      schema:
        type: string
    datasetIdQuery:
      name: datasetId
      in: query
      description: The ID of a dataset.
      required: true
      schema:
        $ref: '#/components/schemas/DatasetId'
    storageMethod:
      name: storageMethod
      in: query
      description: file_and_entities will store the manifest as a csv and create Synapse files for each row in the manifest. table_and_file will store the manifest as a table and a csv on Synapse. file_only will store the manifest as a csv only on Synapse. table_file_and_entities will perform the options file_with_entites and table in combination.
      required: false
      schema:
        type: string
        enum:
          - file_and_entities
          - table_and_file
          - file_only
          - table_file_and_entities
        default: table_file_and_entities
    hideBlanks:
      name: hideBlanks
      in: query
      description: If true, annotations with blank values will be hidden from a dataset's annotation list in Synaspe. If false, annotations with blank values will be displayed.
      required: false
      schema:
        type: boolean
        default: false
    tableManipulationMethod:
      name: tableManipulationMethod
      in: query
      description: replace will remove the rows and columns from the existing table and store the new rows and columns, preserving the name and synID. upsert will add the new rows to the table and preserve the exisitng rows and columns in the existing table.
      required: false
      schema:
        type: string
        enum:
          - replace
          - upsert
        default: replace
    annotationKeyStyle:
      name: annotationKeyStyle
      in: query
      description: The labeling style for annotation keys.
      required: false
      schema:
        type: string
        enum:
          - class_label
          - display_label
        default: class_label
    tableColumnNameStyle:
      name: tableColumnNameStyle
      in: query
      description: The labeling syle for table column names.
      required: false
      schema:
        type: string
        enum:
          - class_label
          - display_label
          - display_name
        default: class_label
    figureType:
      name: figureType
      in: query
      description: Figure type to generate.
      required: false
      schema:
        type: string
        enum:
          - component
          - dependency
        default: component
    textFormat:
      name: textFormat
      in: query
      description: Text formatting type.
      required: false
      schema:
        type: string
        enum:
          - plain
          - highlighted
        default: plain
    addAnnotations:
      name: addAnnotations
      in: query
      description: If true, annotations are added to the manifest
      required: false
      schema:
        type: boolean
        default: false
    datasetIdArray:
      name: datasetIdArray
      in: query
      description: An array of dataset ids
      required: false
      schema:
        $ref: '#/components/schemas/DatasetIdArray'
    manifestTitle:
      name: manifestTitle
      in: query
      description: If making one manifest, the title of the manifest. If making multiple manifests, the prefix of the title of the manifests.
      required: false
      schema:
        type: string
    dataTypeArray:
      name: dataTypeArray
      in: query
      description: An array of data types
      required: false
      schema:
        $ref: '#/components/schemas/DataTypeArray'
    useStrictValidation:
      name: useStrictValidation
      in: query
      description: If true, users are blocked from entering incorrect values. If false, users will get a warning when using incorrect values.
      required: false
      schema:
        type: boolean
        default: true
