// -------------------------------------------------------------------------- //
// External
// -------------------------------------------------------------------------- //
import { TestBed, ComponentFixture } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { HttpClientTestingModule } from '@angular/common/http/testing';

// -------------------------------------------------------------------------- //
// Internal
// -------------------------------------------------------------------------- //
import { GeneNominationsComponent } from './gene-nominations.component';
import { of } from 'rxjs';
import { geneMock1, teamsResponseMock } from '@sagebionetworks/agora/testing';

// -------------------------------------------------------------------------- //
// Tests
// -------------------------------------------------------------------------- //
describe('Component: Gene Nominations', () => {
  let fixture: ComponentFixture<GeneNominationsComponent>;
  let component: GeneNominationsComponent;
  let mockTeamService: TeamsService;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [GeneNominationsComponent],
      imports: [RouterTestingModule, HttpClientTestingModule],
      providers: [TeamsService],
    }).compileComponents();
  });

  beforeEach(async () => {
    fixture = TestBed.createComponent(GeneNominationsComponent);
    component = fixture.componentInstance;
    mockTeamService = TestBed.inject(TeamsService);
    spyOn(mockTeamService, 'getTeams').and.returnValue(of(teamsResponseMock));
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should call mock TeamService', () => {
    component.gene = geneMock1;
    component.init();
    fixture.detectChanges();

    expect(mockTeamService.getTeams).toHaveBeenCalled();
  });

  it('should get full display name', () => {
    component.gene = geneMock1;
    component.init();
    fixture.detectChanges();

    const nominations = geneMock1.target_nominations;
    if (nominations === null || nominations.length === 0)
      fail('improperly set up mock gene for test');
    else {
      const nomination = nominations[0];
      const result = component.getFullDisplayName(nomination);
      expect(result).toBe('AMP-AD: Emory University');
    }
  });

  it('should sort nominations alphabetically then by date desc', () => {
    component.gene = geneMock1;
    component.init();
    fixture.detectChanges();

    const result = component.sortNominations(teamsResponseMock.items);

    expect(result.length).toBe(5);

    expect(component.getFullDisplayName(result[0])).toBe('AMP-AD: Emory University');
    expect(component.getFullDisplayName(result[1])).toBe(
      'AMP-AD: Icahn School of Medicine at Mount Sinai',
    );
    expect(component.getFullDisplayName(result[2])).toBe(
      'AMP-AD: Icahn School of Medicine at Mount Sinai',
    );
    expect(component.getFullDisplayName(result[3])).toBe(
      'Community Contributed: The Chang Lab at the University of Arizona',
    );
    expect(component.getFullDisplayName(result[4])).toBe(
      'TREAT-AD: Emory University - Sage Bionetworks - Structural Genomics Consortium',
    );
    expect(result[1].initial_nomination).toBe(2020);
    expect(result[2].initial_nomination).toBe(2018);
  });
});
