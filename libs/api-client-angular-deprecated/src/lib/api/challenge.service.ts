/**
 * Registry of Open Community Challenges API
 * The OpenAPI specification implemented by the Challenge Registries. # Introduction TBA
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: thomas.schaffter@sagebionetworks.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

import {
  ArrayOfTopics,
  Challenge,
  ChallengeCreateRequest,
  ChallengeCreateResponse,
  ChallengeDifficulty,
  ChallengeIncentiveType,
  ChallengeOrganizerCreateRequest,
  ChallengeOrganizerCreateResponse,
  ChallengeOrganizerList,
  ChallengeReadme,
  ChallengeReadmeUpdateRequest,
  ChallengeSponsorCreateRequest,
  ChallengeSponsorCreateResponse,
  ChallengeSponsorList,
  ChallengeStatus,
  ChallengeSubmissionType,
  DateRange,
  PageOfChallenges,
  PageOfUsers,
} from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
  providedIn: 'root',
})
export class ChallengeService {
  protected basePath = 'https://rocc.org/api/v1';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  private addToHttpParams(
    httpParams: HttpParams,
    value: any,
    key?: string
  ): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(
    httpParams: HttpParams,
    value?: any,
    key?: string
  ): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) =>
            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(
            key,
            (value as Date).toISOString().substr(0, 10)
          );
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}[${k}]` : k
            ))
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * Add a challenge
   * Adds a challenge
   * @param accountName The name of the account that owns the challenge
   * @param challengeCreateRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createChallenge(
    accountName: string,
    challengeCreateRequest: ChallengeCreateRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<ChallengeCreateResponse>;

  public createChallenge(
    accountName: string,
    challengeCreateRequest: ChallengeCreateRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<ChallengeCreateResponse>>;

  public createChallenge(
    accountName: string,
    challengeCreateRequest: ChallengeCreateRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<ChallengeCreateResponse>>;

  public createChallenge(
    accountName: string,
    challengeCreateRequest: ChallengeCreateRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (accountName === null || accountName === undefined) {
      throw new Error(
        'Required parameter accountName was null or undefined when calling createChallenge.'
      );
    }
    if (
      challengeCreateRequest === null ||
      challengeCreateRequest === undefined
    ) {
      throw new Error(
        'Required parameter challengeCreateRequest was null or undefined when calling createChallenge.'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (BearerAuth) required
    credential = this.configuration.lookupCredential('BearerAuth');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.post<ChallengeCreateResponse>(
      `${this.configuration.basePath}/challenges/${encodeURIComponent(
        String(accountName)
      )}`,
      challengeCreateRequest,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Create a challenge organizer
   * Create a challenge organizer
   * @param accountName The name of the account that owns the challenge
   * @param challengeName The name of the challenge
   * @param challengeOrganizerCreateRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createChallengeOrganizer(
    accountName: string,
    challengeName: string,
    challengeOrganizerCreateRequest: ChallengeOrganizerCreateRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<ChallengeOrganizerCreateResponse>;

  public createChallengeOrganizer(
    accountName: string,
    challengeName: string,
    challengeOrganizerCreateRequest: ChallengeOrganizerCreateRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<ChallengeOrganizerCreateResponse>>;

  public createChallengeOrganizer(
    accountName: string,
    challengeName: string,
    challengeOrganizerCreateRequest: ChallengeOrganizerCreateRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<ChallengeOrganizerCreateResponse>>;

  public createChallengeOrganizer(
    accountName: string,
    challengeName: string,
    challengeOrganizerCreateRequest: ChallengeOrganizerCreateRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (accountName === null || accountName === undefined) {
      throw new Error(
        'Required parameter accountName was null or undefined when calling createChallengeOrganizer.'
      );
    }
    if (challengeName === null || challengeName === undefined) {
      throw new Error(
        'Required parameter challengeName was null or undefined when calling createChallengeOrganizer.'
      );
    }
    if (
      challengeOrganizerCreateRequest === null ||
      challengeOrganizerCreateRequest === undefined
    ) {
      throw new Error(
        'Required parameter challengeOrganizerCreateRequest was null or undefined when calling createChallengeOrganizer.'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (BearerAuth) required
    credential = this.configuration.lookupCredential('BearerAuth');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.post<ChallengeOrganizerCreateResponse>(
      `${this.configuration.basePath}/challenges/${encodeURIComponent(
        String(accountName)
      )}/${encodeURIComponent(String(challengeName))}/organizers`,
      challengeOrganizerCreateRequest,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Create a challenge sponsor
   * Create a challenge sponsor
   * @param accountName The name of the account that owns the challenge
   * @param challengeName The name of the challenge
   * @param challengeSponsorCreateRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createChallengeSponsor(
    accountName: string,
    challengeName: string,
    challengeSponsorCreateRequest: ChallengeSponsorCreateRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<ChallengeSponsorCreateResponse>;

  public createChallengeSponsor(
    accountName: string,
    challengeName: string,
    challengeSponsorCreateRequest: ChallengeSponsorCreateRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<ChallengeSponsorCreateResponse>>;

  public createChallengeSponsor(
    accountName: string,
    challengeName: string,
    challengeSponsorCreateRequest: ChallengeSponsorCreateRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<ChallengeSponsorCreateResponse>>;

  public createChallengeSponsor(
    accountName: string,
    challengeName: string,
    challengeSponsorCreateRequest: ChallengeSponsorCreateRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (accountName === null || accountName === undefined) {
      throw new Error(
        'Required parameter accountName was null or undefined when calling createChallengeSponsor.'
      );
    }
    if (challengeName === null || challengeName === undefined) {
      throw new Error(
        'Required parameter challengeName was null or undefined when calling createChallengeSponsor.'
      );
    }
    if (
      challengeSponsorCreateRequest === null ||
      challengeSponsorCreateRequest === undefined
    ) {
      throw new Error(
        'Required parameter challengeSponsorCreateRequest was null or undefined when calling createChallengeSponsor.'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (BearerAuth) required
    credential = this.configuration.lookupCredential('BearerAuth');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.post<ChallengeSponsorCreateResponse>(
      `${this.configuration.basePath}/challenges/${encodeURIComponent(
        String(accountName)
      )}/${encodeURIComponent(String(challengeName))}/sponsors`,
      challengeSponsorCreateRequest,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Delete all challenges
   * Delete all challenges
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteAllChallenges(
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<object>;

  public deleteAllChallenges(
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<object>>;

  public deleteAllChallenges(
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<object>>;

  public deleteAllChallenges(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (ApiKeyAuth) required
    credential = this.configuration.lookupCredential('ApiKeyAuth');
    if (credential) {
      headers = headers.set('X-API-Key', credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.delete<object>(
      `${this.configuration.basePath}/challenges`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Delete a challenge
   * Deletes the challenge specified
   * @param accountName The name of the account that owns the challenge
   * @param challengeName The name of the challenge
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteChallenge(
    accountName: string,
    challengeName: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<object>;

  public deleteChallenge(
    accountName: string,
    challengeName: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<object>>;

  public deleteChallenge(
    accountName: string,
    challengeName: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<object>>;

  public deleteChallenge(
    accountName: string,
    challengeName: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (accountName === null || accountName === undefined) {
      throw new Error(
        'Required parameter accountName was null or undefined when calling deleteChallenge.'
      );
    }
    if (challengeName === null || challengeName === undefined) {
      throw new Error(
        'Required parameter challengeName was null or undefined when calling deleteChallenge.'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (ApiKeyAuth) required
    credential = this.configuration.lookupCredential('ApiKeyAuth');
    if (credential) {
      headers = headers.set('X-API-Key', credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.delete<object>(
      `${this.configuration.basePath}/challenges/${encodeURIComponent(
        String(accountName)
      )}/${encodeURIComponent(String(challengeName))}`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Delete a challenge organizer
   * Deletes the challenge organizer specified
   * @param accountName The name of the account that owns the challenge
   * @param challengeName The name of the challenge
   * @param organizerId The identifier of the challenge organizer
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteChallengeOrganizer(
    accountName: string,
    challengeName: string,
    organizerId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<object>;

  public deleteChallengeOrganizer(
    accountName: string,
    challengeName: string,
    organizerId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<object>>;

  public deleteChallengeOrganizer(
    accountName: string,
    challengeName: string,
    organizerId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<object>>;

  public deleteChallengeOrganizer(
    accountName: string,
    challengeName: string,
    organizerId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (accountName === null || accountName === undefined) {
      throw new Error(
        'Required parameter accountName was null or undefined when calling deleteChallengeOrganizer.'
      );
    }
    if (challengeName === null || challengeName === undefined) {
      throw new Error(
        'Required parameter challengeName was null or undefined when calling deleteChallengeOrganizer.'
      );
    }
    if (organizerId === null || organizerId === undefined) {
      throw new Error(
        'Required parameter organizerId was null or undefined when calling deleteChallengeOrganizer.'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (ApiKeyAuth) required
    credential = this.configuration.lookupCredential('ApiKeyAuth');
    if (credential) {
      headers = headers.set('X-API-Key', credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.delete<object>(
      `${this.configuration.basePath}/challenges/${encodeURIComponent(
        String(accountName)
      )}/${encodeURIComponent(
        String(challengeName)
      )}/organizers/${encodeURIComponent(String(organizerId))}`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Delete a challenge sponsor
   * Deletes the challenge sponsor specified
   * @param accountName The name of the account that owns the challenge
   * @param challengeName The name of the challenge
   * @param sponsorId The identifier of the challenge sponsor
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteChallengeSponsor(
    accountName: string,
    challengeName: string,
    sponsorId: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<object>;

  public deleteChallengeSponsor(
    accountName: string,
    challengeName: string,
    sponsorId: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<object>>;

  public deleteChallengeSponsor(
    accountName: string,
    challengeName: string,
    sponsorId: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<object>>;

  public deleteChallengeSponsor(
    accountName: string,
    challengeName: string,
    sponsorId: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (accountName === null || accountName === undefined) {
      throw new Error(
        'Required parameter accountName was null or undefined when calling deleteChallengeSponsor.'
      );
    }
    if (challengeName === null || challengeName === undefined) {
      throw new Error(
        'Required parameter challengeName was null or undefined when calling deleteChallengeSponsor.'
      );
    }
    if (sponsorId === null || sponsorId === undefined) {
      throw new Error(
        'Required parameter sponsorId was null or undefined when calling deleteChallengeSponsor.'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (ApiKeyAuth) required
    credential = this.configuration.lookupCredential('ApiKeyAuth');
    if (credential) {
      headers = headers.set('X-API-Key', credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.delete<object>(
      `${this.configuration.basePath}/challenges/${encodeURIComponent(
        String(accountName)
      )}/${encodeURIComponent(
        String(challengeName)
      )}/sponsors/${encodeURIComponent(String(sponsorId))}`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get a challenge
   * Returns the challenge specified
   * @param accountName The name of the account that owns the challenge
   * @param challengeName The name of the challenge
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getChallenge(
    accountName: string,
    challengeName: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<Challenge>;

  public getChallenge(
    accountName: string,
    challengeName: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<Challenge>>;

  public getChallenge(
    accountName: string,
    challengeName: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<Challenge>>;

  public getChallenge(
    accountName: string,
    challengeName: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (accountName === null || accountName === undefined) {
      throw new Error(
        'Required parameter accountName was null or undefined when calling getChallenge.'
      );
    }
    if (challengeName === null || challengeName === undefined) {
      throw new Error(
        'Required parameter challengeName was null or undefined when calling getChallenge.'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.get<Challenge>(
      `${this.configuration.basePath}/challenges/${encodeURIComponent(
        String(accountName)
      )}/${encodeURIComponent(String(challengeName))}`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get a challenge README
   * Returns the challenge README specified
   * @param accountName The name of the account that owns the challenge
   * @param challengeName The name of the challenge
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getChallengeReadme(
    accountName: string,
    challengeName: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<ChallengeReadme>;

  public getChallengeReadme(
    accountName: string,
    challengeName: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<ChallengeReadme>>;

  public getChallengeReadme(
    accountName: string,
    challengeName: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<ChallengeReadme>>;

  public getChallengeReadme(
    accountName: string,
    challengeName: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (accountName === null || accountName === undefined) {
      throw new Error(
        'Required parameter accountName was null or undefined when calling getChallengeReadme.'
      );
    }
    if (challengeName === null || challengeName === undefined) {
      throw new Error(
        'Required parameter challengeName was null or undefined when calling getChallengeReadme.'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.get<ChallengeReadme>(
      `${this.configuration.basePath}/challenges/${encodeURIComponent(
        String(accountName)
      )}/${encodeURIComponent(String(challengeName))}/readme`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * List all the challenges owned by the specified account
   * List all the challenges owned by the specified account
   * @param accountName The name of the account that owns the challenge
   * @param limit Maximum number of results returned
   * @param offset Index of the first result that must be returned
   * @param searchTerms A string of search terms used to filter the results
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listAccountChallenges(
    accountName: string,
    limit?: number,
    offset?: number,
    searchTerms?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<PageOfChallenges>;

  public listAccountChallenges(
    accountName: string,
    limit?: number,
    offset?: number,
    searchTerms?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<PageOfChallenges>>;

  public listAccountChallenges(
    accountName: string,
    limit?: number,
    offset?: number,
    searchTerms?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<PageOfChallenges>>;

  public listAccountChallenges(
    accountName: string,
    limit?: number,
    offset?: number,
    searchTerms?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (accountName === null || accountName === undefined) {
      throw new Error(
        'Required parameter accountName was null or undefined when calling listAccountChallenges.'
      );
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (limit !== undefined && limit !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>limit,
        'limit'
      );
    }
    if (offset !== undefined && offset !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>offset,
        'offset'
      );
    }
    if (searchTerms !== undefined && searchTerms !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>searchTerms,
        'searchTerms'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.get<PageOfChallenges>(
      `${this.configuration.basePath}/challenges/${encodeURIComponent(
        String(accountName)
      )}`,
      {
        params: queryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * List organizers
   * Lists the organizers of the challenge.
   * @param accountName The name of the account that owns the challenge
   * @param challengeName The name of the challenge
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listChallengeOrganizers(
    accountName: string,
    challengeName: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<ChallengeOrganizerList>;

  public listChallengeOrganizers(
    accountName: string,
    challengeName: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<ChallengeOrganizerList>>;

  public listChallengeOrganizers(
    accountName: string,
    challengeName: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<ChallengeOrganizerList>>;

  public listChallengeOrganizers(
    accountName: string,
    challengeName: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (accountName === null || accountName === undefined) {
      throw new Error(
        'Required parameter accountName was null or undefined when calling listChallengeOrganizers.'
      );
    }
    if (challengeName === null || challengeName === undefined) {
      throw new Error(
        'Required parameter challengeName was null or undefined when calling listChallengeOrganizers.'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.get<ChallengeOrganizerList>(
      `${this.configuration.basePath}/challenges/${encodeURIComponent(
        String(accountName)
      )}/${encodeURIComponent(String(challengeName))}/organizers`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * List sponsors
   * Lists the sponsors of the challenge.
   * @param accountName The name of the account that owns the challenge
   * @param challengeName The name of the challenge
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listChallengeSponsors(
    accountName: string,
    challengeName: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<ChallengeSponsorList>;

  public listChallengeSponsors(
    accountName: string,
    challengeName: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<ChallengeSponsorList>>;

  public listChallengeSponsors(
    accountName: string,
    challengeName: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<ChallengeSponsorList>>;

  public listChallengeSponsors(
    accountName: string,
    challengeName: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (accountName === null || accountName === undefined) {
      throw new Error(
        'Required parameter accountName was null or undefined when calling listChallengeSponsors.'
      );
    }
    if (challengeName === null || challengeName === undefined) {
      throw new Error(
        'Required parameter challengeName was null or undefined when calling listChallengeSponsors.'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.get<ChallengeSponsorList>(
      `${this.configuration.basePath}/challenges/${encodeURIComponent(
        String(accountName)
      )}/${encodeURIComponent(String(challengeName))}/sponsors`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * List stargazers
   * Lists the people that have starred the challenge.
   * @param accountName The name of the account that owns the challenge
   * @param challengeName The name of the challenge
   * @param limit Maximum number of results returned
   * @param offset Index of the first result that must be returned
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listChallengeStargazers(
    accountName: string,
    challengeName: string,
    limit?: number,
    offset?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<PageOfUsers>;

  public listChallengeStargazers(
    accountName: string,
    challengeName: string,
    limit?: number,
    offset?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<PageOfUsers>>;

  public listChallengeStargazers(
    accountName: string,
    challengeName: string,
    limit?: number,
    offset?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<PageOfUsers>>;

  public listChallengeStargazers(
    accountName: string,
    challengeName: string,
    limit?: number,
    offset?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (accountName === null || accountName === undefined) {
      throw new Error(
        'Required parameter accountName was null or undefined when calling listChallengeStargazers.'
      );
    }
    if (challengeName === null || challengeName === undefined) {
      throw new Error(
        'Required parameter challengeName was null or undefined when calling listChallengeStargazers.'
      );
    }

    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (limit !== undefined && limit !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>limit,
        'limit'
      );
    }
    if (offset !== undefined && offset !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>offset,
        'offset'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.get<PageOfUsers>(
      `${this.configuration.basePath}/challenges/${encodeURIComponent(
        String(accountName)
      )}/${encodeURIComponent(String(challengeName))}/stargazers`,
      {
        params: queryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * List stargazers
   * Lists the challenge topics.
   * @param accountName The name of the account that owns the challenge
   * @param challengeName The name of the challenge
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listChallengeTopics(
    accountName: string,
    challengeName: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<ArrayOfTopics>;

  public listChallengeTopics(
    accountName: string,
    challengeName: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<ArrayOfTopics>>;

  public listChallengeTopics(
    accountName: string,
    challengeName: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<ArrayOfTopics>>;

  public listChallengeTopics(
    accountName: string,
    challengeName: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (accountName === null || accountName === undefined) {
      throw new Error(
        'Required parameter accountName was null or undefined when calling listChallengeTopics.'
      );
    }
    if (challengeName === null || challengeName === undefined) {
      throw new Error(
        'Required parameter challengeName was null or undefined when calling listChallengeTopics.'
      );
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.get<ArrayOfTopics>(
      `${this.configuration.basePath}/challenges/${encodeURIComponent(
        String(accountName)
      )}/${encodeURIComponent(String(challengeName))}/topics`,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * List all the challenges
   * Returns all the challenges
   * @param limit Maximum number of results returned
   * @param offset Index of the first result that must be returned
   * @param sort Properties used to sort the results that must be returned:   * featured - featured challenge, from featured to non-featured.   * startDate - start date of a challenge, from latest to oldest.   * participantCount - number of participants of a challenge, from most to least.   * viewCount - number of views of a challenge, from most to least.   * starredCount - number of stargazers of a challenge, from most to least.   * name - name of a challenge, from A to Z.   * createdAt - when a challenge is created, from latest to oldest.   * updatedAt - when a challenge is updated, from latest to oldest.
   * @param direction Can be either &#x60;asc&#x60; or &#x60;desc&#x60;. Ignored without &#x60;sort&#x60; parameter.
   * @param searchTerms A string of search terms used to filter the results
   * @param topics Array of topics used to filter the results
   * @param inputDataTypes Array of input data types used to filter the results
   * @param status Array of challenge status used to filter the results
   * @param platformIds Array of challenge platform ids used to filter the results
   * @param difficulty Array of challenge difficulty levels used to filter the results
   * @param submissionTypes Array of challenge submission types used to filter the results
   * @param incentiveTypes Array of challenge incentive types used to filter the results
   * @param startDateRange Return challenges that start during the date range specified
   * @param orgIds Array of organization ids used to filter the results
   * @param organizerIds Array of organizer identifiers used to filter the results
   * @param sponsorIds Array of sponsor org identifiers used to filter the results
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listChallenges(
    limit?: number,
    offset?: number,
    sort?:
      | 'featured'
      | 'startDate'
      | 'participantCount'
      | 'viewCount'
      | 'starredCount'
      | 'name'
      | 'createdAt'
      | 'updatedAt',
    direction?: 'asc' | 'desc',
    searchTerms?: string,
    topics?: Array<string>,
    inputDataTypes?: Array<string>,
    status?: Array<ChallengeStatus>,
    platformIds?: Array<string>,
    difficulty?: Array<ChallengeDifficulty>,
    submissionTypes?: Array<ChallengeSubmissionType>,
    incentiveTypes?: Array<ChallengeIncentiveType>,
    startDateRange?: DateRange,
    orgIds?: Array<string>,
    organizerIds?: Array<string>,
    sponsorIds?: Array<string>,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<PageOfChallenges>;

  public listChallenges(
    limit?: number,
    offset?: number,
    sort?:
      | 'featured'
      | 'startDate'
      | 'participantCount'
      | 'viewCount'
      | 'starredCount'
      | 'name'
      | 'createdAt'
      | 'updatedAt',
    direction?: 'asc' | 'desc',
    searchTerms?: string,
    topics?: Array<string>,
    inputDataTypes?: Array<string>,
    status?: Array<ChallengeStatus>,
    platformIds?: Array<string>,
    difficulty?: Array<ChallengeDifficulty>,
    submissionTypes?: Array<ChallengeSubmissionType>,
    incentiveTypes?: Array<ChallengeIncentiveType>,
    startDateRange?: DateRange,
    orgIds?: Array<string>,
    organizerIds?: Array<string>,
    sponsorIds?: Array<string>,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<PageOfChallenges>>;

  public listChallenges(
    limit?: number,
    offset?: number,
    sort?:
      | 'featured'
      | 'startDate'
      | 'participantCount'
      | 'viewCount'
      | 'starredCount'
      | 'name'
      | 'createdAt'
      | 'updatedAt',
    direction?: 'asc' | 'desc',
    searchTerms?: string,
    topics?: Array<string>,
    inputDataTypes?: Array<string>,
    status?: Array<ChallengeStatus>,
    platformIds?: Array<string>,
    difficulty?: Array<ChallengeDifficulty>,
    submissionTypes?: Array<ChallengeSubmissionType>,
    incentiveTypes?: Array<ChallengeIncentiveType>,
    startDateRange?: DateRange,
    orgIds?: Array<string>,
    organizerIds?: Array<string>,
    sponsorIds?: Array<string>,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<PageOfChallenges>>;

  public listChallenges(
    limit?: number,
    offset?: number,
    sort?:
      | 'featured'
      | 'startDate'
      | 'participantCount'
      | 'viewCount'
      | 'starredCount'
      | 'name'
      | 'createdAt'
      | 'updatedAt',
    direction?: 'asc' | 'desc',
    searchTerms?: string,
    topics?: Array<string>,
    inputDataTypes?: Array<string>,
    status?: Array<ChallengeStatus>,
    platformIds?: Array<string>,
    difficulty?: Array<ChallengeDifficulty>,
    submissionTypes?: Array<ChallengeSubmissionType>,
    incentiveTypes?: Array<ChallengeIncentiveType>,
    startDateRange?: DateRange,
    orgIds?: Array<string>,
    organizerIds?: Array<string>,
    sponsorIds?: Array<string>,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (limit !== undefined && limit !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>limit,
        'limit'
      );
    }
    if (offset !== undefined && offset !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>offset,
        'offset'
      );
    }
    if (sort !== undefined && sort !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>sort,
        'sort'
      );
    }
    if (direction !== undefined && direction !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>direction,
        'direction'
      );
    }
    if (searchTerms !== undefined && searchTerms !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>searchTerms,
        'searchTerms'
      );
    }
    if (topics) {
      topics.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'topics'
        );
      });
    }
    if (inputDataTypes) {
      inputDataTypes.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'inputDataTypes'
        );
      });
    }
    if (status) {
      status.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'status'
        );
      });
    }
    if (platformIds) {
      platformIds.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'platformIds'
        );
      });
    }
    if (difficulty) {
      difficulty.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'difficulty'
        );
      });
    }
    if (submissionTypes) {
      submissionTypes.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'submissionTypes'
        );
      });
    }
    if (incentiveTypes) {
      incentiveTypes.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'incentiveTypes'
        );
      });
    }
    if (startDateRange !== undefined && startDateRange !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>startDateRange,
        'startDateRange'
      );
    }
    if (orgIds) {
      orgIds.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'orgIds'
        );
      });
    }
    if (organizerIds) {
      organizerIds.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'organizerIds'
        );
      });
    }
    if (sponsorIds) {
      sponsorIds.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'sponsorIds'
        );
      });
    }

    let headers = this.defaultHeaders;

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.get<PageOfChallenges>(
      `${this.configuration.basePath}/challenges`,
      {
        params: queryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Update a challenge README
   * Update a challenge README
   * @param accountName The name of the account that owns the challenge
   * @param challengeName The name of the challenge
   * @param challengeReadmeUpdateRequest
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateChallengeReadme(
    accountName: string,
    challengeName: string,
    challengeReadmeUpdateRequest: ChallengeReadmeUpdateRequest,
    observe?: 'body',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<object>;

  public updateChallengeReadme(
    accountName: string,
    challengeName: string,
    challengeReadmeUpdateRequest: ChallengeReadmeUpdateRequest,
    observe?: 'response',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpResponse<object>>;

  public updateChallengeReadme(
    accountName: string,
    challengeName: string,
    challengeReadmeUpdateRequest: ChallengeReadmeUpdateRequest,
    observe?: 'events',
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<HttpEvent<object>>;

  public updateChallengeReadme(
    accountName: string,
    challengeName: string,
    challengeReadmeUpdateRequest: ChallengeReadmeUpdateRequest,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: 'application/json' }
  ): Observable<any> {
    if (accountName === null || accountName === undefined) {
      throw new Error(
        'Required parameter accountName was null or undefined when calling updateChallengeReadme.'
      );
    }
    if (challengeName === null || challengeName === undefined) {
      throw new Error(
        'Required parameter challengeName was null or undefined when calling updateChallengeReadme.'
      );
    }
    if (
      challengeReadmeUpdateRequest === null ||
      challengeReadmeUpdateRequest === undefined
    ) {
      throw new Error(
        'Required parameter challengeReadmeUpdateRequest was null or undefined when calling updateChallengeReadme.'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (BearerAuth) required
    credential = this.configuration.lookupCredential('BearerAuth');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ['application/json'];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType_ = 'text';
    }

    return this.httpClient.patch<object>(
      `${this.configuration.basePath}/challenges/${encodeURIComponent(
        String(accountName)
      )}/${encodeURIComponent(String(challengeName))}/readme`,
      challengeReadmeUpdateRequest,
      {
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
